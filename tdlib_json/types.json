{
  "acceptCall": {
    "fields": [
      {
        "type": "number",
        "name": "call_id",
        "desc": "Call identifier."
      },
      {
        "type": "callProtocol",
        "name": "protocol",
        "desc": "Description of the call protocols supported by the client."
      }
    ],
    "extends": "TDFunction",
    "desc": "Accepts an incoming call.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1accept_call.html"
  },
  "addChatMember": {
    "fields": [
      {
        "type": "string",
        "name": "chat_id",
        "desc": "Chat identifier."
      },
      {
        "type": "number",
        "name": "user_id",
        "desc": "Identifier of the user."
      },
      {
        "type": "number",
        "name": "forward_limit",
        "desc": "The number of earlier messages from the chat to be forwarded to the new member; up to 300. Ignored for supergroups and channels."
      }
    ],
    "extends": "TDFunction",
    "desc": "Adds a new member to a chat. Members can't be added to private or secret chats. Members will not be added until the chat state has been synchronized with the server.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1add_chat_member.html"
  },
  "addChatMembers": {
    "fields": [
      {
        "type": "string",
        "name": "chat_id",
        "desc": "Chat identifier."
      },
      {
        "type": "number[]",
        "name": "user_ids",
        "desc": "Identifiers of the users to be added to the chat."
      }
    ],
    "extends": "TDFunction",
    "desc": "Adds multiple new members to a chat. Currently this option is only available for supergroups and channels. This option can't be used to join a chat. Members can't be added to a channel if it has more than 200 members. Members will not be added until the chat state has been synchronized with the server.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1add_chat_members.html"
  },
  "addFavoriteSticker": {
    "fields": [
      {
        "type": "InputFile",
        "name": "sticker",
        "desc": "Sticker file to add."
      }
    ],
    "extends": "TDFunction",
    "desc": "Adds a new sticker to the list of favorite stickers. The new sticker is added to the top of the list. If the sticker was already in the list, it is removed from the list first. Only stickers belonging to a sticker set can be added to this list.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1add_favorite_sticker.html"
  },
  "addNetworkStatistics": {
    "fields": [
      {
        "type": "NetworkStatisticsEntry",
        "name": "entry",
        "desc": "The network statistics entry with the data to be added to statistics."
      }
    ],
    "extends": "TDFunction",
    "desc": "Adds the specified data to data usage statistics. Can be called before authorization.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1add_network_statistics.html"
  },
  "addRecentlyFoundChat": {
    "fields": [
      {
        "type": "string",
        "name": "chat_id",
        "desc": "Identifier of the chat to add."
      }
    ],
    "extends": "TDFunction",
    "desc": "Adds a chat to the list of recently found chats. The chat is added to the beginning of the list. If the chat is already in the list, it will be removed from the list first.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1add_recently_found_chat.html"
  },
  "addRecentSticker": {
    "fields": [
      {
        "type": "bool",
        "name": "is_attached",
        "desc": "Pass true to add the sticker to the list of stickers recently attached to photo or video files; pass false to add the sticker to the list of recently sent stickers."
      },
      {
        "type": "InputFile",
        "name": "sticker",
        "desc": "Sticker file to add."
      }
    ],
    "extends": "TDFunction",
    "desc": "Manually adds a new sticker to the list of recently used stickers. The new sticker is added to the top of the list. If the sticker was already in the list, it is removed from the list first. Only stickers belonging to a sticker set can be added to this list.\nReturns object_ptr<Stickers>.",
    "returnType": "stickers",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1add_recent_sticker.html"
  },
  "addSavedAnimation": {
    "fields": [
      {
        "type": "InputFile",
        "name": "animation",
        "desc": "The animation file to be added. Only animations known to the server (i.e. successfully sent via a message) can be added to the list."
      }
    ],
    "extends": "TDFunction",
    "desc": "Manually adds a new animation to the list of saved animations. The new animation is added to the beginning of the list. If the animation was already in the list, it is removed first. Only non-secret video animations with MIME type \"video/mp4\" can be added to the list.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1add_saved_animation.html"
  },
  "addStickerToSet": {
    "fields": [
      {
        "type": "number",
        "name": "user_id",
        "desc": "Sticker set owner."
      },
      {
        "type": "string",
        "name": "name",
        "desc": "Sticker set name."
      },
      {
        "type": "inputSticker",
        "name": "sticker",
        "desc": "Sticker to add to the set."
      }
    ],
    "extends": "TDFunction",
    "desc": "Adds a new sticker to a set; for bots only. Returns the sticker set.\nReturns object_ptr<StickerSet>.",
    "returnType": "stickerSet",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1add_sticker_to_set.html"
  },
  "answerCallbackQuery": {
    "fields": [
      {
        "type": "string",
        "name": "callback_query_id",
        "desc": "Identifier of the callback query."
      },
      {
        "type": "string",
        "name": "text",
        "desc": "Text of the answer."
      },
      {
        "type": "bool",
        "name": "show_alert",
        "desc": "If true, an alert should be shown to the user instead of a toast notification."
      },
      {
        "type": "string",
        "name": "url",
        "desc": "URL to be opened."
      },
      {
        "type": "number",
        "name": "cache_time",
        "desc": "Time during which the result of the query can be cached, in seconds."
      }
    ],
    "extends": "TDFunction",
    "desc": "Sets the result of a callback query; for bots only.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1answer_callback_query.html"
  },
  "answerCustomQuery": {
    "fields": [
      {
        "type": "string",
        "name": "custom_query_id",
        "desc": "Identifier of a custom query."
      },
      {
        "type": "string",
        "name": "data",
        "desc": "JSON-serialized answer to the query."
      }
    ],
    "extends": "TDFunction",
    "desc": "Answers a custom query; for bots only.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1answer_custom_query.html"
  },
  "answerInlineQuery": {
    "fields": [
      {
        "type": "string",
        "name": "inline_query_id",
        "desc": "Identifier of the inline query."
      },
      {
        "type": "bool",
        "name": "is_personal",
        "desc": "True, if the result of the query can be cached for the specified user."
      },
      {
        "type": "InputInlineQueryResult[]",
        "name": "results",
        "desc": "The results of the query."
      },
      {
        "type": "number",
        "name": "cache_time",
        "desc": "Allowed time to cache the results of the query, in seconds."
      },
      {
        "type": "string",
        "name": "next_offset",
        "desc": "Offset for the next inline query; pass an empty string if there are no more results."
      },
      {
        "type": "string",
        "name": "switch_pm_text",
        "desc": "If non-empty, this text should be shown on the button that opens a private chat with the bot and sends a start message to the bot with the parameter switch_pm_parameter."
      },
      {
        "type": "string",
        "name": "switch_pm_parameter",
        "desc": "The parameter for the bot start message."
      }
    ],
    "extends": "TDFunction",
    "desc": "Sets the result of an inline query; for bots only.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1answer_inline_query.html"
  },
  "answerPreCheckoutQuery": {
    "fields": [
      {
        "type": "string",
        "name": "pre_checkout_query_id",
        "desc": "Identifier of the pre-checkout query."
      },
      {
        "type": "string",
        "name": "error_message",
        "desc": "An error message, empty on success."
      }
    ],
    "extends": "TDFunction",
    "desc": "Sets the result of a pre-checkout query; for bots only.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1answer_pre_checkout_query.html"
  },
  "answerShippingQuery": {
    "fields": [
      {
        "type": "string",
        "name": "shipping_query_id",
        "desc": "Identifier of the shipping query."
      },
      {
        "type": "shippingOption[]",
        "name": "shipping_options",
        "desc": "Available shipping options."
      },
      {
        "type": "string",
        "name": "error_message",
        "desc": "An error message, empty on success."
      }
    ],
    "extends": "TDFunction",
    "desc": "Sets the result of a shipping query; for bots only.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1answer_shipping_query.html"
  },
  "blockUser": {
    "fields": [
      {
        "type": "number",
        "name": "user_id",
        "desc": "User identifier."
      }
    ],
    "extends": "TDFunction",
    "desc": "Adds a user to the blacklist.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1block_user.html"
  },
  "cancelDownloadFile": {
    "fields": [
      {
        "type": "number",
        "name": "file_id",
        "desc": "Identifier of a file to stop downloading."
      }
    ],
    "extends": "TDFunction",
    "desc": "Stops the downloading of a file. If a file has already been downloaded, does nothing.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1cancel_download_file.html"
  },
  "cancelUploadFile": {
    "fields": [
      {
        "type": "number",
        "name": "file_id",
        "desc": "Identifier of the file to stop uploading."
      }
    ],
    "extends": "TDFunction",
    "desc": "Stops the uploading of a file. Supported only for files uploaded by using uploadFile. For other files the behavior is undefined.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1cancel_upload_file.html"
  },
  "changeChatReportSpamState": {
    "fields": [
      {
        "type": "string",
        "name": "chat_id",
        "desc": "Chat identifier."
      },
      {
        "type": "bool",
        "name": "is_spam_chat",
        "desc": "If true, the chat will be reported as spam; otherwise it will be marked as not spam."
      }
    ],
    "extends": "TDFunction",
    "desc": "Used to let the server know whether a chat is spam or not. Can be used only if ChatReportSpamState.can_report_spam is true. After this request, ChatReportSpamState.can_report_spam becomes false forever.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1change_chat_report_spam_state.html"
  },
  "changeImportedContacts": {
    "fields": [
      {
        "type": "contact[]",
        "name": "contacts",
        "desc": "The new list of contacts."
      }
    ],
    "extends": "TDFunction",
    "desc": "Changes imported contacts using the list of current user contacts saved on the device. Imports newly added contacts and, if at least the file database is enabled, deletes recently deleted contacts. Query result depends on the result of the previous query, so only one query is possible at the same time.\nReturns object_ptr<ImportedContacts>.",
    "returnType": "importedContacts",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1change_imported_contacts.html"
  },
  "changePhoneNumber": {
    "fields": [
      {
        "type": "string",
        "name": "phone_number",
        "desc": "The new phone number of the user in international format."
      },
      {
        "type": "bool",
        "name": "allow_flash_call",
        "desc": "Pass true if the code can be sent via flash call to the specified phone number."
      },
      {
        "type": "bool",
        "name": "is_current_phone_number",
        "desc": "Pass true if the phone number is used on the current device. Ignored if allow_flash_call is false."
      }
    ],
    "extends": "TDFunction",
    "desc": "Changes the phone number of the user and sends an authentication code to the user's new phone number. On success, returns information about the sent code.\nReturns object_ptr<AuthenticationCodeInfo>.",
    "returnType": "authenticationCodeInfo",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1change_phone_number.html"
  },
  "changeStickerSet": {
    "fields": [
      {
        "type": "string",
        "name": "set_id",
        "desc": "Identifier of the sticker set."
      },
      {
        "type": "bool",
        "name": "is_installed",
        "desc": "The new value of is_installed."
      },
      {
        "type": "bool",
        "name": "is_archived",
        "desc": "The new value of is_archived. A sticker set can't be installed and archived simultaneously."
      }
    ],
    "extends": "TDFunction",
    "desc": "Installs/uninstalls or activates/archives a sticker set.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1change_sticker_set.html"
  },
  "checkAuthenticationBotToken": {
    "fields": [
      {
        "type": "string",
        "name": "token",
        "desc": "The bot token."
      }
    ],
    "extends": "TDFunction",
    "desc": "Checks the authentication token of a bot; to log in as a bot. Works only when the current authorization state is authorizationStateWaitPhoneNumber. Can be used instead of setAuthenticationPhoneNumber and checkAuthenticationCode to log in.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1check_authentication_bot_token.html"
  },
  "checkAuthenticationCode": {
    "fields": [
      {
        "type": "string",
        "name": "code",
        "desc": "The verification code received via SMS, Telegram message, phone call, or flash call."
      },
      {
        "type": "string",
        "name": "first_name",
        "desc": "If the user is not yet registered, the first name of the user; 1-255 characters."
      },
      {
        "type": "string",
        "name": "last_name",
        "desc": "If the user is not yet registered; the last name of the user; optional; 0-255 characters."
      }
    ],
    "extends": "TDFunction",
    "desc": "Checks the authentication code. Works only when the current authorization state is authorizationStateWaitCode.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1check_authentication_code.html"
  },
  "checkAuthenticationPassword": {
    "fields": [
      {
        "type": "string",
        "name": "password",
        "desc": "The password to check."
      }
    ],
    "extends": "TDFunction",
    "desc": "Checks the authentication password for correctness. Works only when the current authorization state is authorizationStateWaitPassword.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1check_authentication_password.html"
  },
  "checkChangePhoneNumberCode": {
    "fields": [
      {
        "type": "string",
        "name": "code",
        "desc": "Verification code received by SMS, phone call or flash call."
      }
    ],
    "extends": "TDFunction",
    "desc": "Checks the authentication code sent to confirm a new phone number of the user.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1check_change_phone_number_code.html"
  },
  "checkChatInviteLink": {
    "fields": [
      {
        "type": "string",
        "name": "invite_link",
        "desc": "Invite link to be checked; should begin with \"<a href=\"https://t.me/joinchat/\",\">https://t.me/joinchat/&quot;,</a> \"<a href=\"https://telegram.me/joinchat/\",\">https://telegram.me/joinchat/&quot;,</a> or \"<a href=\"https://telegram.dog/joinchat/\"\">https://telegram.dog/joinchat/&quot;</a>."
      }
    ],
    "extends": "TDFunction",
    "desc": "Checks the validity of an invite link for a chat and returns information about the corresponding chat.\nReturns object_ptr<ChatInviteLinkInfo>.",
    "returnType": "chatInviteLinkInfo",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1check_chat_invite_link.html"
  },
  "checkDatabaseEncryptionKey": {
    "fields": [
      {
        "type": "string",
        "name": "encryption_key",
        "desc": "Encryption key to check or set up."
      }
    ],
    "extends": "TDFunction",
    "desc": "Checks the database encryption key for correctness. Works only when the current authorization state is authorizationStateWaitEncryptionKey.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1check_database_encryption_key.html"
  },
  "clearImportedContacts": {
    "fields": [],
    "extends": "TDFunction",
    "desc": "Clears all imported contacts.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1clear_imported_contacts.html"
  },
  "clearRecentlyFoundChats": {
    "fields": [],
    "extends": "TDFunction",
    "desc": "Clears the list of recently found chats.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1clear_recently_found_chats.html"
  },
  "clearRecentStickers": {
    "fields": [
      {
        "type": "bool",
        "name": "is_attached",
        "desc": "Pass true to clear the list of stickers recently attached to photo or video files; pass false to clear the list of recently sent stickers."
      }
    ],
    "extends": "TDFunction",
    "desc": "Clears the list of recently used stickers.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1clear_recent_stickers.html"
  },
  "close": {
    "fields": [],
    "extends": "TDFunction",
    "desc": "Closes the TDLib instance. All databases will be flushed to disk and properly closed. After the close completes, updateAuthorizationState with authorizationStateClosed will be sent.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1close.html"
  },
  "closeChat": {
    "fields": [
      {
        "type": "string",
        "name": "chat_id",
        "desc": "Chat identifier."
      }
    ],
    "extends": "TDFunction",
    "desc": "This method should be called if the chat is closed by the user. Many useful activities depend on the chat being opened or closed.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1close_chat.html"
  },
  "closeSecretChat": {
    "fields": [
      {
        "type": "number",
        "name": "secret_chat_id",
        "desc": "Secret chat identifier."
      }
    ],
    "extends": "TDFunction",
    "desc": "Closes a secret chat, effectively transfering its state to secretChatStateClosed.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1close_secret_chat.html"
  },
  "createBasicGroupChat": {
    "fields": [
      {
        "type": "number",
        "name": "basic_group_id",
        "desc": "Basic group identifier."
      }
    ],
    "extends": "TDFunction",
    "desc": "Returns an existing chat corresponding to a known basic group.\nReturns object_ptr<Chat>.",
    "returnType": "chat",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1create_basic_group_chat.html"
  },
  "createCall": {
    "fields": [
      {
        "type": "number",
        "name": "user_id",
        "desc": "Identifier of the user to be called."
      },
      {
        "type": "callProtocol",
        "name": "protocol",
        "desc": "Description of the call protocols supported by the client."
      }
    ],
    "extends": "TDFunction",
    "desc": "Creates a new call.\nReturns object_ptr<CallId>.",
    "returnType": "callId",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1create_call.html"
  },
  "createNewBasicGroupChat": {
    "fields": [
      {
        "type": "number[]",
        "name": "user_ids",
        "desc": "Identifiers of users to be added to the basic group."
      },
      {
        "type": "string",
        "name": "title",
        "desc": "Title of the new basic group; 1-255 characters."
      }
    ],
    "extends": "TDFunction",
    "desc": "Creates a new basic group and sends a corresponding messageBasicGroupChatCreate. Returns the newly created chat.\nReturns object_ptr<Chat>.",
    "returnType": "chat",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1create_new_basic_group_chat.html"
  },
  "createNewSecretChat": {
    "fields": [
      {
        "type": "number",
        "name": "user_id",
        "desc": "Identifier of the target user."
      }
    ],
    "extends": "TDFunction",
    "desc": "Creates a new secret chat. Returns the newly created chat.\nReturns object_ptr<Chat>.",
    "returnType": "chat",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1create_new_secret_chat.html"
  },
  "createNewStickerSet": {
    "fields": [
      {
        "type": "number",
        "name": "user_id",
        "desc": "Sticker set owner."
      },
      {
        "type": "string",
        "name": "title",
        "desc": "Sticker set title; 1-64 characters."
      },
      {
        "type": "string",
        "name": "name",
        "desc": "Sticker set name. Can contain only English letters, digits and underscores. Must end with <em>\"<em>by</em><bot username>\"</em> (<em><bot_username></em> is case insensitive); 1-64 characters."
      },
      {
        "type": "bool",
        "name": "is_masks",
        "desc": "True, if stickers are masks."
      },
      {
        "type": "inputSticker[]",
        "name": "stickers",
        "desc": "List of stickers to be added to the set."
      }
    ],
    "extends": "TDFunction",
    "desc": "Creates a new sticker set; for bots only. Returns the newly created sticker set.\nReturns object_ptr<StickerSet>.",
    "returnType": "stickerSet",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1create_new_sticker_set.html"
  },
  "createNewSupergroupChat": {
    "fields": [
      {
        "type": "string",
        "name": "title",
        "desc": "Title of the new chat; 1-255 characters."
      },
      {
        "type": "bool",
        "name": "is_channel",
        "desc": "True, if a channel chat should be created."
      },
      {
        "type": "string",
        "name": "description",
        "desc": "Chat description; 0-255 characters."
      }
    ],
    "extends": "TDFunction",
    "desc": "Creates a new supergroup or channel and sends a corresponding messageSupergroupChatCreate. Returns the newly created chat.\nReturns object_ptr<Chat>.",
    "returnType": "chat",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1create_new_supergroup_chat.html"
  },
  "createPrivateChat": {
    "fields": [
      {
        "type": "number",
        "name": "user_id",
        "desc": "User identifier."
      }
    ],
    "extends": "TDFunction",
    "desc": "Returns an existing chat corresponding to a given user.\nReturns object_ptr<Chat>.",
    "returnType": "chat",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1create_private_chat.html"
  },
  "createSecretChat": {
    "fields": [
      {
        "type": "number",
        "name": "secret_chat_id",
        "desc": "Secret Chat identifier."
      }
    ],
    "extends": "TDFunction",
    "desc": "Returns an existing chat corresponding to a known secret chat.\nReturns object_ptr<Chat>.",
    "returnType": "chat",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1create_secret_chat.html"
  },
  "createSupergroupChat": {
    "fields": [
      {
        "type": "number",
        "name": "supergroup_id",
        "desc": "Supergroup or channel identifier."
      }
    ],
    "extends": "TDFunction",
    "desc": "Returns an existing chat corresponding to a known supergroup or channel.\nReturns object_ptr<Chat>.",
    "returnType": "chat",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1create_supergroup_chat.html"
  },
  "createTemporaryPassword": {
    "fields": [
      {
        "type": "string",
        "name": "password",
        "desc": "Persistent user password."
      },
      {
        "type": "number",
        "name": "valid_for",
        "desc": "Time during which the temporary password will be valid, in seconds; should be between 60 and 86400."
      }
    ],
    "extends": "TDFunction",
    "desc": "Creates a new temporary password for processing payments.\nReturns object_ptr<TemporaryPasswordState>.",
    "returnType": "temporaryPasswordState",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1create_temporary_password.html"
  },
  "deleteAccount": {
    "fields": [
      {
        "type": "string",
        "name": "reason",
        "desc": "The reason why the account was deleted; optional."
      }
    ],
    "extends": "TDFunction",
    "desc": "Deletes the account of the current user, deleting all information associated with the user from the server. The phone number of the account can be used to create a new account.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1delete_account.html"
  },
  "deleteChatHistory": {
    "fields": [
      {
        "type": "string",
        "name": "chat_id",
        "desc": "Chat identifier."
      },
      {
        "type": "bool",
        "name": "remove_from_chat_list",
        "desc": "Pass true if the chat should be removed from the chats list."
      }
    ],
    "extends": "TDFunction",
    "desc": "Deletes all messages in the chat only for the user. Cannot be used in channels and public supergroups.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1delete_chat_history.html"
  },
  "deleteChatMessagesFromUser": {
    "fields": [
      {
        "type": "string",
        "name": "chat_id",
        "desc": "Chat identifier."
      },
      {
        "type": "number",
        "name": "user_id",
        "desc": "User identifier."
      }
    ],
    "extends": "TDFunction",
    "desc": "Deletes all messages sent by the specified user to a chat. Supported only in supergroups; requires can_delete_messages administrator privileges.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1delete_chat_messages_from_user.html"
  },
  "deleteChatReplyMarkup": {
    "fields": [
      {
        "type": "string",
        "name": "chat_id",
        "desc": "Chat identifier."
      },
      {
        "type": "string",
        "name": "message_id",
        "desc": "The message identifier of the used keyboard."
      }
    ],
    "extends": "TDFunction",
    "desc": "Deletes the default reply markup from a chat. Must be called after a one-time keyboard or a ForceReply reply markup has been used. UpdateChatReplyMarkup will be sent if the reply markup will be changed.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1delete_chat_reply_markup.html"
  },
  "deleteFile": {
    "fields": [
      {
        "type": "number",
        "name": "file_id",
        "desc": "Identifier of the file to delete."
      }
    ],
    "extends": "TDFunction",
    "desc": "Deletes a file from the TDLib file cache.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1delete_file.html"
  },
  "deleteMessages": {
    "fields": [
      {
        "type": "string",
        "name": "chat_id",
        "desc": "Chat identifier."
      },
      {
        "type": "string[]",
        "name": "message_ids",
        "desc": "Identifiers of the messages to be deleted."
      },
      {
        "type": "bool",
        "name": "revoke",
        "desc": "Pass true to try to delete outgoing messages for all chat members (may fail if messages are too old). Always true for supergroups, channels and secret chats."
      }
    ],
    "extends": "TDFunction",
    "desc": "Deletes messages.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1delete_messages.html"
  },
  "deleteProfilePhoto": {
    "fields": [
      {
        "type": "string",
        "name": "profile_photo_id",
        "desc": "Identifier of the profile photo to delete."
      }
    ],
    "extends": "TDFunction",
    "desc": "Deletes a profile photo. If something changes, updateUser will be sent.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1delete_profile_photo.html"
  },
  "deleteSavedCredentials": {
    "fields": [],
    "extends": "TDFunction",
    "desc": "Deletes saved credentials for all payment provider bots.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1delete_saved_credentials.html"
  },
  "deleteSavedOrderInfo": {
    "fields": [],
    "extends": "TDFunction",
    "desc": "Deletes saved order info.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1delete_saved_order_info.html"
  },
  "deleteSupergroup": {
    "fields": [
      {
        "type": "number",
        "name": "supergroup_id",
        "desc": "Identifier of the supergroup or channel."
      }
    ],
    "extends": "TDFunction",
    "desc": "Deletes a supergroup or channel along with all messages in the corresponding chat. This will release the supergroup or channel username and remove all members; requires creator privileges in the supergroup or channel. Chats with more than 1000 members can't be deleted using this method.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1delete_supergroup.html"
  },
  "destroy": {
    "fields": [],
    "extends": "TDFunction",
    "desc": "Closes the TDLib instance, destroying all local data without a proper logout. The current user session will remain in the list of all active sessions. All local data will be destroyed. After the destruction completes updateAuthorizationState with authorizationStateClosed will be sent.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1destroy.html"
  },
  "discardCall": {
    "fields": [
      {
        "type": "number",
        "name": "call_id",
        "desc": "Call identifier."
      },
      {
        "type": "bool",
        "name": "is_disconnected",
        "desc": "True, if the user was disconnected."
      },
      {
        "type": "number",
        "name": "duration",
        "desc": "The call duration, in seconds."
      },
      {
        "type": "string",
        "name": "connection_id",
        "desc": "Identifier of the connection used during the call."
      }
    ],
    "extends": "TDFunction",
    "desc": "Discards a call.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1discard_call.html"
  },
  "downloadFile": {
    "fields": [
      {
        "type": "number",
        "name": "file_id",
        "desc": "Identifier of the file to download."
      },
      {
        "type": "number",
        "name": "priority",
        "desc": "Priority of the download (1-32). The higher the priority, the earlier the file will be downloaded. If the priorities of two files are equal, then the last one for which <a class=\"el\" href=\"classtd_1_1td__api_1_1download_file.html\">downloadFile</a> was called will be downloaded first."
      }
    ],
    "extends": "TDFunction",
    "desc": "Asynchronously downloads a file from the cloud. updateFile will be used to notify about the download progress and successful completion of the download. Returns file state just after the download has been started.\nReturns object_ptr<File>.",
    "returnType": "file",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1download_file.html"
  },
  "editInlineMessageCaption": {
    "fields": [
      {
        "type": "string",
        "name": "inline_message_id",
        "desc": "Inline message identifier."
      },
      {
        "type": "ReplyMarkup",
        "name": "reply_markup",
        "desc": "New message reply markup."
      },
      {
        "type": "string",
        "name": "caption",
        "desc": "New message content caption; 0-200 characters."
      }
    ],
    "extends": "TDFunction",
    "desc": "Edits the caption of an inline message sent via a bot; for bots only.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1edit_inline_message_caption.html"
  },
  "editInlineMessageLiveLocation": {
    "fields": [
      {
        "type": "string",
        "name": "inline_message_id",
        "desc": "Inline message identifier."
      },
      {
        "type": "ReplyMarkup",
        "name": "reply_markup",
        "desc": "New message reply markup."
      },
      {
        "type": "location",
        "name": "location",
        "desc": "New location content of the message; may be null. Pass null to stop sharing the live location."
      }
    ],
    "extends": "TDFunction",
    "desc": "Edits the content of a live location in an inline message sent via a bot; for bots only.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1edit_inline_message_live_location.html"
  },
  "editInlineMessageReplyMarkup": {
    "fields": [
      {
        "type": "string",
        "name": "inline_message_id",
        "desc": "Inline message identifier."
      },
      {
        "type": "ReplyMarkup",
        "name": "reply_markup",
        "desc": "New message reply markup."
      }
    ],
    "extends": "TDFunction",
    "desc": "Edits the reply markup of an inline message sent via a bot; for bots only.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1edit_inline_message_reply_markup.html"
  },
  "editMessageCaption": {
    "fields": [
      {
        "type": "string",
        "name": "chat_id",
        "desc": "The chat the message belongs to."
      },
      {
        "type": "string",
        "name": "message_id",
        "desc": "Identifier of the message."
      },
      {
        "type": "ReplyMarkup",
        "name": "reply_markup",
        "desc": "The new message reply markup; for bots only."
      },
      {
        "type": "string",
        "name": "caption",
        "desc": "New message content caption; 0-200 characters."
      }
    ],
    "extends": "TDFunction",
    "desc": "Edits the message content caption. Non-bots can edit messages for a limited period of time. Returns the edited message after the edit is completed server-side.\nReturns object_ptr<Message>.",
    "returnType": "message",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1edit_message_caption.html"
  },
  "editInlineMessageText": {
    "fields": [
      {
        "type": "string",
        "name": "inline_message_id",
        "desc": "Inline message identifier."
      },
      {
        "type": "ReplyMarkup",
        "name": "reply_markup",
        "desc": "New message reply markup."
      },
      {
        "type": "InputMessageContent",
        "name": "input_message_content",
        "desc": "New text content of the message. Should be of type InputMessageText."
      }
    ],
    "extends": "TDFunction",
    "desc": "Edits the text of an inline text or game message sent via a bot; for bots only.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1edit_inline_message_text.html"
  },
  "editMessageLiveLocation": {
    "fields": [
      {
        "type": "string",
        "name": "chat_id",
        "desc": "The chat the message belongs to."
      },
      {
        "type": "string",
        "name": "message_id",
        "desc": "Identifier of the message."
      },
      {
        "type": "ReplyMarkup",
        "name": "reply_markup",
        "desc": "Tew message reply markup; for bots only."
      },
      {
        "type": "location",
        "name": "location",
        "desc": "New location content of the message; may be null. Pass null to stop sharing the live location."
      }
    ],
    "extends": "TDFunction",
    "desc": "Edits the message content of a live location. Messages can be edited for a limited period of time specified in the live location. Returns the edited message after the edit is completed server-side.\nReturns object_ptr<Message>.",
    "returnType": "message",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1edit_message_live_location.html"
  },
  "editMessageReplyMarkup": {
    "fields": [
      {
        "type": "string",
        "name": "chat_id",
        "desc": "The chat the message belongs to."
      },
      {
        "type": "string",
        "name": "message_id",
        "desc": "Identifier of the message."
      },
      {
        "type": "ReplyMarkup",
        "name": "reply_markup",
        "desc": "New message reply markup."
      }
    ],
    "extends": "TDFunction",
    "desc": "Edits the message reply markup; for bots only. Returns the edited message after the edit is completed server-side.\nReturns object_ptr<Message>.",
    "returnType": "message",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1edit_message_reply_markup.html"
  },
  "editMessageText": {
    "fields": [
      {
        "type": "string",
        "name": "chat_id",
        "desc": "The chat the message belongs to."
      },
      {
        "type": "string",
        "name": "message_id",
        "desc": "Identifier of the message."
      },
      {
        "type": "ReplyMarkup",
        "name": "reply_markup",
        "desc": "The new message reply markup; for bots only."
      },
      {
        "type": "InputMessageContent",
        "name": "input_message_content",
        "desc": "New text content of the message. Should be of type InputMessageText."
      }
    ],
    "extends": "TDFunction",
    "desc": "Edits the text of a message (or a text of a game message). Non-bot users can edit messages for a limited period of time. Returns the edited message after the edit is completed on the server side.\nReturns object_ptr<Message>.",
    "returnType": "message",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1edit_message_text.html"
  },
  "finishFileGeneration": {
    "fields": [
      {
        "type": "string",
        "name": "generation_id",
        "desc": "The identifier of the generation process."
      },
      {
        "type": "error",
        "name": "error",
        "desc": "If set, means that file generation has failed and should be terminated."
      }
    ],
    "extends": "TDFunction",
    "desc": "Finishes the file generation.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1finish_file_generation.html"
  },
  "forwardMessages": {
    "fields": [
      {
        "type": "string",
        "name": "chat_id",
        "desc": "Identifier of the chat to which to forward messages."
      },
      {
        "type": "string",
        "name": "from_chat_id",
        "desc": "Identifier of the chat from which to forward messages."
      },
      {
        "type": "string[]",
        "name": "message_ids",
        "desc": "Identifiers of the messages to forward."
      },
      {
        "type": "bool",
        "name": "disable_notification",
        "desc": "Pass true to disable notification for the message, doesn't work if messages are forwarded to a secret chat."
      },
      {
        "type": "bool",
        "name": "from_background",
        "desc": "Pass true if the message is sent from the background."
      },
      {
        "type": "bool",
        "name": "as_album",
        "desc": "True, if the messages should be grouped into an album after forwarding. For this to work, no more than 10 messages may be forwarded, and all of them must be photo or video messages."
      }
    ],
    "extends": "TDFunction",
    "desc": "Forwards previously sent messages. Returns the forwarded messages in the same order as the message identifiers passed in message_ids. If a message can't be forwarded, null will be returned instead of the message.\nReturns object_ptr<Messages>.",
    "returnType": "messages",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1forward_messages.html"
  },
  "generateChatInviteLink": {
    "fields": [
      {
        "type": "string",
        "name": "chat_id",
        "desc": "Chat identifier."
      }
    ],
    "extends": "TDFunction",
    "desc": "Generates a new invite link for a chat; the previously generated link is revoked. Available for basic groups, supergroups, and channels. In basic groups this can be called only by the group's creator; in supergroups and channels this requires appropriate administrator rights.\nReturns object_ptr<ChatInviteLink>.",
    "returnType": "chatInviteLink",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1generate_chat_invite_link.html"
  },
  "getAccountTtl": {
    "fields": [],
    "extends": "TDFunction",
    "desc": "Returns the period of inactivity after which the account of the current user will automatically be deleted.\nReturns object_ptr<AccountTtl>.",
    "returnType": "accountTtl",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_account_ttl.html"
  },
  "getActiveLiveLocationMessages": {
    "fields": [],
    "extends": "TDFunction",
    "desc": "Returns all active live locations that should be updated by the client. The list is persistent across application restarts only if the message database is used.\nReturns object_ptr<Messages>.",
    "returnType": "messages",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_active_live_location_messages.html"
  },
  "getActiveSessions": {
    "fields": [],
    "extends": "TDFunction",
    "desc": "Returns all active sessions of the current user.\nReturns object_ptr<Sessions>.",
    "returnType": "sessions",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_active_sessions.html"
  },
  "getArchivedStickerSets": {
    "fields": [
      {
        "type": "bool",
        "name": "is_masks",
        "desc": "Pass true to return mask stickers sets; pass false to return ordinary sticker sets."
      },
      {
        "type": "string",
        "name": "offset_sticker_set_id",
        "desc": "Identifier of the sticker set from which to return the result."
      },
      {
        "type": "number",
        "name": "limit",
        "desc": "Maximum number of sticker sets to return."
      }
    ],
    "extends": "TDFunction",
    "desc": "Returns a list of archived sticker sets.\nReturns object_ptr<StickerSets>.",
    "returnType": "stickerSets",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_archived_sticker_sets.html"
  },
  "getAttachedStickerSets": {
    "fields": [
      {
        "type": "number",
        "name": "file_id",
        "desc": "File identifier."
      }
    ],
    "extends": "TDFunction",
    "desc": "Returns a list of sticker sets attached to a file. Currently only photos and videos can have attached sticker sets.\nReturns object_ptr<StickerSets>.",
    "returnType": "stickerSets",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_attached_sticker_sets.html"
  },
  "getAuthorizationState": {
    "fields": [],
    "extends": "TDFunction",
    "desc": "Returns the current authorization state; this is an offline request. For informational purposes only. Use updateAuthorizationState instead to maintain the current authorization state.\nReturns object_ptr<AuthorizationState>.",
    "returnType": "AuthorizationState",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_authorization_state.html"
  },
  "getBasicGroup": {
    "fields": [
      {
        "type": "number",
        "name": "basic_group_id",
        "desc": "Basic group identifier."
      }
    ],
    "extends": "TDFunction",
    "desc": "Returns information about a basic group by its identifier. This is an offline request if the current user is not a bot.\nReturns object_ptr<BasicGroup>.",
    "returnType": "basicGroup",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_basic_group.html"
  },
  "getBasicGroupFullInfo": {
    "fields": [
      {
        "type": "number",
        "name": "basic_group_id",
        "desc": "Basic group identifier."
      }
    ],
    "extends": "TDFunction",
    "desc": "Returns full information about a basic group by its identifier.\nReturns object_ptr<BasicGroupFullInfo>.",
    "returnType": "basicGroupFullInfo",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_basic_group_full_info.html"
  },
  "getBlockedUsers": {
    "fields": [
      {
        "type": "number",
        "name": "offset",
        "desc": "Number of users to skip in the result; must be non-negative."
      },
      {
        "type": "number",
        "name": "limit",
        "desc": "Maximum number of users to return; up to 100."
      }
    ],
    "extends": "TDFunction",
    "desc": "Returns users that were blocked by the current user.\nReturns object_ptr<Users>.",
    "returnType": "users",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_blocked_users.html"
  },
  "getCallbackQueryAnswer": {
    "fields": [
      {
        "type": "string",
        "name": "chat_id",
        "desc": "Identifier of the chat with the message."
      },
      {
        "type": "string",
        "name": "message_id",
        "desc": "Identifier of the message from which the query originated."
      },
      {
        "type": "CallbackQueryPayload",
        "name": "payload",
        "desc": "Query payload."
      }
    ],
    "extends": "TDFunction",
    "desc": "Sends a callback query to a bot and returns an answer. Returns an error with code 502 if the bot fails to answer the query before the query timeout expires.\nReturns object_ptr<CallbackQueryAnswer>.",
    "returnType": "callbackQueryAnswer",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_callback_query_answer.html"
  },
  "getChat": {
    "fields": [
      {
        "type": "string",
        "name": "chat_id",
        "desc": "Chat identifier."
      }
    ],
    "extends": "TDFunction",
    "desc": "Returns information about a chat by its identifier, this is an offline request if the current user is not a bot.\nReturns object_ptr<Chat>.",
    "returnType": "chat",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_chat.html"
  },
  "getChatAdministrators": {
    "fields": [
      {
        "type": "string",
        "name": "chat_id",
        "desc": "Chat identifier."
      }
    ],
    "extends": "TDFunction",
    "desc": "Returns a list of users who are administrators of the chat.\nReturns object_ptr<Users>.",
    "returnType": "users",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_chat_administrators.html"
  },
  "getChatEventLog": {
    "fields": [
      {
        "type": "string",
        "name": "chat_id",
        "desc": "Chat identifier."
      },
      {
        "type": "string",
        "name": "query",
        "desc": "Search query by which to filter events."
      },
      {
        "type": "string",
        "name": "from_event_id",
        "desc": "Identifier of an event from which to return results. Use 0 to get results from the latest events."
      },
      {
        "type": "number",
        "name": "limit",
        "desc": "Maximum number of events to return; up to 100."
      },
      {
        "type": "chatEventLogFilters",
        "name": "filters",
        "desc": "The types of events to return. By default, all types will be returned."
      },
      {
        "type": "number[]",
        "name": "user_ids",
        "desc": "User identifiers by which to filter events. By default, events relating to all users will be returned."
      }
    ],
    "extends": "TDFunction",
    "desc": "Returns a list of service actions taken by chat members and administrators in the last 48 hours. Available only in supergroups and channels. Requires administrator rights. Returns results in reverse chronological order (i. e., in order of decreasing event_id).\nReturns object_ptr<ChatEvents>.",
    "returnType": "chatEvents",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_chat_event_log.html"
  },
  "getChatHistory": {
    "fields": [
      {
        "type": "string",
        "name": "chat_id",
        "desc": "Chat identifier."
      },
      {
        "type": "string",
        "name": "from_message_id",
        "desc": "Identifier of the message starting from which history must be fetched; use 0 to get results from the beginning (i.e., from oldest to newest)."
      },
      {
        "type": "number",
        "name": "offset",
        "desc": "Specify 0 to get results from exactly the from_message_id or a negative offset to get the specified message and some newer messages."
      },
      {
        "type": "number",
        "name": "limit",
        "desc": "The maximum number of messages to be returned; must be positive and can't be greater than 100. If the offset is negative, the limit must be greater than -offset. Fewer messages may be returned than specified by the limit, even if the end of the message history has not been reached."
      },
      {
        "type": "bool",
        "name": "only_local",
        "desc": "If true, returns only messages that are available locally without sending network requests."
      }
    ],
    "extends": "TDFunction",
    "desc": "Returns messages in a chat. The messages are returned in a reverse chronological order (i.e., in order of decreasing message_id). This is an offline request if only_local is true.\nReturns object_ptr<Messages>.",
    "returnType": "messages",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_chat_history.html"
  },
  "getChatMember": {
    "fields": [
      {
        "type": "string",
        "name": "chat_id",
        "desc": "Chat identifier."
      },
      {
        "type": "number",
        "name": "user_id",
        "desc": "User identifier."
      }
    ],
    "extends": "TDFunction",
    "desc": "Returns information about a single member of a chat.\nReturns object_ptr<ChatMember>.",
    "returnType": "chatMember",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_chat_member.html"
  },
  "getChatMessageByDate": {
    "fields": [
      {
        "type": "string",
        "name": "chat_id",
        "desc": "Chat identifier."
      },
      {
        "type": "number",
        "name": "date",
        "desc": "Point in time (Unix timestamp) relative to which to search for messages."
      }
    ],
    "extends": "TDFunction",
    "desc": "Returns the last message sent in a chat no later than the specified date.\nReturns object_ptr<Messages>.",
    "returnType": "messages",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_chat_message_by_date.html"
  },
  "getChatReportSpamState": {
    "fields": [
      {
        "type": "string",
        "name": "chat_id",
        "desc": "Chat identifier."
      }
    ],
    "extends": "TDFunction",
    "desc": "Returns information on whether the current chat can be reported as spam.\nReturns object_ptr<ChatReportSpamState>.",
    "returnType": "chatReportSpamState",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_chat_report_spam_state.html"
  },
  "getChats": {
    "fields": [
      {
        "type": "string",
        "name": "offset_order",
        "desc": "Chat order to return chats from."
      },
      {
        "type": "string",
        "name": "offset_chat_id",
        "desc": "Chat identifier to return chats from."
      },
      {
        "type": "number",
        "name": "limit",
        "desc": "The maximum number of chats to be returned. It is possible that fewer chats than the limit are returned even if the end of the list is not reached."
      }
    ],
    "extends": "TDFunction",
    "desc": "Returns an ordered list of chats. Chats are sorted by the pair (order, chat_id) in decreasing order. (For example, to get a list of chats from the beginning, the offset_order should be equal to 2^63 - 1.)\nReturns object_ptr<Chats>.",
    "returnType": "chats",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_chats.html"
  },
  "getCreatedPublicChats": {
    "fields": [],
    "extends": "TDFunction",
    "desc": "Returns a list of public chats created by the user.\nReturns object_ptr<Chats>.",
    "returnType": "chats",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_created_public_chats.html"
  },
  "getFavoriteStickers": {
    "fields": [],
    "extends": "TDFunction",
    "desc": "Returns favorite stickers.\nReturns object_ptr<Stickers>.",
    "returnType": "stickers",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_favorite_stickers.html"
  },
  "getFile": {
    "fields": [
      {
        "type": "number",
        "name": "file_id",
        "desc": "Identifier of the file to get."
      }
    ],
    "extends": "TDFunction",
    "desc": "Returns information about a file; this is an offline request.\nReturns object_ptr<File>.",
    "returnType": "file",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_file.html"
  },
  "getFileExtension": {
    "fields": [
      {
        "type": "string",
        "name": "mime_type",
        "desc": "The MIME type of the file."
      }
    ],
    "extends": "TDFunction",
    "desc": "Returns the extension of a file, guessed by its MIME type. Returns an empty string on failure. This is an offline method. May be called before authorization. Can be called synchronously.\nReturns object_ptr<Text>.",
    "returnType": "text",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_file_extension.html"
  },
  "getFileMimeType": {
    "fields": [
      {
        "type": "string",
        "name": "file_name",
        "desc": "The name of the file or path to the file."
      }
    ],
    "extends": "TDFunction",
    "desc": "Returns the MIME type of a file, guessed by its extension. Returns an empty string on failure. This is an offline method. May be called before authorization. Can be called synchronously.\nReturns object_ptr<Text>.",
    "returnType": "text",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_file_mime_type.html"
  },
  "getGameHighScores": {
    "fields": [
      {
        "type": "string",
        "name": "chat_id",
        "desc": "The chat that contains the message with the game."
      },
      {
        "type": "string",
        "name": "message_id",
        "desc": "Identifier of the message."
      },
      {
        "type": "number",
        "name": "user_id",
        "desc": "User identifier."
      }
    ],
    "extends": "TDFunction",
    "desc": "Returns the high scores for a game and some part of the high score table in the range of the specified user; for bots only.\nReturns object_ptr<GameHighScores>.",
    "returnType": "gameHighScores",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_game_high_scores.html"
  },
  "getGroupsInCommon": {
    "fields": [
      {
        "type": "number",
        "name": "user_id",
        "desc": "User identifier."
      },
      {
        "type": "string",
        "name": "offset_chat_id",
        "desc": "Chat identifier starting from which to return chats; use 0 for the first request."
      },
      {
        "type": "number",
        "name": "limit",
        "desc": "Maximum number of chats to be returned; up to 100."
      }
    ],
    "extends": "TDFunction",
    "desc": "Returns a list of common chats with a given user. Chats are sorted by their type and creation date.\nReturns object_ptr<Chats>.",
    "returnType": "chats",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_groups_in_common.html"
  },
  "getImportedContactCount": {
    "fields": [],
    "extends": "TDFunction",
    "desc": "Returns the total number of imported contacts.\nReturns object_ptr<Count>.",
    "returnType": "count",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_imported_contact_count.html"
  },
  "getInlineGameHighScores": {
    "fields": [
      {
        "type": "string",
        "name": "inline_message_id",
        "desc": "Inline message identifier."
      },
      {
        "type": "number",
        "name": "user_id",
        "desc": "User identifier."
      }
    ],
    "extends": "TDFunction",
    "desc": "Returns game high scores and some part of the high score table in the range of the specified user; for bots only.\nReturns object_ptr<GameHighScores>.",
    "returnType": "gameHighScores",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_inline_game_high_scores.html"
  },
  "getInlineQueryResults": {
    "fields": [
      {
        "type": "number",
        "name": "bot_user_id",
        "desc": "The identifier of the target bot."
      },
      {
        "type": "string",
        "name": "chat_id",
        "desc": "Identifier of the chat, where the query was sent."
      },
      {
        "type": "location",
        "name": "user_location",
        "desc": "Location of the user, only if needed."
      },
      {
        "type": "string",
        "name": "query",
        "desc": "Text of the query."
      },
      {
        "type": "string",
        "name": "offset",
        "desc": "Offset of the first entry to return."
      }
    ],
    "extends": "TDFunction",
    "desc": "Sends an inline query to a bot and returns its results. Returns an error with code 502 if the bot fails to answer the query before the query timeout expires.\nReturns object_ptr<InlineQueryResults>.",
    "returnType": "inlineQueryResults",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_inline_query_results.html"
  },
  "getInstalledStickerSets": {
    "fields": [
      {
        "type": "bool",
        "name": "is_masks",
        "desc": "Pass true to return mask sticker sets; pass false to return ordinary sticker sets."
      }
    ],
    "extends": "TDFunction",
    "desc": "Returns a list of installed sticker sets.\nReturns object_ptr<StickerSets>.",
    "returnType": "stickerSets",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_installed_sticker_sets.html"
  },
  "getInviteText": {
    "fields": [],
    "extends": "TDFunction",
    "desc": "Returns the default text for invitation messages to be used as a placeholder when the current user invites friends to Telegram.\nReturns object_ptr<Text>.",
    "returnType": "text",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_invite_text.html"
  },
  "getMe": {
    "fields": [],
    "extends": "TDFunction",
    "desc": "Returns the current user.\nReturns object_ptr<User>.",
    "returnType": "user",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_me.html"
  },
  "getMessages": {
    "fields": [
      {
        "type": "string",
        "name": "chat_id",
        "desc": "Identifier of the chat the messages belong to."
      },
      {
        "type": "string[]",
        "name": "message_ids",
        "desc": "Identifiers of the messages to get."
      }
    ],
    "extends": "TDFunction",
    "desc": "Returns information about messages. If a message is not found, returns null on the corresponding position of the result.\nReturns object_ptr<Messages>.",
    "returnType": "messages",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_messages.html"
  },
  "getNetworkStatistics": {
    "fields": [
      {
        "type": "bool",
        "name": "only_current",
        "desc": "If true, returns only data for the current library launch."
      }
    ],
    "extends": "TDFunction",
    "desc": "Returns network data usage statistics. Can be called before authorization.\nReturns object_ptr<NetworkStatistics>.",
    "returnType": "networkStatistics",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_network_statistics.html"
  },
  "getNotificationSettings": {
    "fields": [
      {
        "type": "NotificationSettingsScope",
        "name": "scope",
        "desc": "Scope for which to return the notification settings information."
      }
    ],
    "extends": "TDFunction",
    "desc": "Returns the notification settings for a given scope.\nReturns object_ptr<NotificationSettings>.",
    "returnType": "notificationSettings",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_notification_settings.html"
  },
  "getOption": {
    "fields": [
      {
        "type": "string",
        "name": "name",
        "desc": "The name of the option."
      }
    ],
    "extends": "TDFunction",
    "desc": "Returns the value of an option by its name. (Check the list of available options on https://core.telegram.org/tdlib/options.) This method can be called before authorization.\nReturns object_ptr<OptionValue>.",
    "returnType": "OptionValue",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_option.html"
  },
  "getPasswordState": {
    "fields": [],
    "extends": "TDFunction",
    "desc": "Returns the current state of 2-step verification.\nReturns object_ptr<PasswordState>.",
    "returnType": "passwordState",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_password_state.html"
  },
  "getProxy": {
    "fields": [],
    "extends": "TDFunction",
    "desc": "Returns the proxy that is currently set up. Can be called before authorization.\nReturns object_ptr<Proxy>.",
    "returnType": "Proxy",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_proxy.html"
  },
  "getPublicMessageLink": {
    "fields": [
      {
        "type": "string",
        "name": "chat_id",
        "desc": "Identifier of the chat to which the message belongs."
      },
      {
        "type": "string",
        "name": "message_id",
        "desc": "Identifier of the message."
      }
    ],
    "extends": "TDFunction",
    "desc": "Returns a public HTTPS link to a message. Available only for messages in public supergroups and channels.\nReturns object_ptr<PublicMessageLink>.",
    "returnType": "publicMessageLink",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_public_message_link.html"
  },
  "getRecentInlineBots": {
    "fields": [],
    "extends": "TDFunction",
    "desc": "Returns up to 20 recently used inline bots in the order of their last usage.\nReturns object_ptr<Users>.",
    "returnType": "users",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_recent_inline_bots.html"
  },
  "getRecentlyVisitedTMeUrls": {
    "fields": [
      {
        "type": "string",
        "name": "referrer",
        "desc": "Google Play referrer to identify the user."
      }
    ],
    "extends": "TDFunction",
    "desc": "Returns t.me URLs recently visited by a newly registered user.\nReturns object_ptr<TMeUrls>.",
    "returnType": "tMeUrls",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_recently_visited_t_me_urls.html"
  },
  "getRecentStickers": {
    "fields": [
      {
        "type": "bool",
        "name": "is_attached",
        "desc": "Pass true to return stickers and masks that were recently attached to photos or video files; pass false to return recently sent stickers."
      }
    ],
    "extends": "TDFunction",
    "desc": "Returns a list of recently used stickers.\nReturns object_ptr<Stickers>.",
    "returnType": "stickers",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_recent_stickers.html"
  },
  "getPaymentReceipt": {
    "fields": [
      {
        "type": "string",
        "name": "chat_id",
        "desc": "Chat identifier of the PaymentSuccessful message."
      },
      {
        "type": "string",
        "name": "message_id",
        "desc": "Message identifier."
      }
    ],
    "extends": "TDFunction",
    "desc": "Returns information about a successful payment.\nReturns object_ptr<PaymentReceipt>.",
    "returnType": "paymentReceipt",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_payment_receipt.html"
  },
  "getRecoveryEmailAddress": {
    "fields": [
      {
        "type": "string",
        "name": "password",
        "desc": "The password for the current user."
      }
    ],
    "extends": "TDFunction",
    "desc": "Returns a recovery email address that was previously set up. This method can be used to verify a password provided by the user.\nReturns object_ptr<RecoveryEmailAddress>.",
    "returnType": "recoveryEmailAddress",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_recovery_email_address.html"
  },
  "getRemoteFile": {
    "fields": [
      {
        "type": "string",
        "name": "remote_file_id",
        "desc": "Remote identifier of the file to get."
      },
      {
        "type": "FileType",
        "name": "file_type",
        "desc": "File type, if known."
      }
    ],
    "extends": "TDFunction",
    "desc": "Returns information about a file by its remote ID; this is an offline request. Can be used to register a URL as a file for further uploading, or sending as a message.\nReturns object_ptr<File>.",
    "returnType": "file",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_remote_file.html"
  },
  "getSavedAnimations": {
    "fields": [],
    "extends": "TDFunction",
    "desc": "Returns saved animations.\nReturns object_ptr<Animations>.",
    "returnType": "animations",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_saved_animations.html"
  },
  "getSavedOrderInfo": {
    "fields": [],
    "extends": "TDFunction",
    "desc": "Returns saved order info, if any.\nReturns object_ptr<OrderInfo>.",
    "returnType": "orderInfo",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_saved_order_info.html"
  },
  "getSecretChat": {
    "fields": [
      {
        "type": "number",
        "name": "secret_chat_id",
        "desc": "Secret chat identifier."
      }
    ],
    "extends": "TDFunction",
    "desc": "Returns information about a secret chat by its identifier. This is an offline request.\nReturns object_ptr<SecretChat>.",
    "returnType": "secretChat",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_secret_chat.html"
  },
  "getStickerEmojis": {
    "fields": [
      {
        "type": "InputFile",
        "name": "sticker",
        "desc": "Sticker file identifier."
      }
    ],
    "extends": "TDFunction",
    "desc": "Returns emoji corresponding to a sticker.\nReturns object_ptr<StickerEmojis>.",
    "returnType": "stickerEmojis",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_sticker_emojis.html"
  },
  "getStickers": {
    "fields": [
      {
        "type": "string",
        "name": "emoji",
        "desc": "String representation of emoji. If empty, returns all known stickers."
      },
      {
        "type": "number",
        "name": "limit",
        "desc": "Maximum number of stickers to be returned."
      }
    ],
    "extends": "TDFunction",
    "desc": "Returns stickers from the installed sticker sets that correspond to a given emoji. If the emoji is not empty, favorite and recently used stickers may also be returned.\nReturns object_ptr<Stickers>.",
    "returnType": "stickers",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_stickers.html"
  },
  "getStickerSet": {
    "fields": [
      {
        "type": "string",
        "name": "set_id",
        "desc": "Identifier of the sticker set."
      }
    ],
    "extends": "TDFunction",
    "desc": "Returns information about a sticker set by its identifier.\nReturns object_ptr<StickerSet>.",
    "returnType": "stickerSet",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_sticker_set.html"
  },
  "getStorageStatistics": {
    "fields": [
      {
        "type": "number",
        "name": "chat_limit",
        "desc": "Maximum number of chats with the largest storage usage for which separate statistics should be returned. All other chats will be grouped in entries with chat_id == 0. If the chat info database is not used, the chat_limit is ignored and is always set to 0."
      }
    ],
    "extends": "TDFunction",
    "desc": "Returns storage usage statistics.\nReturns object_ptr<StorageStatistics>.",
    "returnType": "storageStatistics",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_storage_statistics.html"
  },
  "getStorageStatisticsFast": {
    "fields": [],
    "extends": "TDFunction",
    "desc": "Quickly returns approximate storage usage statistics.\nReturns object_ptr<StorageStatisticsFast>.",
    "returnType": "storageStatisticsFast",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_storage_statistics_fast.html"
  },
  "getSupergroup": {
    "fields": [
      {
        "type": "number",
        "name": "supergroup_id",
        "desc": "Supergroup or channel identifier."
      }
    ],
    "extends": "TDFunction",
    "desc": "Returns information about a supergroup or channel by its identifier. This is an offline request if the current user is not a bot.\nReturns object_ptr<Supergroup>.",
    "returnType": "supergroup",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_supergroup.html"
  },
  "getMessage": {
    "fields": [
      {
        "type": "string",
        "name": "chat_id",
        "desc": "Identifier of the chat the message belongs to."
      },
      {
        "type": "string",
        "name": "message_id",
        "desc": "Identifier of the message to get."
      }
    ],
    "extends": "TDFunction",
    "desc": "Returns information about a message.\nReturns object_ptr<Message>.",
    "returnType": "message",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_message.html"
  },
  "getPaymentForm": {
    "fields": [
      {
        "type": "string",
        "name": "chat_id",
        "desc": "Chat identifier of the Invoice message."
      },
      {
        "type": "string",
        "name": "message_id",
        "desc": "Message identifier."
      }
    ],
    "extends": "TDFunction",
    "desc": "Returns an invoice payment form. This method should be called when the user presses inlineKeyboardButtonBuy.\nReturns object_ptr<PaymentForm>.",
    "returnType": "paymentForm",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_payment_form.html"
  },
  "getSupergroupMembers": {
    "fields": [
      {
        "type": "number",
        "name": "supergroup_id",
        "desc": "Identifier of the supergroup or channel."
      },
      {
        "type": "SupergroupMembersFilter",
        "name": "filter",
        "desc": "The type of users to return. By default, supergroupMembersRecent."
      },
      {
        "type": "number",
        "name": "offset",
        "desc": "Number of users to skip."
      },
      {
        "type": "number",
        "name": "limit",
        "desc": "The maximum number of users be returned; up to 200."
      }
    ],
    "extends": "TDFunction",
    "desc": "Returns information about members or banned users in a supergroup or channel. Can be used only if SupergroupFullInfo.can_get_members == true; additionally, administrator privileges may be required for some filters.\nReturns object_ptr<ChatMembers>.",
    "returnType": "chatMembers",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_supergroup_members.html"
  },
  "getTermsOfService": {
    "fields": [],
    "extends": "TDFunction",
    "desc": "Returns the terms of service. Can be called before authorization.\nReturns object_ptr<Text>.",
    "returnType": "text",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_terms_of_service.html"
  },
  "getTemporaryPasswordState": {
    "fields": [],
    "extends": "TDFunction",
    "desc": "Returns information about the current temporary password.\nReturns object_ptr<TemporaryPasswordState>.",
    "returnType": "temporaryPasswordState",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_temporary_password_state.html"
  },
  "getTextEntities": {
    "fields": [
      {
        "type": "string",
        "name": "text",
        "desc": "The text in which to look for entites."
      }
    ],
    "extends": "TDFunction",
    "desc": "Returns all entities (mentions, hashtags, bot commands, URLs, and email addresses) contained in the text. This is an offline method. May be called before authorization. Can be called synchronously.\nReturns object_ptr<TextEntities>.",
    "returnType": "textEntities",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_text_entities.html"
  },
  "getTopChats": {
    "fields": [
      {
        "type": "TopChatCategory",
        "name": "category",
        "desc": "Category of chats to be returned."
      },
      {
        "type": "number",
        "name": "limit",
        "desc": "Maximum number of chats to be returned; up to 30."
      }
    ],
    "extends": "TDFunction",
    "desc": "Returns a list of frequently used chats. Supported only if the chat info database is enabled.\nReturns object_ptr<Chats>.",
    "returnType": "chats",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_top_chats.html"
  },
  "getTrendingStickerSets": {
    "fields": [],
    "extends": "TDFunction",
    "desc": "Returns a list of trending sticker sets.\nReturns object_ptr<StickerSets>.",
    "returnType": "stickerSets",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_trending_sticker_sets.html"
  },
  "getUser": {
    "fields": [
      {
        "type": "number",
        "name": "user_id",
        "desc": "User identifier."
      }
    ],
    "extends": "TDFunction",
    "desc": "Returns information about a user by their identifier. This is an offline request if the current user is not a bot.\nReturns object_ptr<User>.",
    "returnType": "user",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_user.html"
  },
  "getUserFullInfo": {
    "fields": [
      {
        "type": "number",
        "name": "user_id",
        "desc": "User identifier."
      }
    ],
    "extends": "TDFunction",
    "desc": "Returns full information about a user by their identifier.\nReturns object_ptr<UserFullInfo>.",
    "returnType": "userFullInfo",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_user_full_info.html"
  },
  "getUserPrivacySettingRules": {
    "fields": [
      {
        "type": "UserPrivacySetting",
        "name": "setting",
        "desc": "The privacy setting."
      }
    ],
    "extends": "TDFunction",
    "desc": "Returns the current privacy settings.\nReturns object_ptr<UserPrivacySettingRules>.",
    "returnType": "userPrivacySettingRules",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_user_privacy_setting_rules.html"
  },
  "getUserProfilePhotos": {
    "fields": [
      {
        "type": "number",
        "name": "user_id",
        "desc": "User identifier."
      },
      {
        "type": "number",
        "name": "offset",
        "desc": "The number of photos to skip; must be non-negative."
      },
      {
        "type": "number",
        "name": "limit",
        "desc": "Maximum number of photos to be returned; up to 100."
      }
    ],
    "extends": "TDFunction",
    "desc": "Returns the profile photos of a user. The result of this query may be outdated: some photos might have been deleted already.\nReturns object_ptr<UserProfilePhotos>.",
    "returnType": "userProfilePhotos",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_user_profile_photos.html"
  },
  "getSupergroupFullInfo": {
    "fields": [
      {
        "type": "number",
        "name": "supergroup_id",
        "desc": "Supergroup or channel identifier."
      }
    ],
    "extends": "TDFunction",
    "desc": "Returns full information about a supergroup or channel by its identifier, cached for up to 1 minute.\nReturns object_ptr<SupergroupFullInfo>.",
    "returnType": "supergroupFullInfo",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_supergroup_full_info.html"
  },
  "getWallpapers": {
    "fields": [],
    "extends": "TDFunction",
    "desc": "Returns background wallpapers.\nReturns object_ptr<Wallpapers>.",
    "returnType": "wallpapers",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_wallpapers.html"
  },
  "getWebPageInstantView": {
    "fields": [
      {
        "type": "string",
        "name": "url",
        "desc": "The web page URL."
      },
      {
        "type": "bool",
        "name": "force_full",
        "desc": "If true, the full instant view for the web page will be returned."
      }
    ],
    "extends": "TDFunction",
    "desc": "Returns an instant view version of a web page if available. Returns a 404 error if the web page has no instant view page.\nReturns object_ptr<WebPageInstantView>.",
    "returnType": "webPageInstantView",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_web_page_instant_view.html"
  },
  "getWebPagePreview": {
    "fields": [
      {
        "type": "string",
        "name": "message_text",
        "desc": "Message text."
      }
    ],
    "extends": "TDFunction",
    "desc": "Returns a web page preview by the text of the message. Do not call this function too often. Returns a 404 error if the web page has no preview.\nReturns object_ptr<WebPage>.",
    "returnType": "webPage",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_web_page_preview.html"
  },
  "joinChatByInviteLink": {
    "fields": [
      {
        "type": "string",
        "name": "invite_link",
        "desc": "Invite link to import; should begin with \"<a href=\"https://t.me/joinchat/\",\">https://t.me/joinchat/&quot;,</a> \"<a href=\"https://telegram.me/joinchat/\",\">https://telegram.me/joinchat/&quot;,</a> or \"<a href=\"https://telegram.dog/joinchat/\"\">https://telegram.dog/joinchat/&quot;</a>."
      }
    ],
    "extends": "TDFunction",
    "desc": "Uses an invite link to add the current user to the chat if possible. The new member will not be added until the chat state has been synchronized with the server.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1join_chat_by_invite_link.html"
  },
  "getSupportUser": {
    "fields": [],
    "extends": "TDFunction",
    "desc": "Returns a user that can be contacted to get support.\nReturns object_ptr<User>.",
    "returnType": "user",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_support_user.html"
  },
  "logOut": {
    "fields": [],
    "extends": "TDFunction",
    "desc": "Closes the TDLib instance after a proper logout. Requires an available network connection. All local data will be destroyed. After the logout completes, updateAuthorizationState with authorizationStateClosed will be sent.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1log_out.html"
  },
  "openChat": {
    "fields": [
      {
        "type": "string",
        "name": "chat_id",
        "desc": "Chat identifier."
      }
    ],
    "extends": "TDFunction",
    "desc": "This method should be called if the chat is opened by the user. Many useful activities depend on the chat being opened or closed (e.g., in supergroups and channels all updates are received only for opened chats).\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1open_chat.html"
  },
  "openMessageContent": {
    "fields": [
      {
        "type": "string",
        "name": "chat_id",
        "desc": "Chat identifier of the message."
      },
      {
        "type": "string",
        "name": "message_id",
        "desc": "Identifier of the message with the opened content."
      }
    ],
    "extends": "TDFunction",
    "desc": "This method should be called if the message content has been opened (e.g., the user has opened a photo, video, document, location or venue, or has listened to an audio file or voice note message). An updateMessageContentOpened update will be generated if something has changed.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1open_message_content.html"
  },
  "optimizeStorage": {
    "fields": [
      {
        "type": "string",
        "name": "size",
        "desc": "Limit on the total size of files after deletion. Pass -1 to use the default limit."
      },
      {
        "type": "number",
        "name": "ttl",
        "desc": "Limit on the time that has passed since the last time a file was accessed (or creation time for some filesystems). Pass -1 to use the default limit."
      },
      {
        "type": "number",
        "name": "count",
        "desc": "Limit on the total count of files after deletion. Pass -1 to use the default limit."
      },
      {
        "type": "number",
        "name": "immunity_delay",
        "desc": "The amount of time after the creation of a file during which it can't be deleted, in seconds. Pass -1 to use the default value."
      },
      {
        "type": "FileType[]",
        "name": "file_types",
        "desc": "If not empty, only files with the given type(s) are considered. By default, all types except thumbnails, profile photos, stickers and wallpapers are deleted."
      },
      {
        "type": "string[]",
        "name": "chat_ids",
        "desc": "If not empty, only files from the given chats are considered. Use 0 as chat identifier to delete files not belonging to any chat (e.g., profile photos)."
      },
      {
        "type": "string[]",
        "name": "exclude_chat_ids",
        "desc": "If not empty, files from the given chats are excluded. Use 0 as chat identifier to exclude all files not belonging to any chat (e.g., profile photos)."
      },
      {
        "type": "number",
        "name": "chat_limit",
        "desc": "Same as in <a class=\"el\" href=\"classtd_1_1td__api_1_1get_storage_statistics.html\">getStorageStatistics</a>. Affects only returned statistics."
      }
    ],
    "extends": "TDFunction",
    "desc": "Optimizes storage usage, i.e. deletes some files and returns new storage usage statistics. Secret thumbnails can't be deleted.\nReturns object_ptr<StorageStatistics>.",
    "returnType": "storageStatistics",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1optimize_storage.html"
  },
  "processDcUpdate": {
    "fields": [
      {
        "type": "string",
        "name": "dc",
        "desc": "Value of the \"dc\" parameter of the notification."
      },
      {
        "type": "string",
        "name": "addr",
        "desc": "Value of the \"addr\" parameter of the notification."
      }
    ],
    "extends": "TDFunction",
    "desc": "Handles a DC_UPDATE push service notification, can be called before authorization.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1process_dc_update.html"
  },
  "pinSupergroupMessage": {
    "fields": [
      {
        "type": "number",
        "name": "supergroup_id",
        "desc": "Identifier of the supergroup or channel."
      },
      {
        "type": "string",
        "name": "message_id",
        "desc": "Identifier of the new pinned message."
      },
      {
        "type": "bool",
        "name": "disable_notification",
        "desc": "True, if there should be no notification about the pinned message."
      }
    ],
    "extends": "TDFunction",
    "desc": "Pins a message in a supergroup or channel; requires appropriate administrator rights in the supergroup or channel.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1pin_supergroup_message.html"
  },
  "readAllChatMentions": {
    "fields": [
      {
        "type": "string",
        "name": "chat_id",
        "desc": "Chat identifier."
      }
    ],
    "extends": "TDFunction",
    "desc": "Marks all mentions in a chat as read.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1read_all_chat_mentions.html"
  },
  "recoverAuthenticationPassword": {
    "fields": [
      {
        "type": "string",
        "name": "recovery_code",
        "desc": "Recovery code to check."
      }
    ],
    "extends": "TDFunction",
    "desc": "Recovers the password with a password recovery code sent to an email address that was previously set up. Works only when the current authorization state is authorizationStateWaitPassword.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1recover_authentication_password.html"
  },
  "recoverPassword": {
    "fields": [
      {
        "type": "string",
        "name": "recovery_code",
        "desc": "Recovery code to check."
      }
    ],
    "extends": "TDFunction",
    "desc": "Recovers the password using a recovery code sent to an email address that was previously set up.\nReturns object_ptr<PasswordState>.",
    "returnType": "passwordState",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1recover_password.html"
  },
  "registerDevice": {
    "fields": [
      {
        "type": "DeviceToken",
        "name": "device_token",
        "desc": "Device token."
      }
    ],
    "extends": "TDFunction",
    "desc": "Registers the currently used device for receiving push notifications.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1register_device.html"
  },
  "removeContacts": {
    "fields": [
      {
        "type": "number[]",
        "name": "user_ids",
        "desc": "Identifiers of users to be deleted."
      }
    ],
    "extends": "TDFunction",
    "desc": "Removes users from the contacts list.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1remove_contacts.html"
  },
  "removeFavoriteSticker": {
    "fields": [
      {
        "type": "InputFile",
        "name": "sticker",
        "desc": "Sticker file to delete from the list."
      }
    ],
    "extends": "TDFunction",
    "desc": "Removes a sticker from the list of favorite stickers.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1remove_favorite_sticker.html"
  },
  "removeRecentHashtag": {
    "fields": [
      {
        "type": "string",
        "name": "hashtag",
        "desc": "Hashtag to delete."
      }
    ],
    "extends": "TDFunction",
    "desc": "Removes a hashtag from the list of recently used hashtags.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1remove_recent_hashtag.html"
  },
  "removeRecentlyFoundChat": {
    "fields": [
      {
        "type": "string",
        "name": "chat_id",
        "desc": "Identifier of the chat to be removed."
      }
    ],
    "extends": "TDFunction",
    "desc": "Removes a chat from the list of recently found chats.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1remove_recently_found_chat.html"
  },
  "importContacts": {
    "fields": [
      {
        "type": "contact[]",
        "name": "contacts",
        "desc": "The list of contacts to import or edit."
      }
    ],
    "extends": "TDFunction",
    "desc": "Adds new contacts or edits existing contacts; contacts' user identifiers are ignored.\nReturns object_ptr<ImportedContacts>.",
    "returnType": "importedContacts",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1import_contacts.html"
  },
  "removeSavedAnimation": {
    "fields": [
      {
        "type": "InputFile",
        "name": "animation",
        "desc": "Animation file to be removed."
      }
    ],
    "extends": "TDFunction",
    "desc": "Removes an animation from the list of saved animations.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1remove_saved_animation.html"
  },
  "removeStickerFromSet": {
    "fields": [
      {
        "type": "InputFile",
        "name": "sticker",
        "desc": "Sticker."
      }
    ],
    "extends": "TDFunction",
    "desc": "Removes a sticker from the set to which it belongs; for bots only. The sticker set must have been created by the bot.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1remove_sticker_from_set.html"
  },
  "reorderInstalledStickerSets": {
    "fields": [
      {
        "type": "bool",
        "name": "is_masks",
        "desc": "Pass true to change the order of mask sticker sets; pass false to change the order of ordinary sticker sets."
      },
      {
        "type": "string[]",
        "name": "sticker_set_ids",
        "desc": "Identifiers of installed sticker sets in the new correct order."
      }
    ],
    "extends": "TDFunction",
    "desc": "Changes the order of installed sticker sets.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1reorder_installed_sticker_sets.html"
  },
  "reportChat": {
    "fields": [
      {
        "type": "string",
        "name": "chat_id",
        "desc": "Chat identifier."
      },
      {
        "type": "ChatReportReason",
        "name": "reason",
        "desc": "The reason for reporting the chat."
      }
    ],
    "extends": "TDFunction",
    "desc": "Reports a chat to the Telegram moderators. Supported only for supergroups, channels, or private chats with bots, since other chats can't be checked by moderators.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1report_chat.html"
  },
  "reportSupergroupSpam": {
    "fields": [
      {
        "type": "number",
        "name": "supergroup_id",
        "desc": "Supergroup identifier."
      },
      {
        "type": "number",
        "name": "user_id",
        "desc": "User identifier."
      },
      {
        "type": "string[]",
        "name": "message_ids",
        "desc": "Identifiers of messages sent in the supergroup by the user. This list should be non-empty."
      }
    ],
    "extends": "TDFunction",
    "desc": "Reports some messages from a user in a supergroup as spam.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1report_supergroup_spam.html"
  },
  "removeRecentSticker": {
    "fields": [
      {
        "type": "bool",
        "name": "is_attached",
        "desc": "Pass true to remove the sticker from the list of stickers recently attached to photo or video files; pass false to remove the sticker from the list of recently sent stickers."
      },
      {
        "type": "InputFile",
        "name": "sticker",
        "desc": "Sticker file to delete."
      }
    ],
    "extends": "TDFunction",
    "desc": "Removes a sticker from the list of recently used stickers.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1remove_recent_sticker.html"
  },
  "removeTopChat": {
    "fields": [
      {
        "type": "TopChatCategory",
        "name": "category",
        "desc": "Category of frequently used chats."
      },
      {
        "type": "string",
        "name": "chat_id",
        "desc": "Chat identifier."
      }
    ],
    "extends": "TDFunction",
    "desc": "Removes a chat from the list of frequently used chats. Supported only if the chat info database is enabled.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1remove_top_chat.html"
  },
  "requestAuthenticationPasswordRecovery": {
    "fields": [],
    "extends": "TDFunction",
    "desc": "Requests to send a password recovery code to an email address that was previously set up. Works only when the current authorization state is authorizationStateWaitPassword.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1request_authentication_password_recovery.html"
  },
  "requestPasswordRecovery": {
    "fields": [],
    "extends": "TDFunction",
    "desc": "Requests to send a password recovery code to an email address that was previously set up.\nReturns object_ptr<PasswordRecoveryInfo>.",
    "returnType": "passwordRecoveryInfo",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1request_password_recovery.html"
  },
  "resendAuthenticationCode": {
    "fields": [],
    "extends": "TDFunction",
    "desc": "Re-sends an authentication code to the user. Works only when the current authorization state is authorizationStateWaitCode and the next_code_type of the result is not null.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1resend_authentication_code.html"
  },
  "resendChangePhoneNumberCode": {
    "fields": [],
    "extends": "TDFunction",
    "desc": "Re-sends the authentication code sent to confirm a new phone number for the user. Works only if the previously received authenticationCodeInfo next_code_type was not null.\nReturns object_ptr<AuthenticationCodeInfo>.",
    "returnType": "authenticationCodeInfo",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1resend_change_phone_number_code.html"
  },
  "resetAllNotificationSettings": {
    "fields": [],
    "extends": "TDFunction",
    "desc": "Resets all notification settings to their default values. By default, the only muted chats are supergroups, the sound is set to \"default\" and message previews are shown.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1reset_all_notification_settings.html"
  },
  "resetNetworkStatistics": {
    "fields": [],
    "extends": "TDFunction",
    "desc": "Resets all network data usage statistics to zero. Can be called before authorization.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1reset_network_statistics.html"
  },
  "searchCallMessages": {
    "fields": [
      {
        "type": "string",
        "name": "from_message_id",
        "desc": "Identifier of the message from which to search; use 0 to get results from the beginning."
      },
      {
        "type": "number",
        "name": "limit",
        "desc": "The maximum number of messages to be returned; up to 100. Fewer messages may be returned than specified by the limit, even if the end of the message history has not been reached."
      },
      {
        "type": "bool",
        "name": "only_missed",
        "desc": "If true, returns only messages with missed calls."
      }
    ],
    "extends": "TDFunction",
    "desc": "Searches for call messages. Returns the results in reverse chronological order (i. e., in order of decreasing message_id).\nReturns object_ptr<Messages>.",
    "returnType": "messages",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1search_call_messages.html"
  },
  "searchChatMembers": {
    "fields": [
      {
        "type": "string",
        "name": "chat_id",
        "desc": "Chat identifier."
      },
      {
        "type": "string",
        "name": "query",
        "desc": "Query to search for."
      },
      {
        "type": "number",
        "name": "limit",
        "desc": "The maximum number of users to be returned."
      }
    ],
    "extends": "TDFunction",
    "desc": "Searches for a specified query in the first name, last name and username of the members of a specified chat. Requires administrator rights in channels.\nReturns object_ptr<ChatMembers>.",
    "returnType": "chatMembers",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1search_chat_members.html"
  },
  "searchChatMessages": {
    "fields": [
      {
        "type": "string",
        "name": "chat_id",
        "desc": "Identifier of the chat in which to search messages."
      },
      {
        "type": "string",
        "name": "query",
        "desc": "Query to search for."
      },
      {
        "type": "number",
        "name": "sender_user_id",
        "desc": "If not 0, only messages sent by the specified user will be returned. Not supported in secret chats."
      },
      {
        "type": "string",
        "name": "from_message_id",
        "desc": "Identifier of the message starting from which history must be fetched; use 0 to get results from the beginning."
      },
      {
        "type": "number",
        "name": "offset",
        "desc": "Specify 0 to get results from exactly the from_message_id or a negative offset to get the specified message and some newer messages."
      },
      {
        "type": "number",
        "name": "limit",
        "desc": "The maximum number of messages to be returned; must be positive and can't be greater than 100. If the offset is negative, the limit must be greater than -offset. Fewer messages may be returned than specified by the limit, even if the end of the message history has not been reached."
      },
      {
        "type": "SearchMessagesFilter",
        "name": "filter",
        "desc": "Filter for message content in the search results."
      }
    ],
    "extends": "TDFunction",
    "desc": "Searches for messages with given words in the chat. Returns the results in reverse chronological order, i.e. in order of decreasing message_id. Cannot be used in secret chats with a non-empty query (searchSecretMessages should be used instead), or without an enabled message database.\nReturns object_ptr<Messages>.",
    "returnType": "messages",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1search_chat_messages.html"
  },
  "searchChatRecentLocationMessages": {
    "fields": [
      {
        "type": "string",
        "name": "chat_id",
        "desc": "Chat identifier."
      },
      {
        "type": "number",
        "name": "limit",
        "desc": "Maximum number of messages to be returned."
      }
    ],
    "extends": "TDFunction",
    "desc": "Returns information about the recent locations of chat members that were sent to the chat. Returns up to 1 location message per user.\nReturns object_ptr<Messages>.",
    "returnType": "messages",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1search_chat_recent_location_messages.html"
  },
  "searchChats": {
    "fields": [
      {
        "type": "string",
        "name": "query",
        "desc": "Query to search for. If the query is empty, returns up to 20 recently found chats."
      },
      {
        "type": "number",
        "name": "limit",
        "desc": "Maximum number of chats to be returned."
      }
    ],
    "extends": "TDFunction",
    "desc": "Searches for the specified query in the title and username of already known chats, this is an offline request. Returns chats in the order seen in the chat list.\nReturns object_ptr<Chats>.",
    "returnType": "chats",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1search_chats.html"
  },
  "searchContacts": {
    "fields": [
      {
        "type": "string",
        "name": "query",
        "desc": "Query to search for; can be empty to return all contacts."
      },
      {
        "type": "number",
        "name": "limit",
        "desc": "Maximum number of users to be returned."
      }
    ],
    "extends": "TDFunction",
    "desc": "Searches for the specified query in the first names, last names and usernames of the known user contacts.\nReturns object_ptr<Users>.",
    "returnType": "users",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1search_contacts.html"
  },
  "searchHashtags": {
    "fields": [
      {
        "type": "string",
        "name": "prefix",
        "desc": "Hashtag prefix to search for."
      },
      {
        "type": "number",
        "name": "limit",
        "desc": "Maximum number of hashtags to be returned."
      }
    ],
    "extends": "TDFunction",
    "desc": "Searches for recently used hashtags by their prefix.\nReturns object_ptr<Hashtags>.",
    "returnType": "hashtags",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1search_hashtags.html"
  },
  "searchMessages": {
    "fields": [
      {
        "type": "string",
        "name": "query",
        "desc": "Query to search for."
      },
      {
        "type": "number",
        "name": "offset_date",
        "desc": "The date of the message starting from which the results should be fetched. Use 0 or any date in the future to get results from the beginning."
      },
      {
        "type": "string",
        "name": "offset_chat_id",
        "desc": "The chat identifier of the last found message, or 0 for the first request."
      },
      {
        "type": "string",
        "name": "offset_message_id",
        "desc": "The message identifier of the last found message, or 0 for the first request."
      },
      {
        "type": "number",
        "name": "limit",
        "desc": "The maximum number of messages to be returned, up to 100."
      }
    ],
    "extends": "TDFunction",
    "desc": "Searches for messages in all chats except secret chats. Returns the results in reverse chronological order (i.e., in order of decreasing (date, chat_id, message_id)).\nReturns object_ptr<Messages>.",
    "returnType": "messages",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1search_messages.html"
  },
  "searchPublicChat": {
    "fields": [
      {
        "type": "string",
        "name": "username",
        "desc": "Username to be resolved."
      }
    ],
    "extends": "TDFunction",
    "desc": "Searches a public chat by its username. Currently only private chats, supergroups and channels can be public. Returns the chat if found; otherwise an error is returned.\nReturns object_ptr<Chat>.",
    "returnType": "chat",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1search_public_chat.html"
  },
  "searchPublicChats": {
    "fields": [
      {
        "type": "string",
        "name": "query",
        "desc": "Query to search for."
      }
    ],
    "extends": "TDFunction",
    "desc": "Searches public chats by a prefix of their username. Currently only private chats, supergroups and channels can be public. Returns a meaningful number of results. Returns nothing if the length of the searched username prefix is less than 5. Excludes private chats with contacts from the results.\nReturns object_ptr<Chats>.",
    "returnType": "chats",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1search_public_chats.html"
  },
  "searchSecretMessages": {
    "fields": [
      {
        "type": "string",
        "name": "chat_id",
        "desc": "Identifier of the chat in which to search. Specify 0 to search in all secret chats."
      },
      {
        "type": "string",
        "name": "query",
        "desc": "Query to search for. If empty, <a class=\"el\" href=\"classtd_1_1td__api_1_1search_chat_messages.html\">searchChatMessages</a> should be used instead."
      },
      {
        "type": "string",
        "name": "from_search_id",
        "desc": "The identifier from the result of a previous request, use 0 to get results from the beginning."
      },
      {
        "type": "number",
        "name": "limit",
        "desc": "Maximum number of messages to be returned; up to 100."
      },
      {
        "type": "SearchMessagesFilter",
        "name": "filter",
        "desc": "A filter for the content of messages in the search results."
      }
    ],
    "extends": "TDFunction",
    "desc": "Searches for messages in secret chats. Returns the results in reverse chronological order.\nReturns object_ptr<FoundMessages>.",
    "returnType": "foundMessages",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1search_secret_messages.html"
  },
  "sendBotStartMessage": {
    "fields": [
      {
        "type": "number",
        "name": "bot_user_id",
        "desc": "Identifier of the bot."
      },
      {
        "type": "string",
        "name": "chat_id",
        "desc": "Identifier of the target chat."
      },
      {
        "type": "string",
        "name": "parameter",
        "desc": "A hidden parameter sent to the bot for deep linking purposes (<a href=\"https://api.telegram.org/bots\">https://api.telegram.org/bots</a>#deep-linking)."
      }
    ],
    "extends": "TDFunction",
    "desc": "Invites a bot to a chat (if it is not yet a member) and sends it the /start command. Bots can't be invited to a private chat other than the chat with the bot. Bots can't be invited to channels (although they can be added as admins) and secret chats. Returns the sent message.\nReturns object_ptr<Message>.",
    "returnType": "message",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1send_bot_start_message.html"
  },
  "searchStickerSet": {
    "fields": [
      {
        "type": "string",
        "name": "name",
        "desc": "Name of the sticker set."
      }
    ],
    "extends": "TDFunction",
    "desc": "Searches for a sticker set by its short name.\nReturns object_ptr<StickerSet>.",
    "returnType": "stickerSet",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1search_sticker_set.html"
  },
  "sendCallDebugInformation": {
    "fields": [
      {
        "type": "number",
        "name": "call_id",
        "desc": "Call identifier."
      },
      {
        "type": "string",
        "name": "debug_information",
        "desc": "Debug information in application-specific format."
      }
    ],
    "extends": "TDFunction",
    "desc": "Sends debug information for a call.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1send_call_debug_information.html"
  },
  "sendCallRating": {
    "fields": [
      {
        "type": "number",
        "name": "call_id",
        "desc": "Call identifier."
      },
      {
        "type": "number",
        "name": "rating",
        "desc": "Call rating; 1-5."
      },
      {
        "type": "string",
        "name": "comment",
        "desc": "An optional user comment if the rating is less than 5."
      }
    ],
    "extends": "TDFunction",
    "desc": "Sends a call rating.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1send_call_rating.html"
  },
  "sendChatAction": {
    "fields": [
      {
        "type": "string",
        "name": "chat_id",
        "desc": "Chat identifier."
      },
      {
        "type": "ChatAction",
        "name": "action",
        "desc": "The action description."
      }
    ],
    "extends": "TDFunction",
    "desc": "Sends a notification about user activity in a chat.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1send_chat_action.html"
  },
  "sendChatScreenshotTakenNotification": {
    "fields": [
      {
        "type": "string",
        "name": "chat_id",
        "desc": "Chat identifier."
      }
    ],
    "extends": "TDFunction",
    "desc": "Sends a notification about a screenshot taken in a chat. Supported only in private and secret chats.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1send_chat_screenshot_taken_notification.html"
  },
  "sendChatSetTtlMessage": {
    "fields": [
      {
        "type": "string",
        "name": "chat_id",
        "desc": "Chat identifier."
      },
      {
        "type": "number",
        "name": "ttl",
        "desc": "New TTL value, in seconds."
      }
    ],
    "extends": "TDFunction",
    "desc": "Changes the current TTL setting (sets a new self-destruct timer) in a secret chat and sends the corresponding message.\nReturns object_ptr<Message>.",
    "returnType": "message",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1send_chat_set_ttl_message.html"
  },
  "sendInlineQueryResultMessage": {
    "fields": [
      {
        "type": "string",
        "name": "chat_id",
        "desc": "Target chat."
      },
      {
        "type": "string",
        "name": "reply_to_message_id",
        "desc": "Identifier of a message to reply to or 0."
      },
      {
        "type": "bool",
        "name": "disable_notification",
        "desc": "Pass true to disable notification for the message. Not supported in secret chats."
      },
      {
        "type": "bool",
        "name": "from_background",
        "desc": "Pass true if the message is sent from background."
      },
      {
        "type": "string",
        "name": "query_id",
        "desc": "Identifier of the inline query."
      },
      {
        "type": "string",
        "name": "result_id",
        "desc": "Identifier of the inline result."
      }
    ],
    "extends": "TDFunction",
    "desc": "Sends the result of an inline query as a message. Returns the sent message. Always clears a chat draft message.\nReturns object_ptr<Message>.",
    "returnType": "message",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1send_inline_query_result_message.html"
  },
  "sendCustomRequest": {
    "fields": [
      {
        "type": "string",
        "name": "method",
        "desc": "The method name."
      },
      {
        "type": "string",
        "name": "parameters",
        "desc": "JSON-serialized method parameters."
      }
    ],
    "extends": "TDFunction",
    "desc": "Sends a custom request; for bots only.\nReturns object_ptr<CustomRequestResult>.",
    "returnType": "customRequestResult",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1send_custom_request.html"
  },
  "sendMessage": {
    "fields": [
      {
        "type": "string",
        "name": "chat_id",
        "desc": "Target chat."
      },
      {
        "type": "string",
        "name": "reply_to_message_id",
        "desc": "Identifier of the message to reply to or 0."
      },
      {
        "type": "bool",
        "name": "disable_notification",
        "desc": "Pass true to disable notification for the message. Not supported in secret chats."
      },
      {
        "type": "bool",
        "name": "from_background",
        "desc": "Pass true if the message is sent from the background."
      },
      {
        "type": "ReplyMarkup",
        "name": "reply_markup",
        "desc": "Markup for replying to the message; for bots only."
      },
      {
        "type": "InputMessageContent",
        "name": "input_message_content",
        "desc": "The content of the message to be sent."
      }
    ],
    "extends": "TDFunction",
    "desc": "Sends a message. Returns the sent message.\nReturns object_ptr<Message>.",
    "returnType": "message",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1send_message.html"
  },
  "sendMessageAlbum": {
    "fields": [
      {
        "type": "string",
        "name": "chat_id",
        "desc": "Target chat."
      },
      {
        "type": "string",
        "name": "reply_to_message_id",
        "desc": "Identifier of a message to reply to or 0."
      },
      {
        "type": "bool",
        "name": "disable_notification",
        "desc": "Pass true to disable notification for the messages. Not supported in secret chats."
      },
      {
        "type": "bool",
        "name": "from_background",
        "desc": "Pass true if the messages are sent from the background."
      },
      {
        "type": "InputMessageContent[]",
        "name": "input_message_contents",
        "desc": "Contents of messages to be sent."
      }
    ],
    "extends": "TDFunction",
    "desc": "Sends messages grouped together into an album. Currently only photo and video messages can be grouped into an album. Returns sent messages.\nReturns object_ptr<Messages>.",
    "returnType": "messages",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1send_message_album.html"
  },
  "sendPaymentForm": {
    "fields": [
      {
        "type": "string",
        "name": "chat_id",
        "desc": "Chat identifier of the Invoice message."
      },
      {
        "type": "string",
        "name": "message_id",
        "desc": "Message identifier."
      },
      {
        "type": "string",
        "name": "order_info_id",
        "desc": "Identifier returned by ValidateOrderInfo, or an empty string."
      },
      {
        "type": "string",
        "name": "shipping_option_id",
        "desc": "Identifier of a chosen shipping option, if applicable."
      },
      {
        "type": "InputCredentials",
        "name": "credentials",
        "desc": "The credentials chosen by user for payment."
      }
    ],
    "extends": "TDFunction",
    "desc": "Sends a filled-out payment form to the bot for final verification.\nReturns object_ptr<PaymentResult>.",
    "returnType": "paymentResult",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1send_payment_form.html"
  },
  "setAccountTtl": {
    "fields": [
      {
        "type": "accountTtl",
        "name": "ttl",
        "desc": "New account TTL."
      }
    ],
    "extends": "TDFunction",
    "desc": "Changes the period of inactivity after which the account of the current user will automatically be deleted.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_account_ttl.html"
  },
  "setAlarm": {
    "fields": [
      {
        "type": "double",
        "name": "seconds",
        "desc": "Number of seconds before the function returns."
      }
    ],
    "extends": "TDFunction",
    "desc": "Succeeds after a specified amount of time has passed. Can be called before authorization.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_alarm.html"
  },
  "setAuthenticationPhoneNumber": {
    "fields": [
      {
        "type": "string",
        "name": "phone_number",
        "desc": "The phone number of the user, in international format."
      },
      {
        "type": "bool",
        "name": "allow_flash_call",
        "desc": "Pass true if the authentication code may be sent via flash call to the specified phone number."
      },
      {
        "type": "bool",
        "name": "is_current_phone_number",
        "desc": "Pass true if the phone number is used on the current device. Ignored if allow_flash_call is false."
      }
    ],
    "extends": "TDFunction",
    "desc": "Sets the phone number of the user and sends an authentication code to the user. Works only when the current authorization state is authorizationStateWaitPhoneNumber.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_authentication_phone_number.html"
  },
  "setBio": {
    "fields": [
      {
        "type": "string",
        "name": "bio",
        "desc": "The new value of the user bio; 0-70 characters without line feeds."
      }
    ],
    "extends": "TDFunction",
    "desc": "Changes the bio of the current user.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_bio.html"
  },
  "setBotUpdatesStatus": {
    "fields": [
      {
        "type": "number",
        "name": "pending_update_count",
        "desc": "The number of pending updates."
      },
      {
        "type": "string",
        "name": "error_message",
        "desc": "The last error message."
      }
    ],
    "extends": "TDFunction",
    "desc": "Informs the server about the number of pending bot updates if they haven't been processed for a long time; for bots only.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_bot_updates_status.html"
  },
  "setChatClientData": {
    "fields": [
      {
        "type": "string",
        "name": "chat_id",
        "desc": "Chat identifier."
      },
      {
        "type": "string",
        "name": "client_data",
        "desc": "New value of client_data."
      }
    ],
    "extends": "TDFunction",
    "desc": "Changes client data associated with a chat.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_chat_client_data.html"
  },
  "setChatDraftMessage": {
    "fields": [
      {
        "type": "string",
        "name": "chat_id",
        "desc": "Chat identifier."
      },
      {
        "type": "draftMessage",
        "name": "draft_message",
        "desc": "New draft message; may be null."
      }
    ],
    "extends": "TDFunction",
    "desc": "Changes the draft message in a chat.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_chat_draft_message.html"
  },
  "setChatMemberStatus": {
    "fields": [
      {
        "type": "string",
        "name": "chat_id",
        "desc": "Chat identifier."
      },
      {
        "type": "number",
        "name": "user_id",
        "desc": "User identifier."
      },
      {
        "type": "ChatMemberStatus",
        "name": "status",
        "desc": "The new status of the member in the chat."
      }
    ],
    "extends": "TDFunction",
    "desc": "Changes the status of a chat member, needs appropriate privileges. This function is currently not suitable for adding new members to the chat; instead, use addChatMember. The chat member status will not be changed until it has been synchronized with the server.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_chat_member_status.html"
  },
  "setChatPhoto": {
    "fields": [
      {
        "type": "string",
        "name": "chat_id",
        "desc": "Chat identifier."
      },
      {
        "type": "InputFile",
        "name": "photo",
        "desc": "New chat photo. You can use a zero InputFileId to delete the chat photo. Files that are accessible only by HTTP URL are not acceptable."
      }
    ],
    "extends": "TDFunction",
    "desc": "Changes the photo of a chat. Supported only for basic groups, supergroups and channels. Requires administrator rights in basic groups and the appropriate administrator rights in supergroups and channels. The photo will not be changed before request to the server has been completed.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_chat_photo.html"
  },
  "setChatTitle": {
    "fields": [
      {
        "type": "string",
        "name": "chat_id",
        "desc": "Chat identifier."
      },
      {
        "type": "string",
        "name": "title",
        "desc": "New title of the chat; 1-255 characters."
      }
    ],
    "extends": "TDFunction",
    "desc": "Changes the chat title. Supported only for basic groups, supergroups and channels. Requires administrator rights in basic groups and the appropriate administrator rights in supergroups and channels. The title will not be changed until the request to the server has been completed.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_chat_title.html"
  },
  "setDatabaseEncryptionKey": {
    "fields": [
      {
        "type": "string",
        "name": "new_encryption_key",
        "desc": "New encryption key."
      }
    ],
    "extends": "TDFunction",
    "desc": "Changes the database encryption key. Usually the encryption key is never changed and is stored in some OS keychain.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_database_encryption_key.html"
  },
  "setFileGenerationProgress": {
    "fields": [
      {
        "type": "string",
        "name": "generation_id",
        "desc": "The identifier of the generation process."
      },
      {
        "type": "number",
        "name": "expected_size",
        "desc": "Expected size of the generated file, in bytes; 0 if unknown."
      },
      {
        "type": "number",
        "name": "local_prefix_size",
        "desc": "The number of bytes already generated."
      }
    ],
    "extends": "TDFunction",
    "desc": "The next part of a file was generated.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_file_generation_progress.html"
  },
  "setGameScore": {
    "fields": [
      {
        "type": "string",
        "name": "chat_id",
        "desc": "The chat to which the message with the game."
      },
      {
        "type": "string",
        "name": "message_id",
        "desc": "Identifier of the message."
      },
      {
        "type": "bool",
        "name": "edit_message",
        "desc": "True, if the message should be edited."
      },
      {
        "type": "number",
        "name": "user_id",
        "desc": "User identifier."
      },
      {
        "type": "number",
        "name": "score",
        "desc": "The new score."
      },
      {
        "type": "bool",
        "name": "force",
        "desc": "Pass true to update the score even if it decreases. If the score is 0, the user will be deleted from the high score table."
      }
    ],
    "extends": "TDFunction",
    "desc": "Updates the game score of the specified user in the game; for bots only.\nReturns object_ptr<Message>.",
    "returnType": "message",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_game_score.html"
  },
  "setInlineGameScore": {
    "fields": [
      {
        "type": "string",
        "name": "inline_message_id",
        "desc": "Inline message identifier."
      },
      {
        "type": "bool",
        "name": "edit_message",
        "desc": "True, if the message should be edited."
      },
      {
        "type": "number",
        "name": "user_id",
        "desc": "User identifier."
      },
      {
        "type": "number",
        "name": "score",
        "desc": "The new score."
      },
      {
        "type": "bool",
        "name": "force",
        "desc": "Pass true to update the score even if it decreases. If the score is 0, the user will be deleted from the high score table."
      }
    ],
    "extends": "TDFunction",
    "desc": "Updates the game score of the specified user in a game; for bots only.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_inline_game_score.html"
  },
  "setName": {
    "fields": [
      {
        "type": "string",
        "name": "first_name",
        "desc": "The new value of the first name for the user; 1-255 characters."
      },
      {
        "type": "string",
        "name": "last_name",
        "desc": "The new value of the optional last name for the user; 0-255 characters."
      }
    ],
    "extends": "TDFunction",
    "desc": "Changes the first and last name of the current user. If something changes, updateUser will be sent.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_name.html"
  },
  "setNetworkType": {
    "fields": [
      {
        "type": "NetworkType",
        "name": "type",
        "desc": "The new network type. By default, <a class=\"el\" href=\"classtd_1_1td__api_1_1network_type_other.html\">networkTypeOther</a>."
      }
    ],
    "extends": "TDFunction",
    "desc": "Sets the current network type. Can be called before authorization. Calling this method forces all network connections to reopen, mitigating the delay in switching between different networks, so it should be called whenever the network is changed, even if the network type remains the same. Network type is used to check whether the library can use the network at all and also for collecting detailed network data usage statistics.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_network_type.html"
  },
  "setNotificationSettings": {
    "fields": [
      {
        "type": "NotificationSettingsScope",
        "name": "scope",
        "desc": "Scope for which to change the notification settings."
      },
      {
        "type": "notificationSettings",
        "name": "notification_settings",
        "desc": "The new notification settings for the given scope."
      }
    ],
    "extends": "TDFunction",
    "desc": "Changes notification settings for a given scope.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_notification_settings.html"
  },
  "setOption": {
    "fields": [
      {
        "type": "string",
        "name": "name",
        "desc": "The name of the option."
      },
      {
        "type": "OptionValue",
        "name": "value",
        "desc": "The new value of the option."
      }
    ],
    "extends": "TDFunction",
    "desc": "Sets the value of an option. (Check the list of available options on https://core.telegram.org/tdlib/options.) Only writable options can be set. This method can be called before authorization.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_option.html"
  },
  "setPassword": {
    "fields": [
      {
        "type": "string",
        "name": "old_password",
        "desc": "Previous password of the user."
      },
      {
        "type": "string",
        "name": "new_password",
        "desc": "New password of the user; may be empty to remove the password."
      },
      {
        "type": "string",
        "name": "new_hint",
        "desc": "New password hint; may be empty."
      },
      {
        "type": "bool",
        "name": "set_recovery_email_address",
        "desc": "Pass true if the recovery email address should be changed."
      },
      {
        "type": "string",
        "name": "new_recovery_email_address",
        "desc": "New recovery email address; may be empty."
      }
    ],
    "extends": "TDFunction",
    "desc": "Changes the password for the user. If a new recovery email address is specified, then the error EMAIL_UNCONFIRMED is returned and the password change will not be applied until the new recovery email address has been confirmed. The application should periodically call getPasswordState to check whether the new email address has been confirmed.\nReturns object_ptr<PasswordState>.",
    "returnType": "passwordState",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_password.html"
  },
  "setPinnedChats": {
    "fields": [
      {
        "type": "string[]",
        "name": "chat_ids",
        "desc": "The new list of pinned chats."
      }
    ],
    "extends": "TDFunction",
    "desc": "Changes the order of pinned chats.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_pinned_chats.html"
  },
  "setProfilePhoto": {
    "fields": [
      {
        "type": "InputFile",
        "name": "photo",
        "desc": "Profile photo to set. <a class=\"el\" href=\"classtd_1_1td__api_1_1input_file_id.html\">inputFileId</a> and <a class=\"el\" href=\"classtd_1_1td__api_1_1input_file_remote.html\">inputFileRemote</a> may still be unsupported."
      }
    ],
    "extends": "TDFunction",
    "desc": "Uploads a new profile photo for the current user. If something changes, updateUser will be sent.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_profile_photo.html"
  },
  "setProxy": {
    "fields": [
      {
        "type": "Proxy",
        "name": "proxy",
        "desc": "<a class=\"el\" href=\"classtd_1_1td__api_1_1_proxy.html\">Proxy</a> server to use. Specify null to remove the proxy server."
      }
    ],
    "extends": "TDFunction",
    "desc": "Sets the proxy server for network requests. Can be called before authorization.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_proxy.html"
  },
  "setRecoveryEmailAddress": {
    "fields": [
      {
        "type": "string",
        "name": "password",
        "desc": "Password of the current user."
      },
      {
        "type": "string",
        "name": "new_recovery_email_address",
        "desc": "New recovery email address."
      }
    ],
    "extends": "TDFunction",
    "desc": "Changes the recovery email address of the user. If a new recovery email address is specified, then the error EMAIL_UNCONFIRMED is returned and the email address will not be changed until the new email has been confirmed. The application should periodically call getPasswordState to check whether the email address has been confirmed. If new_recovery_email_address is the same as the email address that is currently set up, this call succeeds immediately and aborts all other requests waiting for an email confirmation.\nReturns object_ptr<PasswordState>.",
    "returnType": "passwordState",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_recovery_email_address.html"
  },
  "setStickerPositionInSet": {
    "fields": [
      {
        "type": "InputFile",
        "name": "sticker",
        "desc": "Sticker."
      },
      {
        "type": "number",
        "name": "position",
        "desc": "New position of the sticker in the set, zero-based."
      }
    ],
    "extends": "TDFunction",
    "desc": "Changes the position of a sticker in the set to which it belongs; for bots only. The sticker set must have been created by the bot.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_sticker_position_in_set.html"
  },
  "setSupergroupDescription": {
    "fields": [
      {
        "type": "number",
        "name": "supergroup_id",
        "desc": "Identifier of the supergroup or channel."
      },
      {
        "type": "string",
        "name": "description",
        "desc": "New supergroup or channel description; 0-255 characters."
      }
    ],
    "extends": "TDFunction",
    "desc": "Changes information about a supergroup or channel; requires appropriate administrator rights.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_supergroup_description.html"
  },
  "setSupergroupStickerSet": {
    "fields": [
      {
        "type": "number",
        "name": "supergroup_id",
        "desc": "Identifier of the supergroup."
      },
      {
        "type": "string",
        "name": "sticker_set_id",
        "desc": "New value of the supergroup sticker set identifier. Use 0 to remove the supergroup sticker set."
      }
    ],
    "extends": "TDFunction",
    "desc": "Changes the sticker set of a supergroup; requires appropriate rights in the supergroup.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_supergroup_sticker_set.html"
  },
  "setUserPrivacySettingRules": {
    "fields": [
      {
        "type": "UserPrivacySetting",
        "name": "setting",
        "desc": "The privacy setting."
      },
      {
        "type": "userPrivacySettingRules",
        "name": "rules",
        "desc": "The new privacy rules."
      }
    ],
    "extends": "TDFunction",
    "desc": "Changes user privacy settings.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_user_privacy_setting_rules.html"
  },
  "terminateAllOtherSessions": {
    "fields": [],
    "extends": "TDFunction",
    "desc": "Terminates all other sessions of the current user.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1terminate_all_other_sessions.html"
  },
  "terminateSession": {
    "fields": [
      {
        "type": "string",
        "name": "session_id",
        "desc": "Session identifier."
      }
    ],
    "extends": "TDFunction",
    "desc": "Terminates a session of the current user.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1terminate_session.html"
  },
  "setSupergroupUsername": {
    "fields": [
      {
        "type": "number",
        "name": "supergroup_id",
        "desc": "Identifier of the supergroup or channel."
      },
      {
        "type": "string",
        "name": "username",
        "desc": "New value of the username. Use an empty string to remove the username."
      }
    ],
    "extends": "TDFunction",
    "desc": "Changes the username of the supergroup or channel, requires creator privileges in the supergroup or channel.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_supergroup_username.html"
  },
  "testCallBytes": {
    "fields": [
      {
        "type": "string",
        "name": "x",
        "desc": "Bytes to return."
      }
    ],
    "extends": "TDFunction",
    "desc": "Returns the received bytes; for testing only.\nReturns object_ptr<TestBytes>.",
    "returnType": "testBytes",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1test_call_bytes.html"
  },
  "testCallEmpty": {
    "fields": [],
    "extends": "TDFunction",
    "desc": "Does nothing; for testing only.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1test_call_empty.html"
  },
  "testCallString": {
    "fields": [
      {
        "type": "string",
        "name": "x",
        "desc": "String to return."
      }
    ],
    "extends": "TDFunction",
    "desc": "Returns the received string; for testing only.\nReturns object_ptr<TestString>.",
    "returnType": "testString",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1test_call_string.html"
  },
  "testCallVectorInt": {
    "fields": [
      {
        "type": "number[]",
        "name": "x",
        "desc": "Vector of numbers to return."
      }
    ],
    "extends": "TDFunction",
    "desc": "Returns the received vector of numbers; for testing only.\nReturns object_ptr<TestVectorInt>.",
    "returnType": "testVectorInt",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1test_call_vector_int.html"
  },
  "testCallVectorIntObject": {
    "fields": [
      {
        "type": "testInt[]",
        "name": "x",
        "desc": "Vector of objects to return."
      }
    ],
    "extends": "TDFunction",
    "desc": "Returns the received vector of objects containing a number; for testing only.\nReturns object_ptr<TestVectorIntObject>.",
    "returnType": "testVectorIntObject",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1test_call_vector_int_object.html"
  },
  "testCallVectorString": {
    "fields": [
      {
        "type": "string[]",
        "name": "x",
        "desc": "Vector of strings to return."
      }
    ],
    "extends": "TDFunction",
    "desc": "For testing only request. Returns the received vector of strings; for testing only.\nReturns object_ptr<TestVectorString>.",
    "returnType": "testVectorString",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1test_call_vector_string.html"
  },
  "testCallVectorStringObject": {
    "fields": [
      {
        "type": "testString[]",
        "name": "x",
        "desc": "Vector of objects to return."
      }
    ],
    "extends": "TDFunction",
    "desc": "Returns the received vector of objects containing a string; for testing only.\nReturns object_ptr<TestVectorStringObject>.",
    "returnType": "testVectorStringObject",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1test_call_vector_string_object.html"
  },
  "testGetDifference": {
    "fields": [],
    "extends": "TDFunction",
    "desc": "Forces an updates.getDifference call to the Telegram servers; for testing only.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1test_get_difference.html"
  },
  "testNetwork": {
    "fields": [],
    "extends": "TDFunction",
    "desc": "Sends a simple network request to the Telegram servers; for testing only.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1test_network.html"
  },
  "testSquareInt": {
    "fields": [
      {
        "type": "number",
        "name": "x",
        "desc": "Number to square."
      }
    ],
    "extends": "TDFunction",
    "desc": "Returns the squared received number; for testing only.\nReturns object_ptr<TestInt>.",
    "returnType": "testInt",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1test_square_int.html"
  },
  "testUseError": {
    "fields": [],
    "extends": "TDFunction",
    "desc": "Does nothing and ensures that the Error object is used; for testing only.\nReturns object_ptr<Error>.",
    "returnType": "error",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1test_use_error.html"
  },
  "testUseUpdate": {
    "fields": [],
    "extends": "TDFunction",
    "desc": "Does nothing and ensures that the Update object is used; for testing only.\nReturns object_ptr<Update>.",
    "returnType": "Update",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1test_use_update.html"
  },
  "toggleBasicGroupAdministrators": {
    "fields": [
      {
        "type": "number",
        "name": "basic_group_id",
        "desc": "Identifier of the basic group."
      },
      {
        "type": "bool",
        "name": "everyone_is_administrator",
        "desc": "New value of everyone_is_administrator."
      }
    ],
    "extends": "TDFunction",
    "desc": "Toggles the \"All members are admins\" setting in basic groups; requires creator privileges in the group.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1toggle_basic_group_administrators.html"
  },
  "toggleChatIsPinned": {
    "fields": [
      {
        "type": "string",
        "name": "chat_id",
        "desc": "Chat identifier."
      },
      {
        "type": "bool",
        "name": "is_pinned",
        "desc": "New value of is_pinned."
      }
    ],
    "extends": "TDFunction",
    "desc": "Changes the pinned state of a chat. You can pin up to GetOption(\"pinned_chat_count_max\") non-secret chats and the same number of secret chats.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1toggle_chat_is_pinned.html"
  },
  "toggleSupergroupInvites": {
    "fields": [
      {
        "type": "number",
        "name": "supergroup_id",
        "desc": "Identifier of the supergroup."
      },
      {
        "type": "bool",
        "name": "anyone_can_invite",
        "desc": "New value of anyone_can_invite."
      }
    ],
    "extends": "TDFunction",
    "desc": "Toggles whether all members of a supergroup can add new members; requires appropriate administrator rights in the supergroup.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1toggle_supergroup_invites.html"
  },
  "toggleSupergroupIsAllHistoryAvailable": {
    "fields": [
      {
        "type": "number",
        "name": "supergroup_id",
        "desc": "The identifier of the supergroup."
      },
      {
        "type": "bool",
        "name": "is_all_history_available",
        "desc": "The new value of is_all_history_available."
      }
    ],
    "extends": "TDFunction",
    "desc": "Toggles whether the message history of a supergroup is available to new members; requires appropriate administrator rights in the supergroup.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1toggle_supergroup_is_all_history_available.html"
  },
  "setTdlibParameters": {
    "fields": [
      {
        "type": "tdlibParameters",
        "name": "parameters",
        "desc": "Parameters."
      }
    ],
    "extends": "TDFunction",
    "desc": "Sets the parameters for TDLib initialization.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_tdlib_parameters.html"
  },
  "setUsername": {
    "fields": [
      {
        "type": "string",
        "name": "username",
        "desc": "The new value of the username. Use an empty string to remove the username."
      }
    ],
    "extends": "TDFunction",
    "desc": "Changes the username of the current user. If something changes, updateUser will be sent.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_username.html"
  },
  "unblockUser": {
    "fields": [
      {
        "type": "number",
        "name": "user_id",
        "desc": "User identifier."
      }
    ],
    "extends": "TDFunction",
    "desc": "Removes a user from the blacklist.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1unblock_user.html"
  },
  "uploadFile": {
    "fields": [
      {
        "type": "InputFile",
        "name": "file",
        "desc": "File to upload."
      },
      {
        "type": "FileType",
        "name": "file_type",
        "desc": "File type."
      },
      {
        "type": "number",
        "name": "priority",
        "desc": "Priority of the upload (1-32). The higher the priority, the earlier the file will be uploaded. If the priorities of two files are equal, then the first one for which <a class=\"el\" href=\"classtd_1_1td__api_1_1upload_file.html\">uploadFile</a> was called will be uploaded first."
      }
    ],
    "extends": "TDFunction",
    "desc": "Asynchronously uploads a file to the cloud without sending it in a message. updateFile will be used to notify about upload progress and successful completion of the upload. The file will not have a persistent remote identifier until it will be sent in a message.\nReturns object_ptr<File>.",
    "returnType": "file",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1upload_file.html"
  },
  "uploadStickerFile": {
    "fields": [
      {
        "type": "number",
        "name": "user_id",
        "desc": "Sticker file owner."
      },
      {
        "type": "InputFile",
        "name": "png_sticker",
        "desc": "PNG image with the sticker; must be up to 512 kB in size and fit in 512x512 square."
      }
    ],
    "extends": "TDFunction",
    "desc": "Uploads a PNG image with a sticker; for bots only; returns the uploaded file.\nReturns object_ptr<File>.",
    "returnType": "file",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1upload_sticker_file.html"
  },
  "validateOrderInfo": {
    "fields": [
      {
        "type": "string",
        "name": "chat_id",
        "desc": "Chat identifier of the Invoice message."
      },
      {
        "type": "string",
        "name": "message_id",
        "desc": "Message identifier."
      },
      {
        "type": "orderInfo",
        "name": "order_info",
        "desc": "The order information, provided by the user."
      },
      {
        "type": "bool",
        "name": "allow_save",
        "desc": "True, if the order information can be saved."
      }
    ],
    "extends": "TDFunction",
    "desc": "Validates the order information provided by a user and returns the available shipping options for a flexible invoice.\nReturns object_ptr<ValidatedOrderInfo>.",
    "returnType": "validatedOrderInfo",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1validate_order_info.html"
  },
  "viewMessages": {
    "fields": [
      {
        "type": "string",
        "name": "chat_id",
        "desc": "Chat identifier."
      },
      {
        "type": "string[]",
        "name": "message_ids",
        "desc": "The identifiers of the messages being viewed."
      },
      {
        "type": "bool",
        "name": "force_read",
        "desc": "True, if messages in closed chats should be marked as read."
      }
    ],
    "extends": "TDFunction",
    "desc": "This method should be called if messages are being viewed by the user. Many useful activities depend on whether the messages are currently being viewed or not (e.g., marking messages as read, incrementing a view counter, updating a view counter, removing deleted messages in supergroups and channels).\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1view_messages.html"
  },
  "viewTrendingStickerSets": {
    "fields": [
      {
        "type": "string[]",
        "name": "sticker_set_ids",
        "desc": "Identifiers of viewed trending sticker sets."
      }
    ],
    "extends": "TDFunction",
    "desc": "Informs the server that some trending sticker sets have been viewed by the user.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1view_trending_sticker_sets.html"
  },
  "upgradeBasicGroupChatToSupergroupChat": {
    "fields": [
      {
        "type": "string",
        "name": "chat_id",
        "desc": "Identifier of the chat to upgrade."
      }
    ],
    "extends": "TDFunction",
    "desc": "Creates a new supergroup from an existing basic group and sends a corresponding messageChatUpgradeTo and messageChatUpgradeFrom. Deactivates the original basic group.\nReturns object_ptr<Chat>.",
    "returnType": "chat",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1upgrade_basic_group_chat_to_supergroup_chat.html"
  },
  "accountTtl": {
    "fields": [
      {
        "type": "number",
        "name": "days",
        "desc": "Number of days of inactivity before the account will be flagged for deletion; should range from 30-366 days."
      }
    ],
    "extends": "TDObject",
    "desc": "Contains information about the period of inactivity after which the current user's account will automatically be deleted.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1account_ttl.html"
  },
  "animation": {
    "fields": [
      {
        "type": "number",
        "name": "duration",
        "desc": "Duration of the animation, in seconds; as defined by the sender."
      },
      {
        "type": "number",
        "name": "width",
        "desc": "Width of the animation."
      },
      {
        "type": "number",
        "name": "height",
        "desc": "Height of the animation."
      },
      {
        "type": "string",
        "name": "file_name",
        "desc": "Original name of the file; as defined by the sender."
      },
      {
        "type": "string",
        "name": "mime_type",
        "desc": "MIME type of the file, usually \"image/gif\" or \"video/mp4\"."
      },
      {
        "type": "photoSize",
        "name": "thumbnail",
        "desc": "Animation thumbnail; may be null."
      },
      {
        "type": "file",
        "name": "animation",
        "desc": "File containing the animation."
      }
    ],
    "extends": "TDObject",
    "desc": "Describes an animation file. The animation must be encoded in GIF or MPEG4 format.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1animation.html"
  },
  "animations": {
    "fields": [
      {
        "type": "animation[]",
        "name": "animations",
        "desc": "List of animations."
      }
    ],
    "extends": "TDObject",
    "desc": "Represents a list of animations.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1animations.html"
  },
  "audio": {
    "fields": [
      {
        "type": "number",
        "name": "duration",
        "desc": "Duration of the audio, in seconds; as defined by the sender."
      },
      {
        "type": "string",
        "name": "title",
        "desc": "Title of the audio; as defined by the sender."
      },
      {
        "type": "string",
        "name": "performer",
        "desc": "Performer of the audio; as defined by the sender."
      },
      {
        "type": "string",
        "name": "file_name",
        "desc": "Original name of the file; as defined by the sender."
      },
      {
        "type": "string",
        "name": "mime_type",
        "desc": "The MIME type of the file; as defined by the sender."
      },
      {
        "type": "photoSize",
        "name": "album_cover_thumbnail",
        "desc": "The thumbnail of the album cover; as defined by the sender. The full size thumbnail should be extracted from the downloaded file; may be null."
      },
      {
        "type": "file",
        "name": "audio",
        "desc": "File containing the audio."
      }
    ],
    "extends": "TDObject",
    "desc": "Describes an audio file. Audio is usually in MP3 format.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1audio.html"
  },
  "AuthenticationCodeType": {
    "fields": [],
    "extends": "TDObject",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_authentication_code_type.html"
  },
  "authenticationCodeInfo": {
    "fields": [
      {
        "type": "AuthenticationCodeType",
        "name": "type",
        "desc": "Describes the way the code was sent to the user."
      },
      {
        "type": "AuthenticationCodeType",
        "name": "next_type",
        "desc": "Describes the way the next code will be sent to the user; may be null."
      },
      {
        "type": "number",
        "name": "timeout",
        "desc": "Timeout before the code should be re-sent, in seconds."
      }
    ],
    "extends": "TDObject",
    "desc": "Information about the authentication code that was sent.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1authentication_code_info.html"
  },
  "toggleSupergroupSignMessages": {
    "fields": [
      {
        "type": "number",
        "name": "supergroup_id",
        "desc": "Identifier of the channel."
      },
      {
        "type": "bool",
        "name": "sign_messages",
        "desc": "New value of sign_messages."
      }
    ],
    "extends": "TDFunction",
    "desc": "Toggles sender signatures messages sent in a channel; requires appropriate administrator rights in the channel.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1toggle_supergroup_sign_messages.html"
  },
  "authenticationCodeTypeCall": {
    "fields": [
      {
        "type": "number",
        "name": "length",
        "desc": "Length of the code."
      }
    ],
    "extends": "AuthenticationCodeType",
    "desc": "An authentication code is delivered via a phone call to the specified phone number.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1authentication_code_type_call.html"
  },
  "authenticationCodeTypeSms": {
    "fields": [
      {
        "type": "number",
        "name": "length",
        "desc": "Length of the code."
      }
    ],
    "extends": "AuthenticationCodeType",
    "desc": "An authentication code is delivered via an SMS message to the specified phone number.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1authentication_code_type_sms.html"
  },
  "authenticationCodeTypeFlashCall": {
    "fields": [
      {
        "type": "string",
        "name": "pattern",
        "desc": "Pattern of the phone number from which the call will be made."
      }
    ],
    "extends": "AuthenticationCodeType",
    "desc": "An authentication code is delivered by an immediately cancelled call to the specified phone number. The number from which the call was made is the code.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1authentication_code_type_flash_call.html"
  },
  "authenticationCodeTypeTelegramMessage": {
    "fields": [
      {
        "type": "number",
        "name": "length",
        "desc": "Length of the code."
      }
    ],
    "extends": "AuthenticationCodeType",
    "desc": "An authentication code is delivered via a private Telegram message, which can be viewed in another client.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1authentication_code_type_telegram_message.html"
  },
  "AuthorizationState": {
    "fields": [],
    "extends": "TDObject",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_authorization_state.html"
  },
  "authorizationStateClosed": {
    "fields": [],
    "extends": "AuthorizationState",
    "desc": "TDLib client is in its final state. All databases are closed and all resources are released. No other updates will be received after this. All queries will be responded to with error code 500. To continue working, one should create a new instance of the TDLib client.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1authorization_state_closed.html"
  },
  "authorizationStateClosing": {
    "fields": [],
    "extends": "AuthorizationState",
    "desc": "TDLib is closing, all subsequent queries will be answered with the error 500. Note that closing TDLib can take a while. All resources will be freed only after authorizationStateClosed has been received.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1authorization_state_closing.html"
  },
  "authorizationStateLoggingOut": {
    "fields": [],
    "extends": "AuthorizationState",
    "desc": "The user is currently logging out.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1authorization_state_logging_out.html"
  },
  "authorizationStateReady": {
    "fields": [],
    "extends": "AuthorizationState",
    "desc": "The user has been successfully authorized. TDLib is now ready to answer queries.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1authorization_state_ready.html"
  },
  "unpinSupergroupMessage": {
    "fields": [
      {
        "type": "number",
        "name": "supergroup_id",
        "desc": "Identifier of the supergroup or channel."
      }
    ],
    "extends": "TDFunction",
    "desc": "Removes the pinned message from a supergroup or channel; requires appropriate administrator rights in the supergroup or channel.\nReturns object_ptr<Ok>.",
    "returnType": "ok",
    "type": "function",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1unpin_supergroup_message.html"
  },
  "authorizationStateWaitPassword": {
    "fields": [
      {
        "type": "string",
        "name": "password_hint",
        "desc": "Hint for the password; can be empty."
      },
      {
        "type": "bool",
        "name": "has_recovery_email_address",
        "desc": "True if a recovery email address has been set up."
      },
      {
        "type": "string",
        "name": "recovery_email_address_pattern",
        "desc": "Pattern of the email address to which the recovery email was sent; empty until a recovery email has been sent."
      }
    ],
    "extends": "AuthorizationState",
    "desc": "The user has been authorized, but needs to enter a password to start using the application.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1authorization_state_wait_password.html"
  },
  "authorizationStateWaitTdlibParameters": {
    "fields": [],
    "extends": "AuthorizationState",
    "desc": "TDLib needs TdlibParameters for initialization.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1authorization_state_wait_tdlib_parameters.html"
  },
  "authorizationStateWaitPhoneNumber": {
    "fields": [],
    "extends": "AuthorizationState",
    "desc": "TDLib needs the user's phone number to authorize.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1authorization_state_wait_phone_number.html"
  },
  "basicGroupFullInfo": {
    "fields": [
      {
        "type": "number",
        "name": "creator_user_id",
        "desc": "User identifier of the creator of the group; 0 if unknown."
      },
      {
        "type": "chatMember[]",
        "name": "members",
        "desc": "Group members."
      },
      {
        "type": "string",
        "name": "invite_link",
        "desc": "Invite link for this group; available only for the group creator and only after it has been generated at least once."
      }
    ],
    "extends": "TDObject",
    "desc": "Contains full information about a basic group.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1basic_group_full_info.html"
  },
  "basicGroup": {
    "fields": [
      {
        "type": "number",
        "name": "id",
        "desc": "Group identifier."
      },
      {
        "type": "number",
        "name": "member_count",
        "desc": "Number of members in the group."
      },
      {
        "type": "ChatMemberStatus",
        "name": "status",
        "desc": "Status of the current user in the group."
      },
      {
        "type": "bool",
        "name": "everyone_is_administrator",
        "desc": "True, if all members have been granted administrator rights in the group."
      },
      {
        "type": "bool",
        "name": "is_active",
        "desc": "True, if the group is active."
      },
      {
        "type": "number",
        "name": "upgraded_to_supergroup_id",
        "desc": "Identifier of the supergroup to which this group was upgraded; 0 if none."
      }
    ],
    "extends": "TDObject",
    "desc": "Represents a basic group of 0-200 users (must be upgraded to a supergroup to accommodate more than 200 users).",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1basic_group.html"
  },
  "botCommand": {
    "fields": [
      {
        "type": "string",
        "name": "command",
        "desc": "Text of the bot command."
      },
      {
        "type": "string",
        "name": "description",
        "desc": "Description of the bot command."
      }
    ],
    "extends": "TDObject",
    "desc": "Represents commands supported by a bot.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1bot_command.html"
  },
  "botInfo": {
    "fields": [
      {
        "type": "string",
        "name": "description",
        "desc": "Long description shown on the user info page."
      },
      {
        "type": "botCommand[]",
        "name": "commands",
        "desc": "A list of commands supported by the bot."
      }
    ],
    "extends": "TDObject",
    "desc": "Provides information about a bot and its supported commands.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1bot_info.html"
  },
  "call": {
    "fields": [
      {
        "type": "number",
        "name": "id",
        "desc": "Call identifier, not persistent."
      },
      {
        "type": "number",
        "name": "user_id",
        "desc": "Peer user identifier."
      },
      {
        "type": "bool",
        "name": "is_outgoing",
        "desc": "True, if the call is outgoing."
      },
      {
        "type": "CallState",
        "name": "state",
        "desc": "Call state."
      }
    ],
    "extends": "TDObject",
    "desc": "Describes a call.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1call.html"
  },
  "authorizationStateWaitCode": {
    "fields": [
      {
        "type": "bool",
        "name": "is_registered",
        "desc": "True, if the user is already registered."
      },
      {
        "type": "authenticationCodeInfo",
        "name": "code_info",
        "desc": "Information about the authorization code that was sent."
      }
    ],
    "extends": "AuthorizationState",
    "desc": "TDLib needs the user's authentication code to finalize authorization.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1authorization_state_wait_code.html"
  },
  "authorizationStateWaitEncryptionKey": {
    "fields": [
      {
        "type": "bool",
        "name": "is_encrypted",
        "desc": "True, if the database is currently encrypted."
      }
    ],
    "extends": "AuthorizationState",
    "desc": "TDLib needs an encryption key to decrypt the local database.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1authorization_state_wait_encryption_key.html"
  },
  "callbackQueryAnswer": {
    "fields": [
      {
        "type": "string",
        "name": "text",
        "desc": "Text of the answer."
      },
      {
        "type": "bool",
        "name": "show_alert",
        "desc": "True, if an alert should be shown to the user instead of a toast notification."
      },
      {
        "type": "string",
        "name": "url",
        "desc": "URL to be opened."
      }
    ],
    "extends": "TDObject",
    "desc": "Contains a bot's answer to a callback query.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1callback_query_answer.html"
  },
  "CallDiscardReason": {
    "fields": [],
    "extends": "TDObject",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_call_discard_reason.html"
  },
  "callConnection": {
    "fields": [
      {
        "type": "string",
        "name": "id",
        "desc": "Reflector identifier."
      },
      {
        "type": "string",
        "name": "ip",
        "desc": "IPv4 reflector address."
      },
      {
        "type": "string",
        "name": "ipv6",
        "desc": "IPv6 reflector address."
      },
      {
        "type": "number",
        "name": "port",
        "desc": "Reflector port number."
      },
      {
        "type": "string",
        "name": "peer_tag",
        "desc": "Connection peer tag."
      }
    ],
    "extends": "TDObject",
    "desc": "Describes the address of UDP reflectors.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1call_connection.html"
  },
  "callbackQueryPayloadGame": {
    "fields": [
      {
        "type": "string",
        "name": "game_short_name",
        "desc": "A short name of the game that was attached to the callback button."
      }
    ],
    "extends": "CallbackQueryPayload",
    "desc": "The payload from a game callback button.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1callback_query_payload_game.html"
  },
  "callDiscardReasonDeclined": {
    "fields": [],
    "extends": "CallDiscardReason",
    "desc": "The call was ended before the conversation started. It was declined by the other party.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1call_discard_reason_declined.html"
  },
  "callDiscardReasonEmpty": {
    "fields": [],
    "extends": "CallDiscardReason",
    "desc": "The call wasn't discarded, or the reason is unknown.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1call_discard_reason_empty.html"
  },
  "callDiscardReasonHungUp": {
    "fields": [],
    "extends": "CallDiscardReason",
    "desc": "The call was ended because one of the parties hung up.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1call_discard_reason_hung_up.html"
  },
  "callDiscardReasonMissed": {
    "fields": [],
    "extends": "CallDiscardReason",
    "desc": "The call was ended before the conversation started. It was cancelled by the caller or missed by the other party.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1call_discard_reason_missed.html"
  },
  "callId": {
    "fields": [
      {
        "type": "number",
        "name": "id",
        "desc": "Call identifier."
      }
    ],
    "extends": "TDObject",
    "desc": "Contains the call identifier.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1call_id.html"
  },
  "callDiscardReasonDisconnected": {
    "fields": [],
    "extends": "CallDiscardReason",
    "desc": "The call was ended during the conversation because the users were disconnected.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1call_discard_reason_disconnected.html"
  },
  "callProtocol": {
    "fields": [
      {
        "type": "bool",
        "name": "udp_p2p",
        "desc": "True, if UDP peer-to-peer connections are supported."
      },
      {
        "type": "bool",
        "name": "udp_reflector",
        "desc": "True, if connection through UDP reflectors is supported."
      },
      {
        "type": "number",
        "name": "min_layer",
        "desc": "Minimum supported API layer; use 65."
      },
      {
        "type": "number",
        "name": "max_layer",
        "desc": "Maximum supported API layer; use 65."
      }
    ],
    "extends": "TDObject",
    "desc": "Specifies the supported call protocols.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1call_protocol.html"
  },
  "CallState": {
    "fields": [],
    "extends": "TDObject",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_call_state.html"
  },
  "callStateDiscarded": {
    "fields": [
      {
        "type": "CallDiscardReason",
        "name": "reason",
        "desc": "The reason, why the call has ended."
      },
      {
        "type": "bool",
        "name": "need_rating",
        "desc": "True, if the call rating should be sent to the server."
      },
      {
        "type": "bool",
        "name": "need_debug_information",
        "desc": "True, if the call debug information should be sent to the server."
      }
    ],
    "extends": "CallState",
    "desc": "The call has ended successfully.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1call_state_discarded.html"
  },
  "callStateError": {
    "fields": [
      {
        "type": "error",
        "name": "error",
        "desc": "Error. An error with the code 4005000 will be returned if an outgoing call is missed because of an expired timeout."
      }
    ],
    "extends": "CallState",
    "desc": "The call has ended with an error.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1call_state_error.html"
  },
  "callStateExchangingKeys": {
    "fields": [],
    "extends": "CallState",
    "desc": "The call has been answered and encryption keys are being exchanged.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1call_state_exchanging_keys.html"
  },
  "callStateHangingUp": {
    "fields": [],
    "extends": "CallState",
    "desc": "The call is hanging up after discardCall has been called.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1call_state_hanging_up.html"
  },
  "CallbackQueryPayload": {
    "fields": [],
    "extends": "TDObject",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_callback_query_payload.html"
  },
  "callbackQueryPayloadData": {
    "fields": [
      {
        "type": "string",
        "name": "data",
        "desc": "Data that was attached to the callback button."
      }
    ],
    "extends": "CallbackQueryPayload",
    "desc": "The payload from a general callback button.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1callback_query_payload_data.html"
  },
  "callStatePending": {
    "fields": [
      {
        "type": "bool",
        "name": "is_created",
        "desc": "True, if the call has already been created by the server."
      },
      {
        "type": "bool",
        "name": "is_received",
        "desc": "True, if the call has already been received by the other party."
      }
    ],
    "extends": "CallState",
    "desc": "The call is pending, waiting to be accepted by a user.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1call_state_pending.html"
  },
  "callStateReady": {
    "fields": [
      {
        "type": "callProtocol",
        "name": "protocol",
        "desc": "Call protocols supported by the peer."
      },
      {
        "type": "callConnection[]",
        "name": "connections",
        "desc": "Available UDP reflectors."
      },
      {
        "type": "string",
        "name": "config",
        "desc": "A JSON-encoded call config."
      },
      {
        "type": "string",
        "name": "encryption_key",
        "desc": "Call encryption key."
      },
      {
        "type": "string[]",
        "name": "emojis",
        "desc": "Encryption key emojis fingerprint."
      }
    ],
    "extends": "CallState",
    "desc": "The call is ready to use.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1call_state_ready.html"
  },
  "ChatAction": {
    "fields": [],
    "extends": "TDObject",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_chat_action.html"
  },
  "chatActionCancel": {
    "fields": [],
    "extends": "ChatAction",
    "desc": "The user has cancelled the previous action.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_action_cancel.html"
  },
  "chat": {
    "fields": [
      {
        "type": "string",
        "name": "id",
        "desc": "Chat unique identifier."
      },
      {
        "type": "ChatType",
        "name": "type",
        "desc": "Type of the chat."
      },
      {
        "type": "string",
        "name": "title",
        "desc": "Chat title."
      },
      {
        "type": "chatPhoto",
        "name": "photo",
        "desc": "Chat photo; may be null."
      },
      {
        "type": "message",
        "name": "last_message",
        "desc": "Last message in the chat; may be null."
      },
      {
        "type": "string",
        "name": "order",
        "desc": "Descending parameter by which chats are sorted in the main chat list. If the order number of two chats is the same, they must be sorted in descending order by ID. If 0, the position of the chat in the list is undetermined."
      },
      {
        "type": "bool",
        "name": "is_pinned",
        "desc": "True, if the chat is pinned."
      },
      {
        "type": "number",
        "name": "unread_count",
        "desc": "Number of unread messages in the chat."
      },
      {
        "type": "string",
        "name": "last_read_inbox_message_id",
        "desc": "Identifier of the last read incoming message."
      },
      {
        "type": "string",
        "name": "last_read_outbox_message_id",
        "desc": "Identifier of the last read outgoing message."
      },
      {
        "type": "number",
        "name": "unread_mention_count",
        "desc": "Number of unread messages with a mention/reply in the chat."
      },
      {
        "type": "notificationSettings",
        "name": "notification_settings",
        "desc": "Notification settings for this chat."
      },
      {
        "type": "string",
        "name": "reply_markup_message_id",
        "desc": "Identifier of the message from which reply markup needs to be used; 0 if there is no default custom reply markup in the chat."
      },
      {
        "type": "draftMessage",
        "name": "draft_message",
        "desc": "A draft of a message in the chat; may be null. parse_mode in input_message_text will always be null."
      },
      {
        "type": "string",
        "name": "client_data",
        "desc": "Contains client-specific data associated with the chat. (For example, the chat position or local chat notification settings can be stored here.) Persistent if a message database is used."
      }
    ],
    "extends": "TDObject",
    "desc": "A chat. (Can be a private chat, basic group, supergroup, or secret chat.)",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat.html"
  },
  "chatActionChoosingContact": {
    "fields": [],
    "extends": "ChatAction",
    "desc": "The user is picking a contact to send.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_action_choosing_contact.html"
  },
  "chatActionChoosingLocation": {
    "fields": [],
    "extends": "ChatAction",
    "desc": "The user is picking a location or venue to send.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_action_choosing_location.html"
  },
  "chatActionRecordingVideo": {
    "fields": [],
    "extends": "ChatAction",
    "desc": "The user is recording a video.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_action_recording_video.html"
  },
  "chatActionRecordingVideoNote": {
    "fields": [],
    "extends": "ChatAction",
    "desc": "The user is recording a video note.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_action_recording_video_note.html"
  },
  "chatActionRecordingVoiceNote": {
    "fields": [],
    "extends": "ChatAction",
    "desc": "The user is recording a voice note.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_action_recording_voice_note.html"
  },
  "chatActionStartPlayingGame": {
    "fields": [],
    "extends": "ChatAction",
    "desc": "The user has started to play a game.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_action_start_playing_game.html"
  },
  "chatActionTyping": {
    "fields": [],
    "extends": "ChatAction",
    "desc": "The user is typing a message.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_action_typing.html"
  },
  "chatActionUploadingPhoto": {
    "fields": [
      {
        "type": "number",
        "name": "progress",
        "desc": "Upload progress, as a percentage."
      }
    ],
    "extends": "ChatAction",
    "desc": "The user is uploading a photo.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_action_uploading_photo.html"
  },
  "chatActionUploadingDocument": {
    "fields": [
      {
        "type": "number",
        "name": "progress",
        "desc": "Upload progress, as a percentage."
      }
    ],
    "extends": "ChatAction",
    "desc": "The user is uploading a document.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_action_uploading_document.html"
  },
  "chatActionUploadingVideo": {
    "fields": [
      {
        "type": "number",
        "name": "progress",
        "desc": "Upload progress, as a percentage."
      }
    ],
    "extends": "ChatAction",
    "desc": "The user is uploading a video.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_action_uploading_video.html"
  },
  "chatActionUploadingVideoNote": {
    "fields": [
      {
        "type": "number",
        "name": "progress",
        "desc": "Upload progress, as a percentage."
      }
    ],
    "extends": "ChatAction",
    "desc": "The user is uploading a video note.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_action_uploading_video_note.html"
  },
  "ChatEventAction": {
    "fields": [],
    "extends": "TDObject",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_chat_event_action.html"
  },
  "chatActionUploadingVoiceNote": {
    "fields": [
      {
        "type": "number",
        "name": "progress",
        "desc": "Upload progress, as a percentage."
      }
    ],
    "extends": "ChatAction",
    "desc": "The user is uploading a voice note.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_action_uploading_voice_note.html"
  },
  "chatEvent": {
    "fields": [
      {
        "type": "string",
        "name": "id",
        "desc": "Chat event identifier."
      },
      {
        "type": "number",
        "name": "date",
        "desc": "Point in time (Unix timestamp) when the event happened."
      },
      {
        "type": "number",
        "name": "user_id",
        "desc": "Identifier of the user who performed the action that triggered the event."
      },
      {
        "type": "ChatEventAction",
        "name": "action",
        "desc": "Action performed by the user."
      }
    ],
    "extends": "TDObject",
    "desc": "Represents a chat event.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_event.html"
  },
  "chatEventDescriptionChanged": {
    "fields": [
      {
        "type": "string",
        "name": "old_description",
        "desc": "Previous chat description."
      },
      {
        "type": "string",
        "name": "new_description",
        "desc": "New chat description."
      }
    ],
    "extends": "ChatEventAction",
    "desc": "The chat description was changed.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_event_description_changed.html"
  },
  "chatEventIsAllHistoryAvailableToggled": {
    "fields": [
      {
        "type": "bool",
        "name": "is_all_history_available",
        "desc": "New value of is_all_history_available."
      }
    ],
    "extends": "ChatEventAction",
    "desc": "The is_all_history_available setting of a supergroup was toggled.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_event_is_all_history_available_toggled.html"
  },
  "chatEventMemberJoined": {
    "fields": [],
    "extends": "ChatEventAction",
    "desc": "A new member joined the chat.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_event_member_joined.html"
  },
  "chatEventMemberLeft": {
    "fields": [],
    "extends": "ChatEventAction",
    "desc": "A member left the chat.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_event_member_left.html"
  },
  "chatEventInvitesToggled": {
    "fields": [
      {
        "type": "bool",
        "name": "anyone_can_invite",
        "desc": "New value of anyone_can_invite."
      }
    ],
    "extends": "ChatEventAction",
    "desc": "The anyone_can_invite setting of a supergroup chat was toggled.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_event_invites_toggled.html"
  },
  "chatEventMemberInvited": {
    "fields": [
      {
        "type": "number",
        "name": "user_id",
        "desc": "New member user identifier."
      },
      {
        "type": "ChatMemberStatus",
        "name": "status",
        "desc": "New member status."
      }
    ],
    "extends": "ChatEventAction",
    "desc": "A new chat member was invited.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_event_member_invited.html"
  },
  "chatEventMemberRestricted": {
    "fields": [
      {
        "type": "number",
        "name": "user_id",
        "desc": "Chat member user identifier."
      },
      {
        "type": "ChatMemberStatus",
        "name": "old_status",
        "desc": "Previous status of the chat member."
      },
      {
        "type": "ChatMemberStatus",
        "name": "new_status",
        "desc": "New status of the chat member."
      }
    ],
    "extends": "ChatEventAction",
    "desc": "A chat member was restricted/unrestricted or banned/unbanned, or the list of their restrictions has changed.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_event_member_restricted.html"
  },
  "chatEventMemberPromoted": {
    "fields": [
      {
        "type": "number",
        "name": "user_id",
        "desc": "Chat member user identifier."
      },
      {
        "type": "ChatMemberStatus",
        "name": "old_status",
        "desc": "Previous status of the chat member."
      },
      {
        "type": "ChatMemberStatus",
        "name": "new_status",
        "desc": "New status of the chat member."
      }
    ],
    "extends": "ChatEventAction",
    "desc": "A chat member has gained/lost administrator status, or the list of their administrator privileges has changed.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_event_member_promoted.html"
  },
  "chatEventMessageDeleted": {
    "fields": [
      {
        "type": "message",
        "name": "message",
        "desc": "Deleted message."
      }
    ],
    "extends": "ChatEventAction",
    "desc": "A message was deleted.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_event_message_deleted.html"
  },
  "chatEventMessageEdited": {
    "fields": [
      {
        "type": "message",
        "name": "old_message",
        "desc": "The original message before the edit."
      },
      {
        "type": "message",
        "name": "new_message",
        "desc": "The message after it was edited."
      }
    ],
    "extends": "ChatEventAction",
    "desc": "A message was edited.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_event_message_edited.html"
  },
  "chatEventMessageUnpinned": {
    "fields": [],
    "extends": "ChatEventAction",
    "desc": "A message was unpinned.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_event_message_unpinned.html"
  },
  "chatEventMessagePinned": {
    "fields": [
      {
        "type": "message",
        "name": "message",
        "desc": "Pinned message."
      }
    ],
    "extends": "ChatEventAction",
    "desc": "A message was pinned.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_event_message_pinned.html"
  },
  "chatEventPhotoChanged": {
    "fields": [
      {
        "type": "chatPhoto",
        "name": "old_photo",
        "desc": "Previous chat photo value; may be null."
      },
      {
        "type": "chatPhoto",
        "name": "new_photo",
        "desc": "New chat photo value; may be null."
      }
    ],
    "extends": "ChatEventAction",
    "desc": "The chat photo was changed.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_event_photo_changed.html"
  },
  "chatEventStickerSetChanged": {
    "fields": [
      {
        "type": "string",
        "name": "old_sticker_set_id",
        "desc": "Previous identifier of the chat sticker set; 0 if none."
      },
      {
        "type": "string",
        "name": "new_sticker_set_id",
        "desc": "New identifier of the chat sticker set; 0 if none."
      }
    ],
    "extends": "ChatEventAction",
    "desc": "The supergroup sticker set was changed.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_event_sticker_set_changed.html"
  },
  "chatEventTitleChanged": {
    "fields": [
      {
        "type": "string",
        "name": "old_title",
        "desc": "Previous chat title."
      },
      {
        "type": "string",
        "name": "new_title",
        "desc": "New chat title."
      }
    ],
    "extends": "ChatEventAction",
    "desc": "The chat title was changed.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_event_title_changed.html"
  },
  "chatEventUsernameChanged": {
    "fields": [
      {
        "type": "string",
        "name": "old_username",
        "desc": "Previous chat username."
      },
      {
        "type": "string",
        "name": "new_username",
        "desc": "New chat username."
      }
    ],
    "extends": "ChatEventAction",
    "desc": "The chat username was changed.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_event_username_changed.html"
  },
  "chatEvents": {
    "fields": [
      {
        "type": "chatEvent[]",
        "name": "events",
        "desc": "List of events."
      }
    ],
    "extends": "TDObject",
    "desc": "Contains a list of chat events.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_events.html"
  },
  "chatEventSignMessagesToggled": {
    "fields": [
      {
        "type": "bool",
        "name": "sign_messages",
        "desc": "New value of sign_messages."
      }
    ],
    "extends": "ChatEventAction",
    "desc": "The sign_messages setting of a channel was toggled.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_event_sign_messages_toggled.html"
  },
  "chatEventLogFilters": {
    "fields": [
      {
        "type": "bool",
        "name": "message_edits",
        "desc": "True, if message edits should be returned."
      },
      {
        "type": "bool",
        "name": "message_deletions",
        "desc": "True, if message deletions should be returned."
      },
      {
        "type": "bool",
        "name": "message_pins",
        "desc": "True, if pin/unpin events should be returned."
      },
      {
        "type": "bool",
        "name": "member_joins",
        "desc": "True, if members joining events should be returned."
      },
      {
        "type": "bool",
        "name": "member_leaves",
        "desc": "True, if members leaving events should be returned."
      },
      {
        "type": "bool",
        "name": "member_invites",
        "desc": "True, if invited member events should be returned."
      },
      {
        "type": "bool",
        "name": "member_promotions",
        "desc": "True, if member promotion/demotion events should be returned."
      },
      {
        "type": "bool",
        "name": "member_restrictions",
        "desc": "True, if member restricted/unrestricted/banned/unbanned events should be returned."
      },
      {
        "type": "bool",
        "name": "info_changes",
        "desc": "True, if changes in chat information should be returned."
      },
      {
        "type": "bool",
        "name": "setting_changes",
        "desc": "True, if changes in chat settings should be returned."
      }
    ],
    "extends": "TDObject",
    "desc": "Represents a set of filters used to obtain a chat event log.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_event_log_filters.html"
  },
  "chatMember": {
    "fields": [
      {
        "type": "number",
        "name": "user_id",
        "desc": "User identifier of the chat member."
      },
      {
        "type": "number",
        "name": "inviter_user_id",
        "desc": "Identifier of a user that invited/promoted/banned this member in the chat; 0 if unknown."
      },
      {
        "type": "number",
        "name": "joined_chat_date",
        "desc": "Point in time (Unix timestamp) when the user joined a chat."
      },
      {
        "type": "ChatMemberStatus",
        "name": "status",
        "desc": "Status of the member in the chat."
      },
      {
        "type": "botInfo",
        "name": "bot_info",
        "desc": "If the user is a bot, information about the bot; may be null. Can be null even for a bot if the bot is not a chat member."
      }
    ],
    "extends": "TDObject",
    "desc": "A user with information about joining/leaving a chat.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_member.html"
  },
  "chatMembers": {
    "fields": [
      {
        "type": "number",
        "name": "total_count",
        "desc": "Approximate total count of chat members found."
      },
      {
        "type": "chatMember[]",
        "name": "members",
        "desc": "A list of chat members."
      }
    ],
    "extends": "TDObject",
    "desc": "Contains a list of chat members.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_members.html"
  },
  "chatInviteLinkInfo": {
    "fields": [
      {
        "type": "string",
        "name": "chat_id",
        "desc": "Chat identifier of the invite link; 0 if the user is not a member of this chat."
      },
      {
        "type": "ChatType",
        "name": "type",
        "desc": "Contains information about the type of the chat."
      },
      {
        "type": "string",
        "name": "title",
        "desc": "Title of the chat."
      },
      {
        "type": "chatPhoto",
        "name": "photo",
        "desc": "Chat photo; may be null."
      },
      {
        "type": "number",
        "name": "member_count",
        "desc": "Number of members."
      },
      {
        "type": "number[]",
        "name": "member_user_ids",
        "desc": "User identifiers of some chat members that may be known to the current user."
      },
      {
        "type": "bool",
        "name": "is_public",
        "desc": "True, if the chat is a public supergroup or channel with a username."
      }
    ],
    "extends": "TDObject",
    "desc": "Contains information about a chat invite link.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_invite_link_info.html"
  },
  "ChatMemberStatus": {
    "fields": [],
    "extends": "TDObject",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_chat_member_status.html"
  },
  "chatMemberStatusBanned": {
    "fields": [
      {
        "type": "number",
        "name": "banned_until_date",
        "desc": "Point in time (Unix timestamp) when the user will be unbanned; 0 if never. If the user is banned for more than 366 days or for less than 30 seconds from the current time, the user is considered to be banned forever."
      }
    ],
    "extends": "ChatMemberStatus",
    "desc": "The user was banned (and hence is not a member of the chat). Implies the user can't return to the chat or view messages.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_member_status_banned.html"
  },
  "chatMemberStatusCreator": {
    "fields": [
      {
        "type": "bool",
        "name": "is_member",
        "desc": "True, if the user is a member of the chat."
      }
    ],
    "extends": "ChatMemberStatus",
    "desc": "The user is the creator of a chat and has all the administrator privileges.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_member_status_creator.html"
  },
  "chatMemberStatusAdministrator": {
    "fields": [
      {
        "type": "bool",
        "name": "can_be_edited",
        "desc": "True, if the current user can edit the administrator privileges for the called user."
      },
      {
        "type": "bool",
        "name": "can_change_info",
        "desc": "True, if the administrator can change the chat title, photo, and other settings."
      },
      {
        "type": "bool",
        "name": "can_post_messages",
        "desc": "True, if the administrator can create channel posts; applicable to channels only."
      },
      {
        "type": "bool",
        "name": "can_edit_messages",
        "desc": "True, if the administrator can edit messages of other users and pin messages; applicable to channels only."
      },
      {
        "type": "bool",
        "name": "can_delete_messages",
        "desc": "True, if the administrator can delete messages of other users."
      },
      {
        "type": "bool",
        "name": "can_invite_users",
        "desc": "True, if the administrator can invite new users to the chat."
      },
      {
        "type": "bool",
        "name": "can_restrict_members",
        "desc": "True, if the administrator can restrict, ban, or unban chat members."
      },
      {
        "type": "bool",
        "name": "can_pin_messages",
        "desc": "True, if the administrator can pin messages; applicable to supergroups only."
      },
      {
        "type": "bool",
        "name": "can_promote_members",
        "desc": "True, if the administrator can add new administrators with a subset of his own privileges or demote administrators that were directly or indirectly promoted by him."
      }
    ],
    "extends": "ChatMemberStatus",
    "desc": "The user is a member of a chat and has some additional privileges. In basic groups, administrators can edit and delete messages sent by others, add new members, and ban unprivileged members. In supergroups and channels, there are more detailed options for administrator privileges.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_member_status_administrator.html"
  },
  "chatMemberStatusLeft": {
    "fields": [],
    "extends": "ChatMemberStatus",
    "desc": "The user is not a chat member.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_member_status_left.html"
  },
  "chatMemberStatusMember": {
    "fields": [],
    "extends": "ChatMemberStatus",
    "desc": "The user is a member of a chat, without any additional privileges or restrictions.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_member_status_member.html"
  },
  "chatMemberStatusRestricted": {
    "fields": [
      {
        "type": "bool",
        "name": "is_member",
        "desc": "True, if the user is a member of the chat."
      },
      {
        "type": "number",
        "name": "restricted_until_date",
        "desc": "Point in time (Unix timestamp) when restrictions will be lifted from the user; 0 if never. If the user is restricted for more than 366 days or for less than 30 seconds from the current time, the user is considered to be restricted forever."
      },
      {
        "type": "bool",
        "name": "can_send_messages",
        "desc": "True, if the user can send text messages, contacts, locations, and venues."
      },
      {
        "type": "bool",
        "name": "can_send_media_messages",
        "desc": "True, if the user can send audio files, documents, photos, videos, video notes, and voice notes. Implies can_send_messages permissions."
      },
      {
        "type": "bool",
        "name": "can_send_other_messages",
        "desc": "True, if the user can send animations, games, and stickers and use inline bots. Implies can_send_media_messages permissions."
      },
      {
        "type": "bool",
        "name": "can_add_web_page_previews",
        "desc": "True, if the user may add a web page preview to his messages. Implies can_send_messages permissions."
      }
    ],
    "extends": "ChatMemberStatus",
    "desc": "The user is under certain restrictions in the chat. Not supported in basic groups and channels.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_member_status_restricted.html"
  },
  "ChatReportReason": {
    "fields": [],
    "extends": "TDObject",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_chat_report_reason.html"
  },
  "chatPhoto": {
    "fields": [
      {
        "type": "file",
        "name": "small",
        "desc": "A small (160x160) chat photo."
      },
      {
        "type": "file",
        "name": "big",
        "desc": "A big (640x640) chat photo."
      }
    ],
    "extends": "TDObject",
    "desc": "Describes the photo of a chat.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_photo.html"
  },
  "chatReportReasonCustom": {
    "fields": [
      {
        "type": "string",
        "name": "text",
        "desc": "Report text."
      }
    ],
    "extends": "ChatReportReason",
    "desc": "A custom reason provided by the user.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_report_reason_custom.html"
  },
  "chatReportReasonPornography": {
    "fields": [],
    "extends": "ChatReportReason",
    "desc": "The chat contains pornographic messages.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_report_reason_pornography.html"
  },
  "chatReportReasonViolence": {
    "fields": [],
    "extends": "ChatReportReason",
    "desc": "The chat promotes violence.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_report_reason_violence.html"
  },
  "chatReportReasonSpam": {
    "fields": [],
    "extends": "ChatReportReason",
    "desc": "The chat contains spam messages.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_report_reason_spam.html"
  },
  "chatReportSpamState": {
    "fields": [
      {
        "type": "bool",
        "name": "can_report_spam",
        "desc": "True, if a prompt with the \"Report spam\" action should be shown to the user."
      }
    ],
    "extends": "TDObject",
    "desc": "Contains information about the availability of the \"Report spam\" action for a chat.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_report_spam_state.html"
  },
  "chats": {
    "fields": [
      {
        "type": "string[]",
        "name": "chat_ids",
        "desc": "List of chat identifiers."
      }
    ],
    "extends": "TDObject",
    "desc": "Represents a list of chats.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chats.html"
  },
  "ChatType": {
    "fields": [],
    "extends": "TDObject",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_chat_type.html"
  },
  "chatTypeBasicGroup": {
    "fields": [
      {
        "type": "number",
        "name": "basic_group_id",
        "desc": "Basic group identifier."
      }
    ],
    "extends": "ChatType",
    "desc": "A basic group (i.e., a chat with 0-200 other users).",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_type_basic_group.html"
  },
  "chatTypePrivate": {
    "fields": [
      {
        "type": "number",
        "name": "user_id",
        "desc": "User identifier."
      }
    ],
    "extends": "ChatType",
    "desc": "An ordinary chat with a user.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_type_private.html"
  },
  "chatTypeSecret": {
    "fields": [
      {
        "type": "number",
        "name": "secret_chat_id",
        "desc": "Secret chat identifier."
      },
      {
        "type": "number",
        "name": "user_id",
        "desc": "User identifier of the secret chat peer."
      }
    ],
    "extends": "ChatType",
    "desc": "A secret chat with a user.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_type_secret.html"
  },
  "chatTypeSupergroup": {
    "fields": [
      {
        "type": "number",
        "name": "supergroup_id",
        "desc": "Supergroup or channel identifier."
      },
      {
        "type": "bool",
        "name": "is_channel",
        "desc": "True, if the supergroup is a channel."
      }
    ],
    "extends": "ChatType",
    "desc": "A supergroup (i.e. a chat with up to GetOption(\"supergroup_max_size\") other users), or channel (with unlimited members).",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_type_supergroup.html"
  },
  "ConnectionState": {
    "fields": [],
    "extends": "TDObject",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_connection_state.html"
  },
  "connectionStateConnecting": {
    "fields": [],
    "extends": "ConnectionState",
    "desc": "Currently establishing a connection to the Telegram servers.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1connection_state_connecting.html"
  },
  "connectionStateConnectingToProxy": {
    "fields": [],
    "extends": "ConnectionState",
    "desc": "Currently establishing a connection with a proxy server.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1connection_state_connecting_to_proxy.html"
  },
  "connectionStateReady": {
    "fields": [],
    "extends": "ConnectionState",
    "desc": "There is a working connection to the Telegram servers.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1connection_state_ready.html"
  },
  "connectionStateUpdating": {
    "fields": [],
    "extends": "ConnectionState",
    "desc": "Downloading data received while the client was offline.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1connection_state_updating.html"
  },
  "chatInviteLink": {
    "fields": [
      {
        "type": "string",
        "name": "invite_link",
        "desc": "Chat invite link."
      }
    ],
    "extends": "TDObject",
    "desc": "Contains a chat invite link.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_invite_link.html"
  },
  "connectionStateWaitingForNetwork": {
    "fields": [],
    "extends": "ConnectionState",
    "desc": "Currently waiting for the network to become available. Use SetNetworkType to change the available network type.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1connection_state_waiting_for_network.html"
  },
  "count": {
    "fields": [
      {
        "type": "number",
        "name": "count",
        "desc": "Count."
      }
    ],
    "extends": "TDObject",
    "desc": "Contains a counter.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1count.html"
  },
  "deviceTokenApplePush": {
    "fields": [
      {
        "type": "string",
        "name": "token",
        "desc": "Token, may be empty to de-register a device."
      }
    ],
    "extends": "DeviceToken",
    "desc": "A token for Apple Push Notification Service.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1device_token_apple_push.html"
  },
  "DeviceToken": {
    "fields": [],
    "extends": "TDObject",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_device_token.html"
  },
  "deviceTokenBlackberryPush": {
    "fields": [
      {
        "type": "string",
        "name": "token",
        "desc": "Token, may be empty to de-register a device."
      }
    ],
    "extends": "DeviceToken",
    "desc": "A token for Blackberry Push Service.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1device_token_blackberry_push.html"
  },
  "deviceTokenGoogleCloudMessaging": {
    "fields": [
      {
        "type": "string",
        "name": "token",
        "desc": "Token, may be empty to de-register a device."
      }
    ],
    "extends": "DeviceToken",
    "desc": "A token for Google Cloud Messaging.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1device_token_google_cloud_messaging.html"
  },
  "deviceTokenMicrosoftPush": {
    "fields": [
      {
        "type": "string",
        "name": "token",
        "desc": "Token, may be empty to de-register a device."
      }
    ],
    "extends": "DeviceToken",
    "desc": "A token for Microsoft Push Notification Service.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1device_token_microsoft_push.html"
  },
  "deviceTokenSimplePush": {
    "fields": [
      {
        "type": "string",
        "name": "token",
        "desc": "Token, may be empty to de-register a device."
      }
    ],
    "extends": "DeviceToken",
    "desc": "A token for Simple Push API.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1device_token_simple_push.html"
  },
  "deviceTokenUbuntuPush": {
    "fields": [
      {
        "type": "string",
        "name": "token",
        "desc": "Token, may be empty to de-register a device."
      }
    ],
    "extends": "DeviceToken",
    "desc": "A token for Ubuntu Push Client service.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1device_token_ubuntu_push.html"
  },
  "document": {
    "fields": [
      {
        "type": "string",
        "name": "file_name",
        "desc": "Original name of the file; as defined by the sender."
      },
      {
        "type": "string",
        "name": "mime_type",
        "desc": "MIME type of the file; as defined by the sender."
      },
      {
        "type": "photoSize",
        "name": "thumbnail",
        "desc": "Document thumbnail; as defined by the sender; may be null."
      },
      {
        "type": "file",
        "name": "document",
        "desc": "File containing the document."
      }
    ],
    "extends": "TDObject",
    "desc": "Describes a document of any type.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1document.html"
  },
  "draftMessage": {
    "fields": [
      {
        "type": "string",
        "name": "reply_to_message_id",
        "desc": "Identifier of the message to reply to; 0 if none."
      },
      {
        "type": "InputMessageContent",
        "name": "input_message_text",
        "desc": "Content of the message draft; this should always be of type <a class=\"el\" href=\"classtd_1_1td__api_1_1input_message_text.html\">inputMessageText</a>."
      }
    ],
    "extends": "TDObject",
    "desc": "Contains information about a message draft.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1draft_message.html"
  },
  "error": {
    "fields": [
      {
        "type": "number",
        "name": "code",
        "desc": "Error code; subject to future changes. If the error code is 406, the error message must not be processed in any way and must not be displayed to the user."
      },
      {
        "type": "string",
        "name": "message",
        "desc": "Error message; subject to future changes."
      }
    ],
    "extends": "TDObject",
    "desc": "An object of this type can be returned on every function call, in case of an error.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1error.html"
  },
  "file": {
    "fields": [
      {
        "type": "number",
        "name": "id",
        "desc": "Unique file identifier."
      },
      {
        "type": "number",
        "name": "size",
        "desc": "File size; 0 if unknown."
      },
      {
        "type": "number",
        "name": "expected_size",
        "desc": "Expected file size in case the exact file size is unknown, but an approximate size is known. Can be used to show download/upload progress."
      },
      {
        "type": "localFile",
        "name": "local",
        "desc": "Information about the local copy of the file."
      },
      {
        "type": "remoteFile",
        "name": "remote",
        "desc": "Information about the remote copy of the file."
      }
    ],
    "extends": "TDObject",
    "desc": "Represents a file.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1file.html"
  },
  "FileType": {
    "fields": [],
    "extends": "TDObject",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_file_type.html"
  },
  "fileTypeAnimation": {
    "fields": [],
    "extends": "FileType",
    "desc": "The file is an animation.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1file_type_animation.html"
  },
  "fileTypeAudio": {
    "fields": [],
    "extends": "FileType",
    "desc": "The file is an audio file.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1file_type_audio.html"
  },
  "fileTypeDocument": {
    "fields": [],
    "extends": "FileType",
    "desc": "The file is a document.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1file_type_document.html"
  },
  "fileTypeNone": {
    "fields": [],
    "extends": "FileType",
    "desc": "The data is not a file.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1file_type_none.html"
  },
  "fileTypePhoto": {
    "fields": [],
    "extends": "FileType",
    "desc": "The file is a photo.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1file_type_photo.html"
  },
  "fileTypeProfilePhoto": {
    "fields": [],
    "extends": "FileType",
    "desc": "The file is a profile photo.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1file_type_profile_photo.html"
  },
  "fileTypeSecret": {
    "fields": [],
    "extends": "FileType",
    "desc": "The file was sent to a secret chat (the file type is not known to the server).",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1file_type_secret.html"
  },
  "fileTypeSecretThumbnail": {
    "fields": [],
    "extends": "FileType",
    "desc": "The file is a thumbnail of a file from a secret chat.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1file_type_secret_thumbnail.html"
  },
  "fileTypeSticker": {
    "fields": [],
    "extends": "FileType",
    "desc": "The file is a sticker.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1file_type_sticker.html"
  },
  "fileTypeThumbnail": {
    "fields": [],
    "extends": "FileType",
    "desc": "The file is a thumbnail of another file.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1file_type_thumbnail.html"
  },
  "fileTypeUnknown": {
    "fields": [],
    "extends": "FileType",
    "desc": "The file type is not yet known.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1file_type_unknown.html"
  },
  "fileTypeVideo": {
    "fields": [],
    "extends": "FileType",
    "desc": "The file is a video.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1file_type_video.html"
  },
  "fileTypeVideoNote": {
    "fields": [],
    "extends": "FileType",
    "desc": "The file is a video note.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1file_type_video_note.html"
  },
  "fileTypeVoiceNote": {
    "fields": [],
    "extends": "FileType",
    "desc": "The file is a voice note.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1file_type_voice_note.html"
  },
  "fileTypeWallpaper": {
    "fields": [],
    "extends": "FileType",
    "desc": "The file is a wallpaper.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1file_type_wallpaper.html"
  },
  "foundMessages": {
    "fields": [
      {
        "type": "message[]",
        "name": "messages",
        "desc": "List of messages."
      },
      {
        "type": "string",
        "name": "next_from_search_id",
        "desc": "Value to pass as from_search_id to get more results."
      }
    ],
    "extends": "TDObject",
    "desc": "Contains a list of messages found by a search.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1found_messages.html"
  },
  "contact": {
    "fields": [
      {
        "type": "string",
        "name": "phone_number",
        "desc": "Phone number of the user."
      },
      {
        "type": "string",
        "name": "first_name",
        "desc": "First name of the user; 1-255 characters in length."
      },
      {
        "type": "string",
        "name": "last_name",
        "desc": "Last name of the user."
      },
      {
        "type": "number",
        "name": "user_id",
        "desc": "Identifier of the user, if known; otherwise 0."
      }
    ],
    "extends": "TDObject",
    "desc": "Describes a user contact.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1contact.html"
  },
  "customRequestResult": {
    "fields": [
      {
        "type": "string",
        "name": "result",
        "desc": "A JSON-serialized result."
      }
    ],
    "extends": "TDObject",
    "desc": "Contains the result of a custom request.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1custom_request_result.html"
  },
  "game": {
    "fields": [
      {
        "type": "string",
        "name": "id",
        "desc": "Game ID."
      },
      {
        "type": "string",
        "name": "short_name",
        "desc": "Game short name. To share a game use the URL <a href=\"https://t.me/{bot_username}?game={game_short_name}\">https://t.me/{bot_username}?game={game_short_name}</a>."
      },
      {
        "type": "string",
        "name": "title",
        "desc": "Game title."
      },
      {
        "type": "string",
        "name": "text",
        "desc": "Game text, usually containing scoreboards for a game."
      },
      {
        "type": "textEntity[]",
        "name": "text_entities",
        "desc": "Entities contained in the text."
      },
      {
        "type": "string",
        "name": "description",
        "desc": "Game description."
      },
      {
        "type": "photo",
        "name": "photo",
        "desc": "Game photo."
      },
      {
        "type": "animation",
        "name": "animation",
        "desc": "Game animation; may be null."
      }
    ],
    "extends": "TDObject",
    "desc": "Describes a game.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1game.html"
  },
  "importedContacts": {
    "fields": [
      {
        "type": "number[]",
        "name": "user_ids",
        "desc": "User identifiers of the imported contacts in the same order as they were specified in the request; 0 if the contact is not yet a registered user."
      },
      {
        "type": "number[]",
        "name": "importer_count",
        "desc": "The number of users that imported the corresponding contact; 0 for already registered users or if unavailable."
      }
    ],
    "extends": "TDObject",
    "desc": "Represents the result of an ImportContacts request.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1imported_contacts.html"
  },
  "gameHighScore": {
    "fields": [
      {
        "type": "number",
        "name": "position",
        "desc": "Position in the high score table."
      },
      {
        "type": "number",
        "name": "user_id",
        "desc": "User identifier."
      },
      {
        "type": "number",
        "name": "score",
        "desc": "User score."
      }
    ],
    "extends": "TDObject",
    "desc": "Contains one row of the game high score table.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1game_high_score.html"
  },
  "gameHighScores": {
    "fields": [
      {
        "type": "gameHighScore[]",
        "name": "scores",
        "desc": "A list of game high scores."
      }
    ],
    "extends": "TDObject",
    "desc": "Contains a list of game high scores.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1game_high_scores.html"
  },
  "hashtags": {
    "fields": [
      {
        "type": "string[]",
        "name": "hashtags",
        "desc": "A list of hashtags."
      }
    ],
    "extends": "TDObject",
    "desc": "Contains a list of hashtags.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1hashtags.html"
  },
  "inlineKeyboardButton": {
    "fields": [
      {
        "type": "string",
        "name": "text",
        "desc": "Text of the button."
      },
      {
        "type": "InlineKeyboardButtonType",
        "name": "type",
        "desc": "Type of the button."
      }
    ],
    "extends": "TDObject",
    "desc": "Represents a single button in an inline keyboard.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1inline_keyboard_button.html"
  },
  "inlineKeyboardButtonTypeBuy": {
    "fields": [],
    "extends": "InlineKeyboardButtonType",
    "desc": "A button to buy something. This button must be in the first column and row of the keyboard and can be attached only to a message with content of the type messageInvoice.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1inline_keyboard_button_type_buy.html"
  },
  "inlineKeyboardButtonTypeSwitchInline": {
    "fields": [
      {
        "type": "string",
        "name": "query",
        "desc": "Inline query to be sent to the bot."
      },
      {
        "type": "bool",
        "name": "in_current_chat",
        "desc": "True, if the inline query should be sent from the current chat."
      }
    ],
    "extends": "InlineKeyboardButtonType",
    "desc": "A button that forces an inline query to the bot to be inserted in the input field.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1inline_keyboard_button_type_switch_inline.html"
  },
  "inlineKeyboardButtonTypeCallback": {
    "fields": [
      {
        "type": "string",
        "name": "data",
        "desc": "Data to be sent to the bot via a callback query."
      }
    ],
    "extends": "InlineKeyboardButtonType",
    "desc": "A button that sends a special callback query to a bot.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1inline_keyboard_button_type_callback.html"
  },
  "inlineKeyboardButtonTypeCallbackGame": {
    "fields": [],
    "extends": "InlineKeyboardButtonType",
    "desc": "A button with a game that sends a special callback query to a bot. This button must be in the first column and row of the keyboard and can be attached only to a message with content of the type messageGame.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1inline_keyboard_button_type_callback_game.html"
  },
  "inlineKeyboardButtonTypeUrl": {
    "fields": [
      {
        "type": "string",
        "name": "url",
        "desc": "URL to open."
      }
    ],
    "extends": "InlineKeyboardButtonType",
    "desc": "A button that opens a specified URL.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1inline_keyboard_button_type_url.html"
  },
  "InlineKeyboardButtonType": {
    "fields": [],
    "extends": "TDObject",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_inline_keyboard_button_type.html"
  },
  "InlineQueryResult": {
    "fields": [],
    "extends": "TDObject",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_inline_query_result.html"
  },
  "inlineQueryResultAnimation": {
    "fields": [
      {
        "type": "string",
        "name": "id",
        "desc": "Unique identifier of the query result."
      },
      {
        "type": "animation",
        "name": "animation",
        "desc": "Animation file."
      },
      {
        "type": "string",
        "name": "title",
        "desc": "Animation title."
      }
    ],
    "extends": "InlineQueryResult",
    "desc": "Represents an animation file.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1inline_query_result_animation.html"
  },
  "inlineQueryResultAudio": {
    "fields": [
      {
        "type": "string",
        "name": "id",
        "desc": "Unique identifier of the query result."
      },
      {
        "type": "audio",
        "name": "audio",
        "desc": "Audio file."
      }
    ],
    "extends": "InlineQueryResult",
    "desc": "Represents an audio file.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1inline_query_result_audio.html"
  },
  "inlineQueryResultArticle": {
    "fields": [
      {
        "type": "string",
        "name": "id",
        "desc": "Unique identifier of the query result."
      },
      {
        "type": "string",
        "name": "url",
        "desc": "URL of the result, if it exists."
      },
      {
        "type": "bool",
        "name": "hide_url",
        "desc": "True, if the URL must be not shown."
      },
      {
        "type": "string",
        "name": "title",
        "desc": "Title of the result."
      },
      {
        "type": "string",
        "name": "description",
        "desc": "A short description of the result."
      },
      {
        "type": "photoSize",
        "name": "thumbnail",
        "desc": "Result thumbnail; may be null."
      }
    ],
    "extends": "InlineQueryResult",
    "desc": "Represents a link to an article or web page.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1inline_query_result_article.html"
  },
  "inlineQueryResultContact": {
    "fields": [
      {
        "type": "string",
        "name": "id",
        "desc": "Unique identifier of the query result."
      },
      {
        "type": "contact",
        "name": "contact",
        "desc": "A user contact."
      },
      {
        "type": "photoSize",
        "name": "thumbnail",
        "desc": "Result thumbnail; may be null."
      }
    ],
    "extends": "InlineQueryResult",
    "desc": "Represents a user contact.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1inline_query_result_contact.html"
  },
  "inlineQueryResultGame": {
    "fields": [
      {
        "type": "string",
        "name": "id",
        "desc": "Unique identifier of the query result."
      },
      {
        "type": "game",
        "name": "game",
        "desc": "Game result."
      }
    ],
    "extends": "InlineQueryResult",
    "desc": "Represents information about a game.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1inline_query_result_game.html"
  },
  "inlineQueryResultDocument": {
    "fields": [
      {
        "type": "string",
        "name": "id",
        "desc": "Unique identifier of the query result."
      },
      {
        "type": "document",
        "name": "document",
        "desc": "Document."
      },
      {
        "type": "string",
        "name": "title",
        "desc": "Document title."
      },
      {
        "type": "string",
        "name": "description",
        "desc": "Document description."
      }
    ],
    "extends": "InlineQueryResult",
    "desc": "Represents a document.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1inline_query_result_document.html"
  },
  "inlineQueryResultLocation": {
    "fields": [
      {
        "type": "string",
        "name": "id",
        "desc": "Unique identifier of the query result."
      },
      {
        "type": "location",
        "name": "location",
        "desc": "Location result."
      },
      {
        "type": "string",
        "name": "title",
        "desc": "Title of the result."
      },
      {
        "type": "photoSize",
        "name": "thumbnail",
        "desc": "Result thumbnail; may be null."
      }
    ],
    "extends": "InlineQueryResult",
    "desc": "Represents a point on the map.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1inline_query_result_location.html"
  },
  "inlineQueryResultPhoto": {
    "fields": [
      {
        "type": "string",
        "name": "id",
        "desc": "Unique identifier of the query result."
      },
      {
        "type": "photo",
        "name": "photo",
        "desc": "Photo."
      },
      {
        "type": "string",
        "name": "title",
        "desc": "Title of the result, if known."
      },
      {
        "type": "string",
        "name": "description",
        "desc": "A short description of the result, if known."
      }
    ],
    "extends": "InlineQueryResult",
    "desc": "Represents a photo.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1inline_query_result_photo.html"
  },
  "inlineQueryResultSticker": {
    "fields": [
      {
        "type": "string",
        "name": "id",
        "desc": "Unique identifier of the query result."
      },
      {
        "type": "sticker",
        "name": "sticker",
        "desc": "Sticker."
      }
    ],
    "extends": "InlineQueryResult",
    "desc": "Represents a sticker.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1inline_query_result_sticker.html"
  },
  "inlineQueryResultVenue": {
    "fields": [
      {
        "type": "string",
        "name": "id",
        "desc": "Unique identifier of the query result."
      },
      {
        "type": "venue",
        "name": "venue",
        "desc": "Venue result."
      },
      {
        "type": "photoSize",
        "name": "thumbnail",
        "desc": "Result thumbnail; may be null."
      }
    ],
    "extends": "InlineQueryResult",
    "desc": "Represents information about a venue.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1inline_query_result_venue.html"
  },
  "inlineQueryResultVideo": {
    "fields": [
      {
        "type": "string",
        "name": "id",
        "desc": "Unique identifier of the query result."
      },
      {
        "type": "video",
        "name": "video",
        "desc": "Video."
      },
      {
        "type": "string",
        "name": "title",
        "desc": "Title of the video."
      },
      {
        "type": "string",
        "name": "description",
        "desc": "Description of the video."
      }
    ],
    "extends": "InlineQueryResult",
    "desc": "Represents a video.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1inline_query_result_video.html"
  },
  "inlineQueryResultVoiceNote": {
    "fields": [
      {
        "type": "string",
        "name": "id",
        "desc": "Unique identifier of the query result."
      },
      {
        "type": "voiceNote",
        "name": "voice_note",
        "desc": "Voice note."
      },
      {
        "type": "string",
        "name": "title",
        "desc": "Title of the voice note."
      }
    ],
    "extends": "InlineQueryResult",
    "desc": "Represents a voice note.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1inline_query_result_voice_note.html"
  },
  "InputCredentials": {
    "fields": [],
    "extends": "TDObject",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_input_credentials.html"
  },
  "inlineQueryResults": {
    "fields": [
      {
        "type": "string",
        "name": "inline_query_id",
        "desc": "Unique identifier of the inline query."
      },
      {
        "type": "string",
        "name": "next_offset",
        "desc": "The offset for the next request. If empty, there are no more results."
      },
      {
        "type": "InlineQueryResult[]",
        "name": "results",
        "desc": "Results of the query."
      },
      {
        "type": "string",
        "name": "switch_pm_text",
        "desc": "If non-empty, this text should be shown on the button, which opens a private chat with the bot and sends the bot a start message with the switch_pm_parameter."
      },
      {
        "type": "string",
        "name": "switch_pm_parameter",
        "desc": "Parameter for the bot start message."
      }
    ],
    "extends": "TDObject",
    "desc": "Represents the results of the inline query. Use sendInlineQueryResultMessage to send the result of the query.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1inline_query_results.html"
  },
  "inputCredentialsAndroidPay": {
    "fields": [
      {
        "type": "string",
        "name": "data",
        "desc": "JSON-encoded data with the credential identifier."
      }
    ],
    "extends": "InputCredentials",
    "desc": "Applies if a user enters new credentials using Android Pay.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_credentials_android_pay.html"
  },
  "inputCredentialsApplePay": {
    "fields": [
      {
        "type": "string",
        "name": "data",
        "desc": "JSON-encoded data with the credential identifier."
      }
    ],
    "extends": "InputCredentials",
    "desc": "Applies if a user enters new credentials using Apple Pay.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_credentials_apple_pay.html"
  },
  "inputCredentialsNew": {
    "fields": [
      {
        "type": "string",
        "name": "data",
        "desc": "Contains JSON-encoded data with a credential identifier from the payment provider."
      },
      {
        "type": "bool",
        "name": "allow_save",
        "desc": "True, if the credential identifier can be saved on the server side."
      }
    ],
    "extends": "InputCredentials",
    "desc": "Applies if a user enters new credentials on a payment provider website.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_credentials_new.html"
  },
  "inputCredentialsSaved": {
    "fields": [
      {
        "type": "string",
        "name": "saved_credentials_id",
        "desc": "Identifier of the saved credentials."
      }
    ],
    "extends": "InputCredentials",
    "desc": "Applies if a user chooses some previously saved payment credentials. To use their previously saved credentials, the user must have a valid temporary password.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_credentials_saved.html"
  },
  "InputFile": {
    "fields": [],
    "extends": "TDObject",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_input_file.html"
  },
  "inputFileId": {
    "fields": [
      {
        "type": "number",
        "name": "id",
        "desc": "Unique file identifier."
      }
    ],
    "extends": "InputFile",
    "desc": "A file defined by its unique ID.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_file_id.html"
  },
  "inputFileLocal": {
    "fields": [
      {
        "type": "string",
        "name": "path",
        "desc": "Local path to the file."
      }
    ],
    "extends": "InputFile",
    "desc": "A file defined by a local path.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_file_local.html"
  },
  "inputFileRemote": {
    "fields": [
      {
        "type": "string",
        "name": "id",
        "desc": "Remote file identifier."
      }
    ],
    "extends": "InputFile",
    "desc": "A file defined by its remote ID.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_file_remote.html"
  },
  "InputInlineQueryResult": {
    "fields": [],
    "extends": "TDObject",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_input_inline_query_result.html"
  },
  "inputInlineQueryResultAnimatedGif": {
    "fields": [
      {
        "type": "string",
        "name": "id",
        "desc": "Unique identifier of the query result."
      },
      {
        "type": "string",
        "name": "title",
        "desc": "Title of the query result."
      },
      {
        "type": "string",
        "name": "thumbnail_url",
        "desc": "URL of the static result thumbnail (JPEG or GIF), if it exists."
      },
      {
        "type": "string",
        "name": "gif_url",
        "desc": "The URL of the GIF-file (file size must not exceed 1MB)."
      },
      {
        "type": "number",
        "name": "gif_duration",
        "desc": "Duration of the GIF, in seconds."
      },
      {
        "type": "number",
        "name": "gif_width",
        "desc": "Width of the GIF."
      },
      {
        "type": "number",
        "name": "gif_height",
        "desc": "Height of the GIF."
      },
      {
        "type": "ReplyMarkup",
        "name": "reply_markup",
        "desc": "The message reply markup. Must be of type <a class=\"el\" href=\"classtd_1_1td__api_1_1reply_markup_inline_keyboard.html\">replyMarkupInlineKeyboard</a> or null."
      },
      {
        "type": "InputMessageContent",
        "name": "input_message_content",
        "desc": "The content of the message to be sent. Must be one of the following types: InputMessageText, InputMessageAnimation, InputMessageLocation, InputMessageVenue or InputMessageContact."
      }
    ],
    "extends": "InputInlineQueryResult",
    "desc": "Represents a link to an animated GIF.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_inline_query_result_animated_gif.html"
  },
  "inputInlineQueryResultAnimatedMpeg4": {
    "fields": [
      {
        "type": "string",
        "name": "id",
        "desc": "Unique identifier of the query result."
      },
      {
        "type": "string",
        "name": "title",
        "desc": "Title of the result."
      },
      {
        "type": "string",
        "name": "thumbnail_url",
        "desc": "URL of the static result thumbnail (JPEG or GIF), if it exists."
      },
      {
        "type": "string",
        "name": "mpeg4_url",
        "desc": "The URL of the MPEG4-file (file size must not exceed 1MB)."
      },
      {
        "type": "number",
        "name": "mpeg4_duration",
        "desc": "Duration of the video, in seconds."
      },
      {
        "type": "number",
        "name": "mpeg4_width",
        "desc": "Width of the video."
      },
      {
        "type": "number",
        "name": "mpeg4_height",
        "desc": "Height of the video."
      },
      {
        "type": "ReplyMarkup",
        "name": "reply_markup",
        "desc": "The message reply markup. Must be of type <a class=\"el\" href=\"classtd_1_1td__api_1_1reply_markup_inline_keyboard.html\">replyMarkupInlineKeyboard</a> or null."
      },
      {
        "type": "InputMessageContent",
        "name": "input_message_content",
        "desc": "The content of the message to be sent. Must be one of the following types: InputMessageText, InputMessageAnimation, InputMessageLocation, InputMessageVenue or InputMessageContact."
      }
    ],
    "extends": "InputInlineQueryResult",
    "desc": "Represents a link to an animated (i.e. without sound) H.264/MPEG-4 AVC video.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_inline_query_result_animated_mpeg4.html"
  },
  "inputInlineQueryResultArticle": {
    "fields": [
      {
        "type": "string",
        "name": "id",
        "desc": "Unique identifier of the query result."
      },
      {
        "type": "string",
        "name": "url",
        "desc": "URL of the result, if it exists."
      },
      {
        "type": "bool",
        "name": "hide_url",
        "desc": "True, if the URL must be not shown."
      },
      {
        "type": "string",
        "name": "title",
        "desc": "Title of the result."
      },
      {
        "type": "string",
        "name": "description",
        "desc": "A short description of the result."
      },
      {
        "type": "string",
        "name": "thumbnail_url",
        "desc": "URL of the result thumbnail, if it exists."
      },
      {
        "type": "number",
        "name": "thumbnail_width",
        "desc": "Thumbnail width, if known."
      },
      {
        "type": "number",
        "name": "thumbnail_height",
        "desc": "Thumbnail height, if known."
      },
      {
        "type": "ReplyMarkup",
        "name": "reply_markup",
        "desc": "The message reply markup. Must be of type <a class=\"el\" href=\"classtd_1_1td__api_1_1reply_markup_inline_keyboard.html\">replyMarkupInlineKeyboard</a> or null."
      },
      {
        "type": "InputMessageContent",
        "name": "input_message_content",
        "desc": "The content of the message to be sent. Must be one of the following types: InputMessageText, InputMessageLocation, InputMessageVenue or InputMessageContact."
      }
    ],
    "extends": "InputInlineQueryResult",
    "desc": "Represents a link to an article or web page.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_inline_query_result_article.html"
  },
  "inputFileGenerated": {
    "fields": [
      {
        "type": "string",
        "name": "original_path",
        "desc": "Local path to a file from which the file is generated, may be empty if there is no such file."
      },
      {
        "type": "string",
        "name": "conversion",
        "desc": "String specifying the conversion applied to the original file; should be persistent across application restarts."
      },
      {
        "type": "number",
        "name": "expected_size",
        "desc": "Expected size of the generated file; 0 if unknown."
      }
    ],
    "extends": "InputFile",
    "desc": "A file generated by the client.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_file_generated.html"
  },
  "inputInlineQueryResultDocument": {
    "fields": [
      {
        "type": "string",
        "name": "id",
        "desc": "Unique identifier of the query result."
      },
      {
        "type": "string",
        "name": "title",
        "desc": "Title of the resulting file."
      },
      {
        "type": "string",
        "name": "description",
        "desc": "Short description of the result, if known."
      },
      {
        "type": "string",
        "name": "document_url",
        "desc": "URL of the file."
      },
      {
        "type": "string",
        "name": "mime_type",
        "desc": "MIME type of the file content; only \"application/pdf\" and \"application/zip\" are currently allowed."
      },
      {
        "type": "string",
        "name": "thumbnail_url",
        "desc": "The URL of the file thumbnail, if it exists."
      },
      {
        "type": "number",
        "name": "thumbnail_width",
        "desc": "Width of the thumbnail."
      },
      {
        "type": "number",
        "name": "thumbnail_height",
        "desc": "Height of the thumbnail."
      },
      {
        "type": "ReplyMarkup",
        "name": "reply_markup",
        "desc": "The message reply markup. Must be of type <a class=\"el\" href=\"classtd_1_1td__api_1_1reply_markup_inline_keyboard.html\">replyMarkupInlineKeyboard</a> or null."
      },
      {
        "type": "InputMessageContent",
        "name": "input_message_content",
        "desc": "The content of the message to be sent. Must be one of the following types: InputMessageText, InputMessageDocument, InputMessageLocation, InputMessageVenue or InputMessageContact."
      }
    ],
    "extends": "InputInlineQueryResult",
    "desc": "Represents a link to a file.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_inline_query_result_document.html"
  },
  "inputInlineQueryResultAudio": {
    "fields": [
      {
        "type": "string",
        "name": "id",
        "desc": "Unique identifier of the query result."
      },
      {
        "type": "string",
        "name": "title",
        "desc": "Title of the audio file."
      },
      {
        "type": "string",
        "name": "performer",
        "desc": "Performer of the audio file."
      },
      {
        "type": "string",
        "name": "audio_url",
        "desc": "The URL of the audio file."
      },
      {
        "type": "number",
        "name": "audio_duration",
        "desc": "Audio file duration, in seconds."
      },
      {
        "type": "ReplyMarkup",
        "name": "reply_markup",
        "desc": "The message reply markup. Must be of type <a class=\"el\" href=\"classtd_1_1td__api_1_1reply_markup_inline_keyboard.html\">replyMarkupInlineKeyboard</a> or null."
      },
      {
        "type": "InputMessageContent",
        "name": "input_message_content",
        "desc": "The content of the message to be sent. Must be one of the following types: InputMessageText, InputMessageAudio, InputMessageLocation, InputMessageVenue or InputMessageContact."
      }
    ],
    "extends": "InputInlineQueryResult",
    "desc": "Represents a link to an MP3 audio file.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_inline_query_result_audio.html"
  },
  "inputInlineQueryResultLocation": {
    "fields": [
      {
        "type": "string",
        "name": "id",
        "desc": "Unique identifier of the query result."
      },
      {
        "type": "location",
        "name": "location",
        "desc": "Location result."
      },
      {
        "type": "number",
        "name": "live_period",
        "desc": "Amount of time relative to the message sent time until the location can be updated, in seconds."
      },
      {
        "type": "string",
        "name": "title",
        "desc": "Title of the result."
      },
      {
        "type": "string",
        "name": "thumbnail_url",
        "desc": "URL of the result thumbnail, if it exists."
      },
      {
        "type": "number",
        "name": "thumbnail_width",
        "desc": "Thumbnail width, if known."
      },
      {
        "type": "number",
        "name": "thumbnail_height",
        "desc": "Thumbnail height, if known."
      },
      {
        "type": "ReplyMarkup",
        "name": "reply_markup",
        "desc": "The message reply markup. Must be of type <a class=\"el\" href=\"classtd_1_1td__api_1_1reply_markup_inline_keyboard.html\">replyMarkupInlineKeyboard</a> or null."
      },
      {
        "type": "InputMessageContent",
        "name": "input_message_content",
        "desc": "The content of the message to be sent. Must be one of the following types: InputMessageText, InputMessageLocation, InputMessageVenue or InputMessageContact."
      }
    ],
    "extends": "InputInlineQueryResult",
    "desc": "Represents a point on the map.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_inline_query_result_location.html"
  },
  "inputInlineQueryResultContact": {
    "fields": [
      {
        "type": "string",
        "name": "id",
        "desc": "Unique identifier of the query result."
      },
      {
        "type": "contact",
        "name": "contact",
        "desc": "User contact."
      },
      {
        "type": "string",
        "name": "thumbnail_url",
        "desc": "URL of the result thumbnail, if it exists."
      },
      {
        "type": "number",
        "name": "thumbnail_width",
        "desc": "Thumbnail width, if known."
      },
      {
        "type": "number",
        "name": "thumbnail_height",
        "desc": "Thumbnail height, if known."
      },
      {
        "type": "ReplyMarkup",
        "name": "reply_markup",
        "desc": "The message reply markup. Must be of type <a class=\"el\" href=\"classtd_1_1td__api_1_1reply_markup_inline_keyboard.html\">replyMarkupInlineKeyboard</a> or null."
      },
      {
        "type": "InputMessageContent",
        "name": "input_message_content",
        "desc": "The content of the message to be sent. Must be one of the following types: InputMessageText, InputMessageLocation, InputMessageVenue or InputMessageContact."
      }
    ],
    "extends": "InputInlineQueryResult",
    "desc": "Represents a user contact.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_inline_query_result_contact.html"
  },
  "inputInlineQueryResultPhoto": {
    "fields": [
      {
        "type": "string",
        "name": "id",
        "desc": "Unique identifier of the query result."
      },
      {
        "type": "string",
        "name": "title",
        "desc": "Title of the result, if known."
      },
      {
        "type": "string",
        "name": "description",
        "desc": "A short description of the result, if known."
      },
      {
        "type": "string",
        "name": "thumbnail_url",
        "desc": "URL of the photo thumbnail, if it exists."
      },
      {
        "type": "string",
        "name": "photo_url",
        "desc": "The URL of the JPEG photo (photo size must not exceed 5MB)."
      },
      {
        "type": "number",
        "name": "photo_width",
        "desc": "Width of the photo."
      },
      {
        "type": "number",
        "name": "photo_height",
        "desc": "Height of the photo."
      },
      {
        "type": "ReplyMarkup",
        "name": "reply_markup",
        "desc": "The message reply markup. Must be of type <a class=\"el\" href=\"classtd_1_1td__api_1_1reply_markup_inline_keyboard.html\">replyMarkupInlineKeyboard</a> or null."
      },
      {
        "type": "InputMessageContent",
        "name": "input_message_content",
        "desc": "The content of the message to be sent. Must be one of the following types: InputMessageText, InputMessagePhoto, InputMessageLocation, InputMessageVenue or InputMessageContact."
      }
    ],
    "extends": "InputInlineQueryResult",
    "desc": "Represents link to a JPEG image.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_inline_query_result_photo.html"
  },
  "inputInlineQueryResultSticker": {
    "fields": [
      {
        "type": "string",
        "name": "id",
        "desc": "Unique identifier of the query result."
      },
      {
        "type": "string",
        "name": "thumbnail_url",
        "desc": "URL of the sticker thumbnail, if it exists."
      },
      {
        "type": "string",
        "name": "sticker_url",
        "desc": "The URL of the WEBP sticker (sticker file size must not exceed 5MB)."
      },
      {
        "type": "number",
        "name": "sticker_width",
        "desc": "Width of the sticker."
      },
      {
        "type": "number",
        "name": "sticker_height",
        "desc": "Height of the sticker."
      },
      {
        "type": "ReplyMarkup",
        "name": "reply_markup",
        "desc": "The message reply markup. Must be of type <a class=\"el\" href=\"classtd_1_1td__api_1_1reply_markup_inline_keyboard.html\">replyMarkupInlineKeyboard</a> or null."
      },
      {
        "type": "InputMessageContent",
        "name": "input_message_content",
        "desc": "The content of the message to be sent. Must be one of the following types: InputMessageText, <a class=\"el\" href=\"classtd_1_1td__api_1_1input_message_sticker.html\">inputMessageSticker</a>, InputMessageLocation, InputMessageVenue or InputMessageContact."
      }
    ],
    "extends": "InputInlineQueryResult",
    "desc": "Represents a link to a WEBP sticker.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_inline_query_result_sticker.html"
  },
  "inputInlineQueryResultVenue": {
    "fields": [
      {
        "type": "string",
        "name": "id",
        "desc": "Unique identifier of the query result."
      },
      {
        "type": "venue",
        "name": "venue",
        "desc": "Venue result."
      },
      {
        "type": "string",
        "name": "thumbnail_url",
        "desc": "URL of the result thumbnail, if it exists."
      },
      {
        "type": "number",
        "name": "thumbnail_width",
        "desc": "Thumbnail width, if known."
      },
      {
        "type": "number",
        "name": "thumbnail_height",
        "desc": "Thumbnail height, if known."
      },
      {
        "type": "ReplyMarkup",
        "name": "reply_markup",
        "desc": "The message reply markup. Must be of type <a class=\"el\" href=\"classtd_1_1td__api_1_1reply_markup_inline_keyboard.html\">replyMarkupInlineKeyboard</a> or null."
      },
      {
        "type": "InputMessageContent",
        "name": "input_message_content",
        "desc": "The content of the message to be sent. Must be one of the following types: InputMessageText, InputMessageLocation, InputMessageVenue or InputMessageContact."
      }
    ],
    "extends": "InputInlineQueryResult",
    "desc": "Represents information about a venue.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_inline_query_result_venue.html"
  },
  "inputInlineQueryResultGame": {
    "fields": [
      {
        "type": "string",
        "name": "id",
        "desc": "Unique identifier of the query result."
      },
      {
        "type": "string",
        "name": "game_short_name",
        "desc": "Short name of the game."
      },
      {
        "type": "ReplyMarkup",
        "name": "reply_markup",
        "desc": "Message reply markup. Must be of type <a class=\"el\" href=\"classtd_1_1td__api_1_1reply_markup_inline_keyboard.html\">replyMarkupInlineKeyboard</a> or null."
      }
    ],
    "extends": "InputInlineQueryResult",
    "desc": "Represents a game.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_inline_query_result_game.html"
  },
  "inputInlineQueryResultVoiceNote": {
    "fields": [
      {
        "type": "string",
        "name": "id",
        "desc": "Unique identifier of the query result."
      },
      {
        "type": "string",
        "name": "title",
        "desc": "Title of the voice note."
      },
      {
        "type": "string",
        "name": "voice_note_url",
        "desc": "The URL of the voice note file."
      },
      {
        "type": "number",
        "name": "voice_note_duration",
        "desc": "Duration of the voice note, in seconds."
      },
      {
        "type": "ReplyMarkup",
        "name": "reply_markup",
        "desc": "The message reply markup. Must be of type <a class=\"el\" href=\"classtd_1_1td__api_1_1reply_markup_inline_keyboard.html\">replyMarkupInlineKeyboard</a> or null."
      },
      {
        "type": "InputMessageContent",
        "name": "input_message_content",
        "desc": "The content of the message to be sent. Must be one of the following types: InputMessageText, InputMessageVoiceNote, InputMessageLocation, InputMessageVenue or InputMessageContact."
      }
    ],
    "extends": "InputInlineQueryResult",
    "desc": "Represents a link to an opus-encoded audio file within an OGG container, single channel audio.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_inline_query_result_voice_note.html"
  },
  "inputMessageAudio": {
    "fields": [
      {
        "type": "InputFile",
        "name": "audio",
        "desc": "Audio file to be sent."
      },
      {
        "type": "inputThumbnail",
        "name": "album_cover_thumbnail",
        "desc": "Thumbnail of the cover for the album, if available."
      },
      {
        "type": "number",
        "name": "duration",
        "desc": "Duration of the audio, in seconds; may be replaced by the server."
      },
      {
        "type": "string",
        "name": "title",
        "desc": "Title of the audio; 0-64 characters; may be replaced by the server."
      },
      {
        "type": "string",
        "name": "performer",
        "desc": "Performer of the audio; 0-64 characters, may be replaced by the server."
      },
      {
        "type": "string",
        "name": "caption",
        "desc": "Audio caption; 0-200 characters."
      }
    ],
    "extends": "InputMessageContent",
    "desc": "An audio message.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_message_audio.html"
  },
  "InputMessageContent": {
    "fields": [],
    "extends": "TDObject",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_input_message_content.html"
  },
  "inputMessageContact": {
    "fields": [
      {
        "type": "contact",
        "name": "contact",
        "desc": "Contact to send."
      }
    ],
    "extends": "InputMessageContent",
    "desc": "A message containing a user contact.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_message_contact.html"
  },
  "inputMessageDocument": {
    "fields": [
      {
        "type": "InputFile",
        "name": "document",
        "desc": "Document to be sent."
      },
      {
        "type": "inputThumbnail",
        "name": "thumbnail",
        "desc": "Document thumbnail, if available."
      },
      {
        "type": "string",
        "name": "caption",
        "desc": "Document caption; 0-200 characters."
      }
    ],
    "extends": "InputMessageContent",
    "desc": "A document message (general file).",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_message_document.html"
  },
  "inputMessageForwarded": {
    "fields": [
      {
        "type": "string",
        "name": "from_chat_id",
        "desc": "Identifier for the chat this forwarded message came from."
      },
      {
        "type": "string",
        "name": "message_id",
        "desc": "Identifier of the message to forward."
      },
      {
        "type": "bool",
        "name": "in_game_share",
        "desc": "True, if a game message should be shared within a launched game; applies only to game messages."
      }
    ],
    "extends": "InputMessageContent",
    "desc": "A forwarded message.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_message_forwarded.html"
  },
  "inputMessageGame": {
    "fields": [
      {
        "type": "number",
        "name": "bot_user_id",
        "desc": "User identifier of the bot that owns the game."
      },
      {
        "type": "string",
        "name": "game_short_name",
        "desc": "Short name of the game."
      }
    ],
    "extends": "InputMessageContent",
    "desc": "A message with a game; not supported for channels or secret chats.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_message_game.html"
  },
  "inputInlineQueryResultVideo": {
    "fields": [
      {
        "type": "string",
        "name": "id",
        "desc": "Unique identifier of the query result."
      },
      {
        "type": "string",
        "name": "title",
        "desc": "Title of the result."
      },
      {
        "type": "string",
        "name": "description",
        "desc": "A short description of the result, if known."
      },
      {
        "type": "string",
        "name": "thumbnail_url",
        "desc": "The URL of the video thumbnail (JPEG), if it exists."
      },
      {
        "type": "string",
        "name": "video_url",
        "desc": "URL of the embedded video player or video file."
      },
      {
        "type": "string",
        "name": "mime_type",
        "desc": "MIME type of the content of the video URL, only \"text/html\" or \"video/mp4\" are currently supported."
      },
      {
        "type": "number",
        "name": "video_width",
        "desc": "Width of the video."
      },
      {
        "type": "number",
        "name": "video_height",
        "desc": "Height of the video."
      },
      {
        "type": "number",
        "name": "video_duration",
        "desc": "Video duration, in seconds."
      },
      {
        "type": "ReplyMarkup",
        "name": "reply_markup",
        "desc": "The message reply markup. Must be of type <a class=\"el\" href=\"classtd_1_1td__api_1_1reply_markup_inline_keyboard.html\">replyMarkupInlineKeyboard</a> or null."
      },
      {
        "type": "InputMessageContent",
        "name": "input_message_content",
        "desc": "The content of the message to be sent. Must be one of the following types: InputMessageText, InputMessageVideo, InputMessageLocation, InputMessageVenue or InputMessageContact."
      }
    ],
    "extends": "InputInlineQueryResult",
    "desc": "Represents a link to a page containing an embedded video player or a video file.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_inline_query_result_video.html"
  },
  "inputMessageAnimation": {
    "fields": [
      {
        "type": "InputFile",
        "name": "animation",
        "desc": "Animation file to be sent."
      },
      {
        "type": "inputThumbnail",
        "name": "thumbnail",
        "desc": "Animation thumbnail, if available."
      },
      {
        "type": "number",
        "name": "duration",
        "desc": "Duration of the animation, in seconds."
      },
      {
        "type": "number",
        "name": "width",
        "desc": "Width of the animation; may be replaced by the server."
      },
      {
        "type": "number",
        "name": "height",
        "desc": "Height of the animation; may be replaced by the server."
      },
      {
        "type": "string",
        "name": "caption",
        "desc": "Animation caption; 0-200 characters."
      }
    ],
    "extends": "InputMessageContent",
    "desc": "An animation message (GIF-style).",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_message_animation.html"
  },
  "inputMessageLocation": {
    "fields": [
      {
        "type": "location",
        "name": "location",
        "desc": "Location to be sent."
      },
      {
        "type": "number",
        "name": "live_period",
        "desc": "Period for which the location can be updated, in seconds; should bebetween 60 and 86400 for a live location and 0 otherwise."
      }
    ],
    "extends": "InputMessageContent",
    "desc": "A message with a location.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_message_location.html"
  },
  "inputMessagePhoto": {
    "fields": [
      {
        "type": "InputFile",
        "name": "photo",
        "desc": "Photo to send."
      },
      {
        "type": "inputThumbnail",
        "name": "thumbnail",
        "desc": "Photo thumbnail to be sent, this is sent to the other party in secret chats only."
      },
      {
        "type": "number[]",
        "name": "added_sticker_file_ids",
        "desc": "File identifiers of the stickers added to the photo, if applicable."
      },
      {
        "type": "number",
        "name": "width",
        "desc": "Photo width."
      },
      {
        "type": "number",
        "name": "height",
        "desc": "Photo height."
      },
      {
        "type": "string",
        "name": "caption",
        "desc": "Photo caption; 0-200 characters."
      },
      {
        "type": "number",
        "name": "ttl",
        "desc": "Photo TTL (Time To Live), in seconds (0-60). A non-zero TTL can be specified only in private chats."
      }
    ],
    "extends": "InputMessageContent",
    "desc": "A photo message.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_message_photo.html"
  },
  "inputMessageText": {
    "fields": [
      {
        "type": "string",
        "name": "text",
        "desc": "Text to be sent."
      },
      {
        "type": "bool",
        "name": "disable_web_page_preview",
        "desc": "True, if rich web page previews for URLs in the message text should be disabled."
      },
      {
        "type": "bool",
        "name": "clear_draft",
        "desc": "True, if a chat message draft should be deleted."
      },
      {
        "type": "textEntity[]",
        "name": "entities",
        "desc": "Bold, Italic, Code, Pre, PreCode and TextUrl entities contained in the text. Can't be used with a non-null parse_mode."
      },
      {
        "type": "TextParseMode",
        "name": "parse_mode",
        "desc": "Text parse mode; may be null. Can't be used in combination with enitities."
      }
    ],
    "extends": "InputMessageContent",
    "desc": "A text message.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_message_text.html"
  },
  "inputMessageSticker": {
    "fields": [
      {
        "type": "InputFile",
        "name": "sticker",
        "desc": "Sticker to be sent."
      },
      {
        "type": "inputThumbnail",
        "name": "thumbnail",
        "desc": "Sticker thumbnail, if available."
      },
      {
        "type": "number",
        "name": "width",
        "desc": "Sticker width."
      },
      {
        "type": "number",
        "name": "height",
        "desc": "Sticker height."
      }
    ],
    "extends": "InputMessageContent",
    "desc": "A sticker message.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_message_sticker.html"
  },
  "inputMessageInvoice": {
    "fields": [
      {
        "type": "invoice",
        "name": "invoice",
        "desc": "Invoice."
      },
      {
        "type": "string",
        "name": "title",
        "desc": "Product title; 1-32 characters."
      },
      {
        "type": "string",
        "name": "description",
        "desc": "Product description; 0-255 characters."
      },
      {
        "type": "string",
        "name": "photo_url",
        "desc": "Product photo URL; optional."
      },
      {
        "type": "number",
        "name": "photo_size",
        "desc": "Product photo size."
      },
      {
        "type": "number",
        "name": "photo_width",
        "desc": "Product photo width."
      },
      {
        "type": "number",
        "name": "photo_height",
        "desc": "Product photo height."
      },
      {
        "type": "string",
        "name": "payload",
        "desc": "The invoice payload."
      },
      {
        "type": "string",
        "name": "provider_token",
        "desc": "Payment provider token."
      },
      {
        "type": "string",
        "name": "provider_data",
        "desc": "JSON-encoded data about the invoice, which will be shared with the payment provider."
      },
      {
        "type": "string",
        "name": "start_parameter",
        "desc": "Unique invoice bot start_parameter for the generation of this invoice."
      }
    ],
    "extends": "InputMessageContent",
    "desc": "A message with an invoice; can be used only by bots and only in private chats.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_message_invoice.html"
  },
  "inputMessageVenue": {
    "fields": [
      {
        "type": "venue",
        "name": "venue",
        "desc": "Venue to send."
      }
    ],
    "extends": "InputMessageContent",
    "desc": "A message with information about a venue.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_message_venue.html"
  },
  "inputMessageVideo": {
    "fields": [
      {
        "type": "InputFile",
        "name": "video",
        "desc": "Video to be sent."
      },
      {
        "type": "inputThumbnail",
        "name": "thumbnail",
        "desc": "Video thumbnail, if available."
      },
      {
        "type": "number[]",
        "name": "added_sticker_file_ids",
        "desc": "File identifiers of the stickers added to the video, if applicable."
      },
      {
        "type": "number",
        "name": "duration",
        "desc": "Duration of the video, in seconds."
      },
      {
        "type": "number",
        "name": "width",
        "desc": "Video width."
      },
      {
        "type": "number",
        "name": "height",
        "desc": "Video height."
      },
      {
        "type": "string",
        "name": "caption",
        "desc": "Video caption; 0-200 characters."
      },
      {
        "type": "number",
        "name": "ttl",
        "desc": "Video TTL (Time To Live), in seconds (0-60). A non-zero TTL can be specified only in private chats."
      }
    ],
    "extends": "InputMessageContent",
    "desc": "A video message.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_message_video.html"
  },
  "inputMessageVoiceNote": {
    "fields": [
      {
        "type": "InputFile",
        "name": "voice_note",
        "desc": "Voice note to be sent."
      },
      {
        "type": "number",
        "name": "duration",
        "desc": "Duration of the voice note, in seconds."
      },
      {
        "type": "string",
        "name": "waveform",
        "desc": "Waveform representation of the voice note, in 5-bit format."
      },
      {
        "type": "string",
        "name": "caption",
        "desc": "Voice note caption; 0-200 characters."
      }
    ],
    "extends": "InputMessageContent",
    "desc": "A voice note message.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_message_voice_note.html"
  },
  "invoice": {
    "fields": [
      {
        "type": "string",
        "name": "currency",
        "desc": "ISO 4217 currency code."
      },
      {
        "type": "labeledPricePart[]",
        "name": "price_parts",
        "desc": "A list of objects used to calculate the total price of the product."
      },
      {
        "type": "bool",
        "name": "is_test",
        "desc": "True, if the payment is a test payment."
      },
      {
        "type": "bool",
        "name": "need_name",
        "desc": "True, if the user's name is needed for payment."
      },
      {
        "type": "bool",
        "name": "need_phone_number",
        "desc": "True, if the user's phone number is needed for payment."
      },
      {
        "type": "bool",
        "name": "need_email_address",
        "desc": "True, if the user's email address is needed for payment."
      },
      {
        "type": "bool",
        "name": "need_shipping_address",
        "desc": "True, if the user's shipping address is needed for payment."
      },
      {
        "type": "bool",
        "name": "send_phone_number_to_provider",
        "desc": "True, if the user's phone number will be sent to the provider."
      },
      {
        "type": "bool",
        "name": "send_email_address_to_provider",
        "desc": "True, if the user's email address will be sent to the provider."
      },
      {
        "type": "bool",
        "name": "is_flexible",
        "desc": "True, if the total price depends on the shipping method."
      }
    ],
    "extends": "TDObject",
    "desc": "Product invoice.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1invoice.html"
  },
  "inputSticker": {
    "fields": [
      {
        "type": "InputFile",
        "name": "png_sticker",
        "desc": "PNG image with the sticker; must be up to 512 kB in size and fit in a 512x512 square."
      },
      {
        "type": "string",
        "name": "emojis",
        "desc": "Emoji corresponding to the sticker."
      },
      {
        "type": "maskPosition",
        "name": "mask_position",
        "desc": "For masks, position where the mask should be placed; may be null."
      }
    ],
    "extends": "TDObject",
    "desc": "Describes a sticker that should be added to a sticker set.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_sticker.html"
  },
  "keyboardButton": {
    "fields": [
      {
        "type": "string",
        "name": "text",
        "desc": "Text of the button."
      },
      {
        "type": "KeyboardButtonType",
        "name": "type",
        "desc": "Type of the button."
      }
    ],
    "extends": "TDObject",
    "desc": "Represents a single button in a bot keyboard.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1keyboard_button.html"
  },
  "KeyboardButtonType": {
    "fields": [],
    "extends": "TDObject",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_keyboard_button_type.html"
  },
  "keyboardButtonTypeRequestLocation": {
    "fields": [],
    "extends": "KeyboardButtonType",
    "desc": "A button that sends the user's location when pressed; available only in private chats.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1keyboard_button_type_request_location.html"
  },
  "keyboardButtonTypeRequestPhoneNumber": {
    "fields": [],
    "extends": "KeyboardButtonType",
    "desc": "A button that sends the user's phone number when pressed; available only in private chats.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1keyboard_button_type_request_phone_number.html"
  },
  "keyboardButtonTypeText": {
    "fields": [],
    "extends": "KeyboardButtonType",
    "desc": "A simple button, with text that should be sent when the button is pressed.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1keyboard_button_type_text.html"
  },
  "labeledPricePart": {
    "fields": [
      {
        "type": "string",
        "name": "label",
        "desc": "Label for this portion of the product price."
      },
      {
        "type": "string",
        "name": "amount",
        "desc": "Currency amount in minimal quantity of the currency."
      }
    ],
    "extends": "TDObject",
    "desc": "Portion of the price of a product (e.g., \"delivery cost\", \"tax amount\").",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1labeled_price_part.html"
  },
  "LinkState": {
    "fields": [],
    "extends": "TDObject",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_link_state.html"
  },
  "linkStateIsContact": {
    "fields": [],
    "extends": "LinkState",
    "desc": "The phone number of user A has been saved to the contacts list of user B.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1link_state_is_contact.html"
  },
  "linkStateKnowsPhoneNumber": {
    "fields": [],
    "extends": "LinkState",
    "desc": "The phone number of user A is known but that number has not been saved to the contacts list of user B.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1link_state_knows_phone_number.html"
  },
  "linkStateNone": {
    "fields": [],
    "extends": "LinkState",
    "desc": "The phone number of user A is not known to user B.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1link_state_none.html"
  },
  "localFile": {
    "fields": [
      {
        "type": "string",
        "name": "path",
        "desc": "Local path to the locally available file part; may be empty."
      },
      {
        "type": "bool",
        "name": "can_be_downloaded",
        "desc": "True, if it is possible to try to download or generate the file."
      },
      {
        "type": "bool",
        "name": "can_be_deleted",
        "desc": "True, if the file can be deleted."
      },
      {
        "type": "bool",
        "name": "is_downloading_active",
        "desc": "True, if the file is currently being downloaded (or a local copy is being generated by some other means)."
      },
      {
        "type": "bool",
        "name": "is_downloading_completed",
        "desc": "True, if the local copy is fully available."
      },
      {
        "type": "number",
        "name": "downloaded_prefix_size",
        "desc": "If is_downloading_completed is false, then only some prefix of the file is ready to be read. downloaded_prefix_size is the size of that prefix."
      },
      {
        "type": "number",
        "name": "downloaded_size",
        "desc": "Total downloaded file bytes. Should be used only for calculating download progress. The actual file size may be bigger, and some parts of it may contain garbage."
      }
    ],
    "extends": "TDObject",
    "desc": "Represents a local file.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1local_file.html"
  },
  "location": {
    "fields": [
      {
        "type": "double",
        "name": "latitude",
        "desc": "Latitude of the location in degrees; as defined by the sender."
      },
      {
        "type": "double",
        "name": "longitude",
        "desc": "Longitude of the location, in degrees; as defined by the sender."
      }
    ],
    "extends": "TDObject",
    "desc": "Describes a location on planet Earth.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1location.html"
  },
  "MaskPoint": {
    "fields": [],
    "extends": "TDObject",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_mask_point.html"
  },
  "maskPointEyes": {
    "fields": [],
    "extends": "MaskPoint",
    "desc": "A mask should be placed relatively to the eyes.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1mask_point_eyes.html"
  },
  "maskPointChin": {
    "fields": [],
    "extends": "MaskPoint",
    "desc": "A mask should be placed relatively to the chin.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1mask_point_chin.html"
  },
  "maskPointForehead": {
    "fields": [],
    "extends": "MaskPoint",
    "desc": "A mask should be placed relatively to the forehead.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1mask_point_forehead.html"
  },
  "maskPointMouth": {
    "fields": [],
    "extends": "MaskPoint",
    "desc": "A mask should be placed relatively to the mouth.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1mask_point_mouth.html"
  },
  "maskPosition": {
    "fields": [
      {
        "type": "MaskPoint",
        "name": "point",
        "desc": "Part of the face, relative to which the mask should be placed."
      },
      {
        "type": "double",
        "name": "x_shift",
        "desc": "Shift by X-axis measured in widths of the mask scaled to the face size, from left to right. (For example, -1.0 will place the mask just to the left of the default mask position.)"
      },
      {
        "type": "double",
        "name": "y_shift",
        "desc": "Shift by Y-axis measured in heights of the mask scaled to the face size, from top to bottom. (For example, 1.0 will place the mask just below the default mask position.)"
      },
      {
        "type": "double",
        "name": "scale",
        "desc": "Mask scaling coefficient. (For example, 2.0 means a doubled size.)"
      }
    ],
    "extends": "TDObject",
    "desc": "Position on a photo where a mask should be placed.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1mask_position.html"
  },
  "MessageContent": {
    "fields": [],
    "extends": "TDObject",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_message_content.html"
  },
  "message": {
    "fields": [
      {
        "type": "string",
        "name": "id",
        "desc": "Unique message identifier."
      },
      {
        "type": "number",
        "name": "sender_user_id",
        "desc": "Identifier of the user who sent the message; 0 if unknown. It is unknown for channel posts."
      },
      {
        "type": "string",
        "name": "chat_id",
        "desc": "Chat identifier."
      },
      {
        "type": "MessageSendingState",
        "name": "sending_state",
        "desc": "Information about the sending state of the message; may be null."
      },
      {
        "type": "bool",
        "name": "is_outgoing",
        "desc": "True, if the message is outgoing."
      },
      {
        "type": "bool",
        "name": "can_be_edited",
        "desc": "True, if the message can be edited."
      },
      {
        "type": "bool",
        "name": "can_be_forwarded",
        "desc": "True, if the message can be forwarded."
      },
      {
        "type": "bool",
        "name": "can_be_deleted_only_for_self",
        "desc": "True, if the message can be deleted only for the current user while other users will continue to see it."
      },
      {
        "type": "bool",
        "name": "can_be_deleted_for_all_users",
        "desc": "True, if the message can be deleted for all users."
      },
      {
        "type": "bool",
        "name": "is_channel_post",
        "desc": "True, if the message is a channel post. All messages to channels are channel posts, all other messages are not channel posts."
      },
      {
        "type": "bool",
        "name": "contains_unread_mention",
        "desc": "True, if the message contains an unread mention for the current user."
      },
      {
        "type": "number",
        "name": "date",
        "desc": "Point in time (Unix timestamp) when the message was sent."
      },
      {
        "type": "number",
        "name": "edit_date",
        "desc": "Point in time (Unix timestamp) when the message was last edited."
      },
      {
        "type": "MessageForwardInfo",
        "name": "forward_info",
        "desc": "Information about the initial message sender; may be null."
      },
      {
        "type": "string",
        "name": "reply_to_message_id",
        "desc": "If non-zero, the identifier of the message this message is replying to; can be the identifier of a deleted message."
      },
      {
        "type": "number",
        "name": "ttl",
        "desc": "For self-destructing messages, the message's TTL (Time To Live), in seconds; 0 if none. TDLib will send <a class=\"el\" href=\"classtd_1_1td__api_1_1update_delete_messages.html\">updateDeleteMessages</a> or <a class=\"el\" href=\"classtd_1_1td__api_1_1update_message_content.html\">updateMessageContent</a> once the TTL expires."
      },
      {
        "type": "double",
        "name": "ttl_expires_in",
        "desc": "Time left before the message expires, in seconds."
      },
      {
        "type": "number",
        "name": "via_bot_user_id",
        "desc": "If non-zero, the user identifier of the bot through which this message was sent."
      },
      {
        "type": "string",
        "name": "author_signature",
        "desc": "For channel posts, optional author signature."
      },
      {
        "type": "number",
        "name": "views",
        "desc": "Number of times this message was viewed."
      },
      {
        "type": "string",
        "name": "media_album_id",
        "desc": "Unique identifier of an album this message belongs to. Only photos and videos can be grouped together in albums."
      },
      {
        "type": "MessageContent",
        "name": "content",
        "desc": "Content of the message."
      },
      {
        "type": "ReplyMarkup",
        "name": "reply_markup",
        "desc": "Reply markup for the message; may be null."
      }
    ],
    "extends": "TDObject",
    "desc": "Describes a message.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message.html"
  },
  "messageAnimation": {
    "fields": [
      {
        "type": "animation",
        "name": "animation",
        "desc": "Message content."
      },
      {
        "type": "string",
        "name": "caption",
        "desc": "Animation caption."
      }
    ],
    "extends": "MessageContent",
    "desc": "An animation message (GIF-style).",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_animation.html"
  },
  "messageAudio": {
    "fields": [
      {
        "type": "audio",
        "name": "audio",
        "desc": "Message content."
      },
      {
        "type": "string",
        "name": "caption",
        "desc": "Audio caption."
      }
    ],
    "extends": "MessageContent",
    "desc": "An audio message.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_audio.html"
  },
  "messageBasicGroupChatCreate": {
    "fields": [
      {
        "type": "string",
        "name": "title",
        "desc": "Title of the basic group."
      },
      {
        "type": "number[]",
        "name": "member_user_ids",
        "desc": "User identifiers of members in the basic group."
      }
    ],
    "extends": "MessageContent",
    "desc": "A newly created basic group.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_basic_group_chat_create.html"
  },
  "messageCall": {
    "fields": [
      {
        "type": "CallDiscardReason",
        "name": "discard_reason",
        "desc": "Reason why the call was discarded."
      },
      {
        "type": "number",
        "name": "duration",
        "desc": "Call duration, in seconds."
      }
    ],
    "extends": "MessageContent",
    "desc": "A message with information about an ended call.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_call.html"
  },
  "messageChatAddMembers": {
    "fields": [
      {
        "type": "number[]",
        "name": "member_user_ids",
        "desc": "User identifiers of the new members."
      }
    ],
    "extends": "MessageContent",
    "desc": "New chat members were added.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_chat_add_members.html"
  },
  "messageChatChangePhoto": {
    "fields": [
      {
        "type": "photo",
        "name": "photo",
        "desc": "New chat photo."
      }
    ],
    "extends": "MessageContent",
    "desc": "An updated chat photo.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_chat_change_photo.html"
  },
  "messageChatChangeTitle": {
    "fields": [
      {
        "type": "string",
        "name": "title",
        "desc": "New chat title."
      }
    ],
    "extends": "MessageContent",
    "desc": "An updated chat title.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_chat_change_title.html"
  },
  "messageChatDeleteMember": {
    "fields": [
      {
        "type": "number",
        "name": "user_id",
        "desc": "User identifier of the deleted chat member."
      }
    ],
    "extends": "MessageContent",
    "desc": "A chat member was deleted.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_chat_delete_member.html"
  },
  "messageChatDeletePhoto": {
    "fields": [],
    "extends": "MessageContent",
    "desc": "A deleted chat photo.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_chat_delete_photo.html"
  },
  "messageChatJoinByLink": {
    "fields": [],
    "extends": "MessageContent",
    "desc": "A new member joined the chat by invite link.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_chat_join_by_link.html"
  },
  "messageChatSetTtl": {
    "fields": [
      {
        "type": "number",
        "name": "ttl",
        "desc": "New TTL."
      }
    ],
    "extends": "MessageContent",
    "desc": "The TTL (Time To Live) setting messages in a secret chat has been changed.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_chat_set_ttl.html"
  },
  "messageChatUpgradeFrom": {
    "fields": [
      {
        "type": "string",
        "name": "title",
        "desc": "Title of the newly created supergroup."
      },
      {
        "type": "number",
        "name": "basic_group_id",
        "desc": "The identifier of the original basic group."
      }
    ],
    "extends": "MessageContent",
    "desc": "A supergroup has been created from a basic group.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_chat_upgrade_from.html"
  },
  "messageChatUpgradeTo": {
    "fields": [
      {
        "type": "number",
        "name": "supergroup_id",
        "desc": "Identifier of the supergroup to which the basic group was upgraded."
      }
    ],
    "extends": "MessageContent",
    "desc": "A basic group was upgraded to a supergroup and was deactivated as the result.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_chat_upgrade_to.html"
  },
  "messageContact": {
    "fields": [
      {
        "type": "contact",
        "name": "contact",
        "desc": "Message content."
      }
    ],
    "extends": "MessageContent",
    "desc": "A message with a user contact.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_contact.html"
  },
  "messageContactRegistered": {
    "fields": [],
    "extends": "MessageContent",
    "desc": "A contact has registered with Telegram.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_contact_registered.html"
  },
  "messageCustomServiceAction": {
    "fields": [
      {
        "type": "string",
        "name": "text",
        "desc": "Message text to be shown in the chat."
      }
    ],
    "extends": "MessageContent",
    "desc": "A non-standard action has happened in the chat.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_custom_service_action.html"
  },
  "messageDocument": {
    "fields": [
      {
        "type": "document",
        "name": "document",
        "desc": "Message content."
      },
      {
        "type": "string",
        "name": "caption",
        "desc": "Document caption."
      }
    ],
    "extends": "MessageContent",
    "desc": "A document message (general file).",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_document.html"
  },
  "messageExpiredPhoto": {
    "fields": [],
    "extends": "MessageContent",
    "desc": "An expired photo message (self-destructed after TTL has elapsed).",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_expired_photo.html"
  },
  "messageExpiredVideo": {
    "fields": [],
    "extends": "MessageContent",
    "desc": "An expired video message (self-destructed after TTL has elapsed).",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_expired_video.html"
  },
  "messageGame": {
    "fields": [
      {
        "type": "game",
        "name": "game",
        "desc": "Game."
      }
    ],
    "extends": "MessageContent",
    "desc": "A message with a game.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_game.html"
  },
  "messageGameScore": {
    "fields": [
      {
        "type": "string",
        "name": "game_message_id",
        "desc": "Identifier of the message with the game, can be an identifier of a deleted message."
      },
      {
        "type": "string",
        "name": "game_id",
        "desc": "Identifier of the game, may be different from the games presented in the message with the game."
      },
      {
        "type": "number",
        "name": "score",
        "desc": "New score."
      }
    ],
    "extends": "MessageContent",
    "desc": "A new high score was achieved in a game.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_game_score.html"
  },
  "messageInvoice": {
    "fields": [
      {
        "type": "string",
        "name": "title",
        "desc": "Product title."
      },
      {
        "type": "string",
        "name": "description",
        "desc": "Product description."
      },
      {
        "type": "photo",
        "name": "photo",
        "desc": "Product photo; may be null."
      },
      {
        "type": "string",
        "name": "currency",
        "desc": "Currency for the product price."
      },
      {
        "type": "string",
        "name": "total_amount",
        "desc": "Product total price in the minimal quantity of the currency."
      },
      {
        "type": "string",
        "name": "start_parameter",
        "desc": "Unique invoice bot start_parameter. To share an invoice use the URL <a href=\"https://t.me/{bot_username}?start={start_parameter}\">https://t.me/{bot_username}?start={start_parameter}</a>."
      },
      {
        "type": "bool",
        "name": "is_test",
        "desc": "True, if the invoice is a test invoice."
      },
      {
        "type": "bool",
        "name": "need_shipping_address",
        "desc": "True, if the shipping address should be specified."
      },
      {
        "type": "string",
        "name": "receipt_message_id",
        "desc": "The identifier of the message with the receipt, after the product has been purchased."
      }
    ],
    "extends": "MessageContent",
    "desc": "A message with an invoice from a bot.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_invoice.html"
  },
  "messageLocation": {
    "fields": [
      {
        "type": "location",
        "name": "location",
        "desc": "Message content."
      },
      {
        "type": "number",
        "name": "live_period",
        "desc": "Time relative to the message sent date until which the location can be updated, in seconds."
      }
    ],
    "extends": "MessageContent",
    "desc": "A message with a location.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_location.html"
  },
  "messagePaymentSuccessful": {
    "fields": [
      {
        "type": "string",
        "name": "invoice_message_id",
        "desc": "Identifier of the message with the corresponding invoice; can be an identifier of a deleted message."
      },
      {
        "type": "string",
        "name": "currency",
        "desc": "Currency for the price of the product."
      },
      {
        "type": "string",
        "name": "total_amount",
        "desc": "Total price for the product, in the minimal quantity of the currency."
      }
    ],
    "extends": "MessageContent",
    "desc": "A payment has been completed.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_payment_successful.html"
  },
  "messagePaymentSuccessfulBot": {
    "fields": [
      {
        "type": "string",
        "name": "invoice_message_id",
        "desc": "Identifier of the message with the corresponding invoice; can be an identifier of a deleted message."
      },
      {
        "type": "string",
        "name": "currency",
        "desc": "Currency for price of the product."
      },
      {
        "type": "string",
        "name": "total_amount",
        "desc": "Total price for the product, in the minimal quantity of the currency."
      },
      {
        "type": "string",
        "name": "invoice_payload",
        "desc": "Invoice payload."
      },
      {
        "type": "string",
        "name": "shipping_option_id",
        "desc": "Identifier of the shipping option chosen by the user, may be empty if not applicable."
      },
      {
        "type": "orderInfo",
        "name": "order_info",
        "desc": "Information about the order; may be null."
      },
      {
        "type": "string",
        "name": "telegram_payment_charge_id",
        "desc": "Telegram payment identifier."
      },
      {
        "type": "string",
        "name": "provider_payment_charge_id",
        "desc": "Provider payment identifier."
      }
    ],
    "extends": "MessageContent",
    "desc": "A payment has been completed; for bots only.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_payment_successful_bot.html"
  },
  "messagePhoto": {
    "fields": [
      {
        "type": "photo",
        "name": "photo",
        "desc": "Message content."
      },
      {
        "type": "string",
        "name": "caption",
        "desc": "Photo caption."
      }
    ],
    "extends": "MessageContent",
    "desc": "A photo message.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_photo.html"
  },
  "messagePinMessage": {
    "fields": [
      {
        "type": "string",
        "name": "message_id",
        "desc": "Identifier of the pinned message, can be an identifier of a deleted message."
      }
    ],
    "extends": "MessageContent",
    "desc": "A message has been pinned.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_pin_message.html"
  },
  "messageScreenshotTaken": {
    "fields": [],
    "extends": "MessageContent",
    "desc": "A screenshot of a message in the chat has been taken.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_screenshot_taken.html"
  },
  "messageSticker": {
    "fields": [
      {
        "type": "sticker",
        "name": "sticker",
        "desc": "Message content."
      }
    ],
    "extends": "MessageContent",
    "desc": "A sticker message.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_sticker.html"
  },
  "messageSupergroupChatCreate": {
    "fields": [
      {
        "type": "string",
        "name": "title",
        "desc": "Title of the supergroup or channel."
      }
    ],
    "extends": "MessageContent",
    "desc": "A newly created supergroup or channel.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_supergroup_chat_create.html"
  },
  "messageText": {
    "fields": [
      {
        "type": "string",
        "name": "text",
        "desc": "Text of the message."
      },
      {
        "type": "textEntity[]",
        "name": "entities",
        "desc": "Entities contained in the text."
      },
      {
        "type": "webPage",
        "name": "web_page",
        "desc": "A preview of the web page that's mentioned in the text; may be null."
      }
    ],
    "extends": "MessageContent",
    "desc": "A text message.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_text.html"
  },
  "messageUnsupported": {
    "fields": [],
    "extends": "MessageContent",
    "desc": "Message content that is not supported by the client.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_unsupported.html"
  },
  "messageVenue": {
    "fields": [
      {
        "type": "venue",
        "name": "venue",
        "desc": "Message content."
      }
    ],
    "extends": "MessageContent",
    "desc": "A message with information about a venue.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_venue.html"
  },
  "messageVideo": {
    "fields": [
      {
        "type": "video",
        "name": "video",
        "desc": "Message content."
      },
      {
        "type": "string",
        "name": "caption",
        "desc": "Video caption."
      }
    ],
    "extends": "MessageContent",
    "desc": "A video message.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_video.html"
  },
  "messageVideoNote": {
    "fields": [
      {
        "type": "videoNote",
        "name": "video_note",
        "desc": "Message content."
      },
      {
        "type": "bool",
        "name": "is_viewed",
        "desc": "True, if at least one of the recipients has viewed the video note."
      }
    ],
    "extends": "MessageContent",
    "desc": "A video note message.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_video_note.html"
  },
  "inputMessageVideoNote": {
    "fields": [
      {
        "type": "InputFile",
        "name": "video_note",
        "desc": "Video note to be sent."
      },
      {
        "type": "inputThumbnail",
        "name": "thumbnail",
        "desc": "Video thumbnail, if available."
      },
      {
        "type": "number",
        "name": "duration",
        "desc": "Duration of the video, in seconds."
      },
      {
        "type": "number",
        "name": "length",
        "desc": "Video width and height; must be positive and not greater than 640."
      }
    ],
    "extends": "InputMessageContent",
    "desc": "A video note message.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_message_video_note.html"
  },
  "inputThumbnail": {
    "fields": [
      {
        "type": "InputFile",
        "name": "thumbnail",
        "desc": "Thumbnail file to send. Sending thumbnails by file_id is currently not supported."
      },
      {
        "type": "number",
        "name": "width",
        "desc": "Thumbnail width, usually shouldn't exceed 90. Use 0 if unknown."
      },
      {
        "type": "number",
        "name": "height",
        "desc": "Thumbnail height, usually shouldn't exceed 90. Use 0 if unknown."
      }
    ],
    "extends": "TDObject",
    "desc": "A thumbnail to be sent along with a file; should be in JPEG or WEBP format for stickers, and less than 200 kB in size.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_thumbnail.html"
  },
  "messageVoiceNote": {
    "fields": [
      {
        "type": "voiceNote",
        "name": "voice_note",
        "desc": "Message content."
      },
      {
        "type": "string",
        "name": "caption",
        "desc": "Voice note caption."
      },
      {
        "type": "bool",
        "name": "is_listened",
        "desc": "True, if at least one of the recipients has listened to the voice note."
      }
    ],
    "extends": "MessageContent",
    "desc": "A voice note message.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_voice_note.html"
  },
  "messageForwardedPost": {
    "fields": [
      {
        "type": "string",
        "name": "chat_id",
        "desc": "Identifier of the chat from which the message was forwarded."
      },
      {
        "type": "string",
        "name": "author_signature",
        "desc": "Post author signature."
      },
      {
        "type": "number",
        "name": "date",
        "desc": "Point in time (Unix timestamp) when the message was originally sent."
      },
      {
        "type": "string",
        "name": "message_id",
        "desc": "Message identifier of the original message from which the new message was forwarded; 0 if unknown."
      },
      {
        "type": "string",
        "name": "forwarded_from_chat_id",
        "desc": "For messages forwarded to the chat with the current user (saved messages), the identifier of the chat from which the message was forwarded; 0 if unknown."
      },
      {
        "type": "string",
        "name": "forwarded_from_message_id",
        "desc": "For messages forwarded to the chat with the current user (saved messages), the identifier of the original message from which the new message was forwarded; 0 if unknown."
      }
    ],
    "extends": "MessageForwardInfo",
    "desc": "The message was originally a post in a channel.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_forwarded_post.html"
  },
  "messages": {
    "fields": [
      {
        "type": "number",
        "name": "total_count",
        "desc": "Approximate total count of messages found."
      },
      {
        "type": "message[]",
        "name": "messages",
        "desc": "List of messages; messages may be null."
      }
    ],
    "extends": "TDObject",
    "desc": "Contains a list of messages.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1messages.html"
  },
  "MessageSendingState": {
    "fields": [],
    "extends": "TDObject",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_message_sending_state.html"
  },
  "messageSendingStateFailed": {
    "fields": [],
    "extends": "MessageSendingState",
    "desc": "The message failed to be sent.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_sending_state_failed.html"
  },
  "messageSendingStatePending": {
    "fields": [],
    "extends": "MessageSendingState",
    "desc": "The message is being sent now, but has not yet been delivered to the server.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_sending_state_pending.html"
  },
  "messageForwardedFromUser": {
    "fields": [
      {
        "type": "number",
        "name": "sender_user_id",
        "desc": "Identifier of the user that originally sent this message."
      },
      {
        "type": "number",
        "name": "date",
        "desc": "Point in time (Unix timestamp) when the message was originally sent."
      },
      {
        "type": "string",
        "name": "forwarded_from_chat_id",
        "desc": "For messages forwarded to the chat with the current user (saved messages), the identifier of the chat from which the message was forwarded; 0 if unknown."
      },
      {
        "type": "string",
        "name": "forwarded_from_message_id",
        "desc": "For messages forwarded to the chat with the current user (saved messages) the identifier of the original message from which the new message was forwarded; 0 if unknown."
      }
    ],
    "extends": "MessageForwardInfo",
    "desc": "The message was originally written by a known user.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_forwarded_from_user.html"
  },
  "NetworkStatisticsEntry": {
    "fields": [],
    "extends": "TDObject",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_network_statistics_entry.html"
  },
  "networkStatistics": {
    "fields": [
      {
        "type": "number",
        "name": "since_date",
        "desc": "Point in time (Unix timestamp) when the app began collecting statistics."
      },
      {
        "type": "NetworkStatisticsEntry[]",
        "name": "entries",
        "desc": "Network statistics entries."
      }
    ],
    "extends": "TDObject",
    "desc": "A full list of available network statistic entries.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1network_statistics.html"
  },
  "networkStatisticsEntryFile": {
    "fields": [
      {
        "type": "FileType",
        "name": "file_type",
        "desc": "Type of the file the data is part of."
      },
      {
        "type": "NetworkType",
        "name": "network_type",
        "desc": "Type of the network the data was sent through. Call <a class=\"el\" href=\"classtd_1_1td__api_1_1set_network_type.html\">setNetworkType</a> to maintain the actual network type."
      },
      {
        "type": "string",
        "name": "sent_bytes",
        "desc": "Total number of bytes sent."
      },
      {
        "type": "string",
        "name": "received_bytes",
        "desc": "Total number of bytes received."
      }
    ],
    "extends": "NetworkStatisticsEntry",
    "desc": "Contains information about the total amount of data that was used to send and receive files.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1network_statistics_entry_file.html"
  },
  "networkStatisticsEntryCall": {
    "fields": [
      {
        "type": "NetworkType",
        "name": "network_type",
        "desc": "Type of the network the data was sent through. Call <a class=\"el\" href=\"classtd_1_1td__api_1_1set_network_type.html\">setNetworkType</a> to maintain the actual network type."
      },
      {
        "type": "string",
        "name": "sent_bytes",
        "desc": "Total number of bytes sent."
      },
      {
        "type": "string",
        "name": "received_bytes",
        "desc": "Total number of bytes received."
      },
      {
        "type": "double",
        "name": "duration",
        "desc": "Total call duration, in seconds."
      }
    ],
    "extends": "NetworkStatisticsEntry",
    "desc": "Contains information about the total amount of data that was used for calls.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1network_statistics_entry_call.html"
  },
  "NetworkType": {
    "fields": [],
    "extends": "TDObject",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_network_type.html"
  },
  "MessageForwardInfo": {
    "fields": [],
    "extends": "TDObject",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_message_forward_info.html"
  },
  "networkTypeMobile": {
    "fields": [],
    "extends": "NetworkType",
    "desc": "A mobile network.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1network_type_mobile.html"
  },
  "networkTypeMobileRoaming": {
    "fields": [],
    "extends": "NetworkType",
    "desc": "A mobile roaming network.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1network_type_mobile_roaming.html"
  },
  "networkTypeNone": {
    "fields": [],
    "extends": "NetworkType",
    "desc": "The network is not available.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1network_type_none.html"
  },
  "networkTypeOther": {
    "fields": [],
    "extends": "NetworkType",
    "desc": "A different network type (e.g., Ethernet network).",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1network_type_other.html"
  },
  "networkTypeWiFi": {
    "fields": [],
    "extends": "NetworkType",
    "desc": "A Wi-Fi network.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1network_type_wi_fi.html"
  },
  "NotificationSettingsScope": {
    "fields": [],
    "extends": "TDObject",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_notification_settings_scope.html"
  },
  "notificationSettings": {
    "fields": [
      {
        "type": "number",
        "name": "mute_for",
        "desc": "Time left before notifications will be unmuted, in seconds."
      },
      {
        "type": "string",
        "name": "sound",
        "desc": "An audio file name for notification sounds; only applies to iOS applications."
      },
      {
        "type": "bool",
        "name": "show_preview",
        "desc": "True, if message content should be displayed in notifications."
      }
    ],
    "extends": "TDObject",
    "desc": "Contains information about notification settings for a chat or several chats.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1notification_settings.html"
  },
  "notificationSettingsScopeBasicGroupChats": {
    "fields": [],
    "extends": "NotificationSettingsScope",
    "desc": "Notification settings applied to all basic groups and channels. (Supergroups have no common settings.)",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1notification_settings_scope_basic_group_chats.html"
  },
  "notificationSettingsScopeAllChats": {
    "fields": [],
    "extends": "NotificationSettingsScope",
    "desc": "Notification settings applied to all chats.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1notification_settings_scope_all_chats.html"
  },
  "notificationSettingsScopeChat": {
    "fields": [
      {
        "type": "string",
        "name": "chat_id",
        "desc": "Chat identifier."
      }
    ],
    "extends": "NotificationSettingsScope",
    "desc": "Notification settings applied to a particular chat.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1notification_settings_scope_chat.html"
  },
  "notificationSettingsScopePrivateChats": {
    "fields": [],
    "extends": "NotificationSettingsScope",
    "desc": "Notification settings applied to all private chats.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1notification_settings_scope_private_chats.html"
  },
  "OptionValue": {
    "fields": [],
    "extends": "TDObject",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_option_value.html"
  },
  "ok": {
    "fields": [],
    "extends": "TDObject",
    "desc": "An object of this type is returned on a successful function call for certain functions.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1ok.html"
  },
  "optionValueEmpty": {
    "fields": [],
    "extends": "OptionValue",
    "desc": "An unknown option or an option which has a default value.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1option_value_empty.html"
  },
  "optionValueBoolean": {
    "fields": [
      {
        "type": "bool",
        "name": "value",
        "desc": "The value of the option."
      }
    ],
    "extends": "OptionValue",
    "desc": "Boolean option.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1option_value_boolean.html"
  },
  "optionValueInteger": {
    "fields": [
      {
        "type": "number",
        "name": "value",
        "desc": "The value of the option."
      }
    ],
    "extends": "OptionValue",
    "desc": "An integer option.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1option_value_integer.html"
  },
  "PageBlock": {
    "fields": [],
    "extends": "TDObject",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_page_block.html"
  },
  "optionValueString": {
    "fields": [
      {
        "type": "string",
        "name": "value",
        "desc": "The value of the option."
      }
    ],
    "extends": "OptionValue",
    "desc": "A string option.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1option_value_string.html"
  },
  "pageBlockAnchor": {
    "fields": [
      {
        "type": "string",
        "name": "name",
        "desc": "Name of the anchor."
      }
    ],
    "extends": "PageBlock",
    "desc": "An invisible anchor on a page, which can be used in a URL to open the page from the specified anchor.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1page_block_anchor.html"
  },
  "orderInfo": {
    "fields": [
      {
        "type": "string",
        "name": "name",
        "desc": "Name of the user."
      },
      {
        "type": "string",
        "name": "phone_number",
        "desc": "Phone number of the user."
      },
      {
        "type": "string",
        "name": "email_address",
        "desc": "Email address of the user."
      },
      {
        "type": "shippingAddress",
        "name": "shipping_address",
        "desc": "Shipping address for this order; may be null."
      }
    ],
    "extends": "TDObject",
    "desc": "Order information.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1order_info.html"
  },
  "pageBlockAnimation": {
    "fields": [
      {
        "type": "animation",
        "name": "animation",
        "desc": "Animation file; may be null."
      },
      {
        "type": "RichText",
        "name": "caption",
        "desc": "Animation caption."
      },
      {
        "type": "bool",
        "name": "need_autoplay",
        "desc": "True, if the animation should be played automatically."
      }
    ],
    "extends": "PageBlock",
    "desc": "An animation.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1page_block_animation.html"
  },
  "pageBlockBlockQuote": {
    "fields": [
      {
        "type": "RichText",
        "name": "text",
        "desc": "Quote text."
      },
      {
        "type": "RichText",
        "name": "caption",
        "desc": "Quote caption."
      }
    ],
    "extends": "PageBlock",
    "desc": "A block quote.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1page_block_block_quote.html"
  },
  "pageBlockCollage": {
    "fields": [
      {
        "type": "PageBlock[]",
        "name": "page_blocks",
        "desc": "Collage item contents."
      },
      {
        "type": "RichText",
        "name": "caption",
        "desc": "Block caption."
      }
    ],
    "extends": "PageBlock",
    "desc": "A collage.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1page_block_collage.html"
  },
  "pageBlockCover": {
    "fields": [
      {
        "type": "PageBlock",
        "name": "cover",
        "desc": "Cover."
      }
    ],
    "extends": "PageBlock",
    "desc": "A page cover.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1page_block_cover.html"
  },
  "pageBlockAudio": {
    "fields": [
      {
        "type": "audio",
        "name": "audio",
        "desc": "Audio file; may be null."
      },
      {
        "type": "RichText",
        "name": "caption",
        "desc": "Audio file caption."
      }
    ],
    "extends": "PageBlock",
    "desc": "An audio file.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1page_block_audio.html"
  },
  "pageBlockDivider": {
    "fields": [],
    "extends": "PageBlock",
    "desc": "An empty block separating a page.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1page_block_divider.html"
  },
  "pageBlockEmbedded": {
    "fields": [
      {
        "type": "string",
        "name": "url",
        "desc": "Web page URL, if available."
      },
      {
        "type": "string",
        "name": "html",
        "desc": "HTML-markup of the embedded page."
      },
      {
        "type": "photo",
        "name": "poster_photo",
        "desc": "Poster photo, if available; may be null."
      },
      {
        "type": "number",
        "name": "width",
        "desc": "Block width."
      },
      {
        "type": "number",
        "name": "height",
        "desc": "Block height."
      },
      {
        "type": "RichText",
        "name": "caption",
        "desc": "Block caption."
      },
      {
        "type": "bool",
        "name": "is_full_width",
        "desc": "True, if the block should be full width."
      },
      {
        "type": "bool",
        "name": "allow_scrolling",
        "desc": "True, if scrolling should be allowed."
      }
    ],
    "extends": "PageBlock",
    "desc": "An embedded web page.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1page_block_embedded.html"
  },
  "pageBlockEmbeddedPost": {
    "fields": [
      {
        "type": "string",
        "name": "url",
        "desc": "Web page URL."
      },
      {
        "type": "string",
        "name": "author",
        "desc": "Post author."
      },
      {
        "type": "photo",
        "name": "author_photo",
        "desc": "Post author photo."
      },
      {
        "type": "number",
        "name": "date",
        "desc": "Point in time (Unix timestamp) when the post was created; 0 if unknown."
      },
      {
        "type": "PageBlock[]",
        "name": "page_blocks",
        "desc": "Post content."
      },
      {
        "type": "RichText",
        "name": "caption",
        "desc": "Post caption."
      }
    ],
    "extends": "PageBlock",
    "desc": "An embedded post.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1page_block_embedded_post.html"
  },
  "pageBlockFooter": {
    "fields": [
      {
        "type": "RichText",
        "name": "footer",
        "desc": "Footer."
      }
    ],
    "extends": "PageBlock",
    "desc": "The footer of a page.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1page_block_footer.html"
  },
  "pageBlockHeader": {
    "fields": [
      {
        "type": "RichText",
        "name": "header",
        "desc": "Header."
      }
    ],
    "extends": "PageBlock",
    "desc": "A header.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1page_block_header.html"
  },
  "pageBlockChatLink": {
    "fields": [
      {
        "type": "string",
        "name": "title",
        "desc": "Chat title."
      },
      {
        "type": "chatPhoto",
        "name": "photo",
        "desc": "Chat photo; may be null."
      },
      {
        "type": "string",
        "name": "username",
        "desc": "Chat username, by which all other information about the chat should be resolved."
      }
    ],
    "extends": "PageBlock",
    "desc": "A link to a chat.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1page_block_chat_link.html"
  },
  "pageBlockList": {
    "fields": [
      {
        "type": "RichText[]",
        "name": "items",
        "desc": "Texts."
      },
      {
        "type": "bool",
        "name": "is_ordered",
        "desc": "True, if the items should be marked with numbers."
      }
    ],
    "extends": "PageBlock",
    "desc": "A list of texts.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1page_block_list.html"
  },
  "pageBlockParagraph": {
    "fields": [
      {
        "type": "RichText",
        "name": "text",
        "desc": "Paragraph text."
      }
    ],
    "extends": "PageBlock",
    "desc": "A text paragraph.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1page_block_paragraph.html"
  },
  "pageBlockPhoto": {
    "fields": [
      {
        "type": "photo",
        "name": "photo",
        "desc": "Photo file; may be null."
      },
      {
        "type": "RichText",
        "name": "caption",
        "desc": "Photo caption."
      }
    ],
    "extends": "PageBlock",
    "desc": "A photo.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1page_block_photo.html"
  },
  "pageBlockPreformatted": {
    "fields": [
      {
        "type": "RichText",
        "name": "text",
        "desc": "Paragraph text."
      },
      {
        "type": "string",
        "name": "language",
        "desc": "Programming language for which the text should be formatted."
      }
    ],
    "extends": "PageBlock",
    "desc": "A preformatted text paragraph.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1page_block_preformatted.html"
  },
  "pageBlockSlideshow": {
    "fields": [
      {
        "type": "PageBlock[]",
        "name": "page_blocks",
        "desc": "Slideshow item contents."
      },
      {
        "type": "RichText",
        "name": "caption",
        "desc": "Block caption."
      }
    ],
    "extends": "PageBlock",
    "desc": "A slideshow.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1page_block_slideshow.html"
  },
  "pageBlockPullQuote": {
    "fields": [
      {
        "type": "RichText",
        "name": "text",
        "desc": "Quote text."
      },
      {
        "type": "RichText",
        "name": "caption",
        "desc": "Quote caption."
      }
    ],
    "extends": "PageBlock",
    "desc": "A pull quote.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1page_block_pull_quote.html"
  },
  "pageBlockSubheader": {
    "fields": [
      {
        "type": "RichText",
        "name": "subheader",
        "desc": "Subheader."
      }
    ],
    "extends": "PageBlock",
    "desc": "A subheader.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1page_block_subheader.html"
  },
  "pageBlockAuthorDate": {
    "fields": [
      {
        "type": "RichText",
        "name": "author",
        "desc": "Author."
      },
      {
        "type": "number",
        "name": "publish_date",
        "desc": "Point in time (Unix timestamp) when the article was published; 0 if unknown."
      }
    ],
    "extends": "PageBlock",
    "desc": "The author and publishing date of a page.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1page_block_author_date.html"
  },
  "pageBlockSubtitle": {
    "fields": [
      {
        "type": "RichText",
        "name": "subtitle",
        "desc": "Subtitle."
      }
    ],
    "extends": "PageBlock",
    "desc": "The subtitle of a page.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1page_block_subtitle.html"
  },
  "passwordRecoveryInfo": {
    "fields": [
      {
        "type": "string",
        "name": "recovery_email_address_pattern",
        "desc": "Pattern of the email address to which a recovery email was sent."
      }
    ],
    "extends": "TDObject",
    "desc": "Contains information available to the user after requesting password recovery.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1password_recovery_info.html"
  },
  "paymentReceipt": {
    "fields": [
      {
        "type": "number",
        "name": "date",
        "desc": "Point in time (Unix timestamp) when the payment was made."
      },
      {
        "type": "number",
        "name": "payments_provider_user_id",
        "desc": "User identifier of the payment provider bot."
      },
      {
        "type": "invoice",
        "name": "invoice",
        "desc": "Contains information about the invoice."
      },
      {
        "type": "orderInfo",
        "name": "order_info",
        "desc": "Contains order information; may be null."
      },
      {
        "type": "shippingOption",
        "name": "shipping_option",
        "desc": "Chosen shipping option; may be null."
      },
      {
        "type": "string",
        "name": "credentials_title",
        "desc": "Title of the saved credentials."
      }
    ],
    "extends": "TDObject",
    "desc": "Contains information about a successful payment.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1payment_receipt.html"
  },
  "pageBlockTitle": {
    "fields": [
      {
        "type": "RichText",
        "name": "title",
        "desc": "Title."
      }
    ],
    "extends": "PageBlock",
    "desc": "The title of a page.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1page_block_title.html"
  },
  "paymentResult": {
    "fields": [
      {
        "type": "bool",
        "name": "success",
        "desc": "True, if the payment request was successful; otherwise the verification_url will be not empty."
      },
      {
        "type": "string",
        "name": "verification_url",
        "desc": "URL for additional payment credentials verification."
      }
    ],
    "extends": "TDObject",
    "desc": "Contains the result of a payment request.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1payment_result.html"
  },
  "paymentsProviderStripe": {
    "fields": [
      {
        "type": "string",
        "name": "publishable_key",
        "desc": "Stripe API publishable key."
      },
      {
        "type": "bool",
        "name": "need_country",
        "desc": "True, if the user country must be provided."
      },
      {
        "type": "bool",
        "name": "need_postal_code",
        "desc": "True, if the user ZIP/postal code must be provided."
      },
      {
        "type": "bool",
        "name": "need_cardholder_name",
        "desc": "True, if the cardholder name must be provided."
      }
    ],
    "extends": "TDObject",
    "desc": "Stripe payment provider.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1payments_provider_stripe.html"
  },
  "paymentForm": {
    "fields": [
      {
        "type": "invoice",
        "name": "invoice",
        "desc": "Full information of the invoice."
      },
      {
        "type": "string",
        "name": "url",
        "desc": "Payment form URL."
      },
      {
        "type": "paymentsProviderStripe",
        "name": "payments_provider",
        "desc": "Contains information about the payment provider, if available, to support it natively without the need for opening the URL; may be null."
      },
      {
        "type": "orderInfo",
        "name": "saved_order_info",
        "desc": "Saved server-side order information; may be null."
      },
      {
        "type": "savedCredentials",
        "name": "saved_credentials",
        "desc": "Contains information about saved card credentials; may be null."
      },
      {
        "type": "bool",
        "name": "can_save_credentials",
        "desc": "True, if the user can choose to save credentials."
      },
      {
        "type": "bool",
        "name": "need_password",
        "desc": "True, if the user will be able to save credentials protected by a password they set up."
      }
    ],
    "extends": "TDObject",
    "desc": "Contains information about an invoice payment form.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1payment_form.html"
  },
  "photo": {
    "fields": [
      {
        "type": "string",
        "name": "id",
        "desc": "Photo identifier; 0 for deleted photos."
      },
      {
        "type": "bool",
        "name": "has_stickers",
        "desc": "True, if stickers were added to the photo."
      },
      {
        "type": "photoSize[]",
        "name": "sizes",
        "desc": "Available variants of the photo, in different sizes."
      }
    ],
    "extends": "TDObject",
    "desc": "Describes a photo.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1photo.html"
  },
  "photoSize": {
    "fields": [
      {
        "type": "string",
        "name": "type",
        "desc": "Thumbnail type (see <a href=\"https://core.telegram.org/constructor/photoSize\">https://core.telegram.org/constructor/photoSize</a>)."
      },
      {
        "type": "file",
        "name": "photo",
        "desc": "Information about the photo file."
      },
      {
        "type": "number",
        "name": "width",
        "desc": "Photo width."
      },
      {
        "type": "number",
        "name": "height",
        "desc": "Photo height."
      }
    ],
    "extends": "TDObject",
    "desc": "Photo description.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1photo_size.html"
  },
  "profilePhoto": {
    "fields": [
      {
        "type": "string",
        "name": "id",
        "desc": "Photo identifier; 0 for an empty photo. Can be used to find a photo in a list of <a class=\"el\" href=\"classtd_1_1td__api_1_1user_profile_photos.html\">userProfilePhotos</a>."
      },
      {
        "type": "file",
        "name": "small",
        "desc": "A small (160x160) user profile photo."
      },
      {
        "type": "file",
        "name": "big",
        "desc": "A big (640x640) user profile photo."
      }
    ],
    "extends": "TDObject",
    "desc": "Describes a user profile photo.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1profile_photo.html"
  },
  "Proxy": {
    "fields": [],
    "extends": "TDObject",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_proxy.html"
  },
  "proxyEmpty": {
    "fields": [],
    "extends": "Proxy",
    "desc": "An empty proxy server.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1proxy_empty.html"
  },
  "proxySocks5": {
    "fields": [
      {
        "type": "string",
        "name": "server",
        "desc": "<a class=\"el\" href=\"classtd_1_1td__api_1_1_proxy.html\">Proxy</a> server IP address."
      },
      {
        "type": "number",
        "name": "port",
        "desc": "<a class=\"el\" href=\"classtd_1_1td__api_1_1_proxy.html\">Proxy</a> server port."
      },
      {
        "type": "string",
        "name": "username",
        "desc": "Username for logging in."
      },
      {
        "type": "string",
        "name": "password",
        "desc": "Password for logging in."
      }
    ],
    "extends": "Proxy",
    "desc": "A SOCKS5 proxy server.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1proxy_socks5.html"
  },
  "publicMessageLink": {
    "fields": [
      {
        "type": "string",
        "name": "link",
        "desc": "Message link."
      }
    ],
    "extends": "TDObject",
    "desc": "Contains a public HTTPS link to a message in a public supergroup or channel.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1public_message_link.html"
  },
  "recoveryEmailAddress": {
    "fields": [
      {
        "type": "string",
        "name": "recovery_email_address",
        "desc": "Recovery email address."
      }
    ],
    "extends": "TDObject",
    "desc": "Contains information about the current recovery email address.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1recovery_email_address.html"
  },
  "remoteFile": {
    "fields": [
      {
        "type": "string",
        "name": "id",
        "desc": "Remote file identifier, may be empty. Can be used across application restarts or even from other devices for the current user. If the ID starts with \"<a href=\"http://\"\">http://&quot;</a> or \"<a href=\"https://\",\">https://&quot;,</a> it represents the HTTP URL of the file. TDLib is currently unable to download files if only their URL is known. If <a class=\"el\" href=\"classtd_1_1td__api_1_1download_file.html\">downloadFile</a> is called on such a file or if it is sent to a secret chat, TDLib starts a file generation process by sending <a class=\"el\" href=\"classtd_1_1td__api_1_1update_file_generation_start.html\">updateFileGenerationStart</a> to the client with the HTTP URL in the original_path and \"#url#\" as the conversion string. Clients should generate the file by downloading it to the specified location."
      },
      {
        "type": "bool",
        "name": "is_uploading_active",
        "desc": "True, if the file is currently being uploaded (or a remote copy is being generated by some other means)."
      },
      {
        "type": "bool",
        "name": "is_uploading_completed",
        "desc": "True, if a remote copy is fully available."
      },
      {
        "type": "number",
        "name": "uploaded_size",
        "desc": "Size of the remote available part of the file; 0 if unknown."
      }
    ],
    "extends": "TDObject",
    "desc": "Represents a remote file.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1remote_file.html"
  },
  "ReplyMarkup": {
    "fields": [],
    "extends": "TDObject",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_reply_markup.html"
  },
  "replyMarkupForceReply": {
    "fields": [
      {
        "type": "bool",
        "name": "is_personal",
        "desc": "True, if a forced reply must automatically be shown to the current user. For outgoing messages, specify true to show the forced reply only for the mentioned users and for the target user of a reply."
      }
    ],
    "extends": "ReplyMarkup",
    "desc": "Instructs clients to force a reply to this message.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1reply_markup_force_reply.html"
  },
  "replyMarkupInlineKeyboard": {
    "fields": [
      {
        "type": "inlineKeyboardButton[][]",
        "name": "rows",
        "desc": "A list of rows of inline keyboard buttons."
      }
    ],
    "extends": "ReplyMarkup",
    "desc": "Contains an inline keyboard layout.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1reply_markup_inline_keyboard.html"
  },
  "replyMarkupRemoveKeyboard": {
    "fields": [
      {
        "type": "bool",
        "name": "is_personal",
        "desc": "True, if the keyboard is removed only for the mentioned users or the target user of a reply."
      }
    ],
    "extends": "ReplyMarkup",
    "desc": "Instructs clients to remove the keyboard once this message has been received. This kind of keyboard can't be received in an incoming message; instead, UpdateChatReplyMarkup with message_id == 0 will be sent.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1reply_markup_remove_keyboard.html"
  },
  "replyMarkupShowKeyboard": {
    "fields": [
      {
        "type": "keyboardButton[][]",
        "name": "rows",
        "desc": "A list of rows of bot keyboard buttons."
      },
      {
        "type": "bool",
        "name": "resize_keyboard",
        "desc": "True, if the client needs to resize the keyboard vertically."
      },
      {
        "type": "bool",
        "name": "one_time",
        "desc": "True, if the client needs to hide the keyboard after use."
      },
      {
        "type": "bool",
        "name": "is_personal",
        "desc": "True, if the keyboard must automatically be shown to the current user. For outgoing messages, specify true to show the keyboard only for the mentioned users and for the target user of a reply."
      }
    ],
    "extends": "ReplyMarkup",
    "desc": "Contains a custom keyboard layout to quickly reply to bots.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1reply_markup_show_keyboard.html"
  },
  "RichText": {
    "fields": [],
    "extends": "TDObject",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_rich_text.html"
  },
  "pageBlockVideo": {
    "fields": [
      {
        "type": "video",
        "name": "video",
        "desc": "Video file; may be null."
      },
      {
        "type": "RichText",
        "name": "caption",
        "desc": "Video caption."
      },
      {
        "type": "bool",
        "name": "need_autoplay",
        "desc": "True, if the video should be played automatically."
      },
      {
        "type": "bool",
        "name": "is_looped",
        "desc": "True, if the video should be looped."
      }
    ],
    "extends": "PageBlock",
    "desc": "A video.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1page_block_video.html"
  },
  "passwordState": {
    "fields": [
      {
        "type": "bool",
        "name": "has_password",
        "desc": "True if a 2-step verification password has been set up."
      },
      {
        "type": "string",
        "name": "password_hint",
        "desc": "Hint for the password; can be empty."
      },
      {
        "type": "bool",
        "name": "has_recovery_email_address",
        "desc": "True if a recovery email has been set up."
      },
      {
        "type": "string",
        "name": "unconfirmed_recovery_email_address_pattern",
        "desc": "Pattern of the email address to which a confirmation email was sent."
      }
    ],
    "extends": "TDObject",
    "desc": "Represents the current state of 2-step verification.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1password_state.html"
  },
  "richTextBold": {
    "fields": [
      {
        "type": "RichText",
        "name": "text",
        "desc": "Text."
      }
    ],
    "extends": "RichText",
    "desc": "A bold rich text.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1rich_text_bold.html"
  },
  "richTextPlain": {
    "fields": [
      {
        "type": "string",
        "name": "text",
        "desc": "Text."
      }
    ],
    "extends": "RichText",
    "desc": "A plain text.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1rich_text_plain.html"
  },
  "richTexts": {
    "fields": [
      {
        "type": "RichText[]",
        "name": "texts",
        "desc": "Texts."
      }
    ],
    "extends": "RichText",
    "desc": "A concatenation of rich texts.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1rich_texts.html"
  },
  "richTextStrikethrough": {
    "fields": [
      {
        "type": "RichText",
        "name": "text",
        "desc": "Text."
      }
    ],
    "extends": "RichText",
    "desc": "A strike-through rich text.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1rich_text_strikethrough.html"
  },
  "richTextUnderline": {
    "fields": [
      {
        "type": "RichText",
        "name": "text",
        "desc": "Text."
      }
    ],
    "extends": "RichText",
    "desc": "An underlined rich text.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1rich_text_underline.html"
  },
  "richTextEmailAddress": {
    "fields": [
      {
        "type": "RichText",
        "name": "text",
        "desc": "Text."
      },
      {
        "type": "string",
        "name": "email_address",
        "desc": "Email address."
      }
    ],
    "extends": "RichText",
    "desc": "A rich text email link.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1rich_text_email_address.html"
  },
  "richTextUrl": {
    "fields": [
      {
        "type": "RichText",
        "name": "text",
        "desc": "Text."
      },
      {
        "type": "string",
        "name": "url",
        "desc": "URL."
      }
    ],
    "extends": "RichText",
    "desc": "A rich text URL link.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1rich_text_url.html"
  },
  "savedCredentials": {
    "fields": [
      {
        "type": "string",
        "name": "id",
        "desc": "Unique identifier of the saved credentials."
      },
      {
        "type": "string",
        "name": "title",
        "desc": "Title of the saved credentials."
      }
    ],
    "extends": "TDObject",
    "desc": "Contains information about saved card credentials.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1saved_credentials.html"
  },
  "SearchMessagesFilter": {
    "fields": [],
    "extends": "TDObject",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_search_messages_filter.html"
  },
  "searchMessagesFilterAnimation": {
    "fields": [],
    "extends": "SearchMessagesFilter",
    "desc": "Returns only animation messages.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1search_messages_filter_animation.html"
  },
  "searchMessagesFilterAudio": {
    "fields": [],
    "extends": "SearchMessagesFilter",
    "desc": "Returns only audio messages.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1search_messages_filter_audio.html"
  },
  "searchMessagesFilterCall": {
    "fields": [],
    "extends": "SearchMessagesFilter",
    "desc": "Returns only call messages.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1search_messages_filter_call.html"
  },
  "searchMessagesFilterChatPhoto": {
    "fields": [],
    "extends": "SearchMessagesFilter",
    "desc": "Returns only messages containing chat photos.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1search_messages_filter_chat_photo.html"
  },
  "searchMessagesFilterDocument": {
    "fields": [],
    "extends": "SearchMessagesFilter",
    "desc": "Returns only document messages.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1search_messages_filter_document.html"
  },
  "searchMessagesFilterEmpty": {
    "fields": [],
    "extends": "SearchMessagesFilter",
    "desc": "Returns all found messages, no filter is applied.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1search_messages_filter_empty.html"
  },
  "searchMessagesFilterMention": {
    "fields": [],
    "extends": "SearchMessagesFilter",
    "desc": "Returns only messages with mentions of the current user, or messages that are replies to their messages.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1search_messages_filter_mention.html"
  },
  "searchMessagesFilterMissedCall": {
    "fields": [],
    "extends": "SearchMessagesFilter",
    "desc": "Returns only incoming call messages with missed/declined discard reasons.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1search_messages_filter_missed_call.html"
  },
  "searchMessagesFilterPhoto": {
    "fields": [],
    "extends": "SearchMessagesFilter",
    "desc": "Returns only photo messages.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1search_messages_filter_photo.html"
  },
  "searchMessagesFilterPhotoAndVideo": {
    "fields": [],
    "extends": "SearchMessagesFilter",
    "desc": "Returns only photo and video messages.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1search_messages_filter_photo_and_video.html"
  },
  "searchMessagesFilterUnreadMention": {
    "fields": [],
    "extends": "SearchMessagesFilter",
    "desc": "Returns only messages with unread mentions of the current user or messages that are replies to their messages. When using this filter the results can't be additionally filtered by a query or by the sending user.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1search_messages_filter_unread_mention.html"
  },
  "searchMessagesFilterUrl": {
    "fields": [],
    "extends": "SearchMessagesFilter",
    "desc": "Returns only messages containing URLs.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1search_messages_filter_url.html"
  },
  "searchMessagesFilterVideo": {
    "fields": [],
    "extends": "SearchMessagesFilter",
    "desc": "Returns only video messages.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1search_messages_filter_video.html"
  },
  "searchMessagesFilterVideoNote": {
    "fields": [],
    "extends": "SearchMessagesFilter",
    "desc": "Returns only video note messages.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1search_messages_filter_video_note.html"
  },
  "searchMessagesFilterVoiceAndVideoNote": {
    "fields": [],
    "extends": "SearchMessagesFilter",
    "desc": "Returns only voice and video note messages.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1search_messages_filter_voice_and_video_note.html"
  },
  "searchMessagesFilterVoiceNote": {
    "fields": [],
    "extends": "SearchMessagesFilter",
    "desc": "Returns only voice note messages.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1search_messages_filter_voice_note.html"
  },
  "SecretChatState": {
    "fields": [],
    "extends": "TDObject",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_secret_chat_state.html"
  },
  "secretChat": {
    "fields": [
      {
        "type": "number",
        "name": "id",
        "desc": "Secret chat identifier."
      },
      {
        "type": "number",
        "name": "user_id",
        "desc": "Identifier of the chat partner."
      },
      {
        "type": "SecretChatState",
        "name": "state",
        "desc": "State of the secret chat."
      },
      {
        "type": "bool",
        "name": "is_outbound",
        "desc": "True, if the chat was created by the current user; otherwise false."
      },
      {
        "type": "number",
        "name": "ttl",
        "desc": "Current message Time To Live setting (self-destruct timer) for the chat, in seconds."
      },
      {
        "type": "string",
        "name": "key_hash",
        "desc": "Hash of the currently used key for comparison with the hash of the chat partner's key. This is a string of 36 bytes, which must be used to make a 12x12 square image with a color depth of 4. The first 16 bytes should be used to make a central 8x8 square, while the remaining 20 bytes should be used to construct a 2-pixel-wide border around that square. Alternatively, the first 32 bytes of the hash can be converted to the hexadecimal format and printed as 32 2-digit hex numbers."
      },
      {
        "type": "number",
        "name": "layer",
        "desc": "Secret chat layer; determines features supported by the other client. Video notes are supported if the layer >= 66."
      }
    ],
    "extends": "TDObject",
    "desc": "Represents a secret chat.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1secret_chat.html"
  },
  "secretChatStateClosed": {
    "fields": [],
    "extends": "SecretChatState",
    "desc": "The secret chat is closed.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1secret_chat_state_closed.html"
  },
  "secretChatStatePending": {
    "fields": [],
    "extends": "SecretChatState",
    "desc": "The secret chat is not yet created; waiting for the other user to get online.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1secret_chat_state_pending.html"
  },
  "secretChatStateReady": {
    "fields": [],
    "extends": "SecretChatState",
    "desc": "The secret chat is ready to use.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1secret_chat_state_ready.html"
  },
  "sessions": {
    "fields": [
      {
        "type": "session[]",
        "name": "sessions",
        "desc": "List of sessions."
      }
    ],
    "extends": "TDObject",
    "desc": "Contains a list of sessions.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1sessions.html"
  },
  "session": {
    "fields": [
      {
        "type": "string",
        "name": "id",
        "desc": "Session identifier."
      },
      {
        "type": "bool",
        "name": "is_current",
        "desc": "True, if this session is the current session."
      },
      {
        "type": "number",
        "name": "api_id",
        "desc": "Telegram API identifier, as provided by the application."
      },
      {
        "type": "string",
        "name": "application_name",
        "desc": "Name of the application, as provided by the application."
      },
      {
        "type": "string",
        "name": "application_version",
        "desc": "The version of the application, as provided by the application."
      },
      {
        "type": "bool",
        "name": "is_official_application",
        "desc": "True, if the application is an official application or uses the api_id of an official application."
      },
      {
        "type": "string",
        "name": "device_model",
        "desc": "Model of the device the application has been run or is running on, as provided by the application."
      },
      {
        "type": "string",
        "name": "platform",
        "desc": "Operating system the application has been run or is running on, as provided by the application."
      },
      {
        "type": "string",
        "name": "system_version",
        "desc": "Version of the operating system the application has been run or is running on, as provided by the application."
      },
      {
        "type": "number",
        "name": "log_in_date",
        "desc": "Point in time (Unix timestamp) when the user has logged in."
      },
      {
        "type": "number",
        "name": "last_active_date",
        "desc": "Point in time (Unix timestamp) when the session was last used."
      },
      {
        "type": "string",
        "name": "ip",
        "desc": "IP address from which the session was created, in human-readable format."
      },
      {
        "type": "string",
        "name": "country",
        "desc": "A two-letter country code for the country from which the session was created, based on the IP address."
      },
      {
        "type": "string",
        "name": "region",
        "desc": "Region code from which the session was created, based on the IP address."
      }
    ],
    "extends": "TDObject",
    "desc": "Contains information about one session in a Telegram application used by the current user.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1session.html"
  },
  "shippingAddress": {
    "fields": [
      {
        "type": "string",
        "name": "country_code",
        "desc": "Two-letter ISO 3166-1 alpha-2 country code."
      },
      {
        "type": "string",
        "name": "state",
        "desc": "State, if applicable."
      },
      {
        "type": "string",
        "name": "city",
        "desc": "City."
      },
      {
        "type": "string",
        "name": "street_line1",
        "desc": "First line of the address."
      },
      {
        "type": "string",
        "name": "street_line2",
        "desc": "Second line of the address."
      },
      {
        "type": "string",
        "name": "postal_code",
        "desc": "Address postal code."
      }
    ],
    "extends": "TDObject",
    "desc": "Describes a shipping address.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1shipping_address.html"
  },
  "shippingOption": {
    "fields": [
      {
        "type": "string",
        "name": "id",
        "desc": "Shipping option identifier."
      },
      {
        "type": "string",
        "name": "title",
        "desc": "Option title."
      },
      {
        "type": "labeledPricePart[]",
        "name": "price_parts",
        "desc": "A list of objects used to calculate the total shipping costs."
      }
    ],
    "extends": "TDObject",
    "desc": "One shipping option.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1shipping_option.html"
  },
  "sticker": {
    "fields": [
      {
        "type": "string",
        "name": "set_id",
        "desc": "The identifier of the sticker set to which the sticker belongs; 0 if none."
      },
      {
        "type": "number",
        "name": "width",
        "desc": "Sticker width; as defined by the sender."
      },
      {
        "type": "number",
        "name": "height",
        "desc": "Sticker height; as defined by the sender."
      },
      {
        "type": "string",
        "name": "emoji",
        "desc": "Emoji corresponding to the sticker."
      },
      {
        "type": "bool",
        "name": "is_mask",
        "desc": "True, if the sticker is a mask."
      },
      {
        "type": "maskPosition",
        "name": "mask_position",
        "desc": "Position where the mask should be placed; may be null."
      },
      {
        "type": "photoSize",
        "name": "thumbnail",
        "desc": "Sticker thumbnail in WEBP or JPEG format; may be null."
      },
      {
        "type": "file",
        "name": "sticker",
        "desc": "File containing the sticker."
      }
    ],
    "extends": "TDObject",
    "desc": "Describes a sticker.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1sticker.html"
  },
  "stickerEmojis": {
    "fields": [
      {
        "type": "string[]",
        "name": "emojis",
        "desc": "List of emojis."
      }
    ],
    "extends": "TDObject",
    "desc": "Represents a list of all emoji corresponding to a sticker in a sticker set. The list is only for informational purposes, because a sticker is always sent with a fixed emoji from the corresponding Sticker object.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1sticker_emojis.html"
  },
  "stickers": {
    "fields": [
      {
        "type": "sticker[]",
        "name": "stickers",
        "desc": "List of stickers."
      }
    ],
    "extends": "TDObject",
    "desc": "Represents a list of stickers.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1stickers.html"
  },
  "stickerSet": {
    "fields": [
      {
        "type": "string",
        "name": "id",
        "desc": "Identifier of the sticker set."
      },
      {
        "type": "string",
        "name": "title",
        "desc": "Title of the sticker set."
      },
      {
        "type": "string",
        "name": "name",
        "desc": "Name of the sticker set."
      },
      {
        "type": "bool",
        "name": "is_installed",
        "desc": "True, if the sticker set has been installed by the current user."
      },
      {
        "type": "bool",
        "name": "is_archived",
        "desc": "True, if the sticker set has been archived. A sticker set can't be installed and archived simultaneously."
      },
      {
        "type": "bool",
        "name": "is_official",
        "desc": "True, if the sticker set is official."
      },
      {
        "type": "bool",
        "name": "is_masks",
        "desc": "True, if the stickers in the set are masks."
      },
      {
        "type": "bool",
        "name": "is_viewed",
        "desc": "True for already viewed trending sticker sets."
      },
      {
        "type": "sticker[]",
        "name": "stickers",
        "desc": "List of stickers in this set."
      },
      {
        "type": "stickerEmojis[]",
        "name": "emojis",
        "desc": "A list of emoji corresponding to the stickers in the same order."
      }
    ],
    "extends": "TDObject",
    "desc": "Represents a sticker set.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1sticker_set.html"
  },
  "richTextFixed": {
    "fields": [
      {
        "type": "RichText",
        "name": "text",
        "desc": "Text."
      }
    ],
    "extends": "RichText",
    "desc": "A fixed-width rich text.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1rich_text_fixed.html"
  },
  "stickerSets": {
    "fields": [
      {
        "type": "number",
        "name": "total_count",
        "desc": "Approximate total number of sticker sets found."
      },
      {
        "type": "stickerSetInfo[]",
        "name": "sets",
        "desc": "List of sticker sets."
      }
    ],
    "extends": "TDObject",
    "desc": "Represents a list of sticker sets.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1sticker_sets.html"
  },
  "stickerSetInfo": {
    "fields": [
      {
        "type": "string",
        "name": "id",
        "desc": "Identifier of the sticker set."
      },
      {
        "type": "string",
        "name": "title",
        "desc": "Title of the sticker set."
      },
      {
        "type": "string",
        "name": "name",
        "desc": "Name of the sticker set."
      },
      {
        "type": "bool",
        "name": "is_installed",
        "desc": "True, if the sticker set has been installed by current user."
      },
      {
        "type": "bool",
        "name": "is_archived",
        "desc": "True, if the sticker set has been archived. A sticker set can't be installed and archived simultaneously."
      },
      {
        "type": "bool",
        "name": "is_official",
        "desc": "True, if the sticker set is official."
      },
      {
        "type": "bool",
        "name": "is_masks",
        "desc": "True, if the stickers in the set are masks."
      },
      {
        "type": "bool",
        "name": "is_viewed",
        "desc": "True for already viewed trending sticker sets."
      },
      {
        "type": "number",
        "name": "size",
        "desc": "Total number of stickers in the set."
      },
      {
        "type": "sticker[]",
        "name": "covers",
        "desc": "Contains up to the first 5 stickers from the set, depending on the context. If the client needs more stickers the full set should be requested."
      }
    ],
    "extends": "TDObject",
    "desc": "Represents short information about a sticker set.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1sticker_set_info.html"
  },
  "storageStatistics": {
    "fields": [
      {
        "type": "string",
        "name": "size",
        "desc": "Total size of files."
      },
      {
        "type": "number",
        "name": "count",
        "desc": "Total number of files."
      },
      {
        "type": "storageStatisticsByChat[]",
        "name": "by_chat",
        "desc": "Statistics split by chats."
      }
    ],
    "extends": "TDObject",
    "desc": "Contains the exact storage usage statistics split by chats and file type.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1storage_statistics.html"
  },
  "storageStatisticsByChat": {
    "fields": [
      {
        "type": "string",
        "name": "chat_id",
        "desc": "Chat identifier; 0 if none."
      },
      {
        "type": "string",
        "name": "size",
        "desc": "Total size of the files in the chat."
      },
      {
        "type": "number",
        "name": "count",
        "desc": "Total number of files in the chat."
      },
      {
        "type": "storageStatisticsByFileType[]",
        "name": "by_file_type",
        "desc": "Statistics split by file types."
      }
    ],
    "extends": "TDObject",
    "desc": "Contains the storage usage statistics for a specific chat.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1storage_statistics_by_chat.html"
  },
  "storageStatisticsByFileType": {
    "fields": [
      {
        "type": "FileType",
        "name": "file_type",
        "desc": "File type."
      },
      {
        "type": "string",
        "name": "size",
        "desc": "Total size of the files."
      },
      {
        "type": "number",
        "name": "count",
        "desc": "Total number of files."
      }
    ],
    "extends": "TDObject",
    "desc": "Contains the storage usage statistics for a specific file type.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1storage_statistics_by_file_type.html"
  },
  "storageStatisticsFast": {
    "fields": [
      {
        "type": "string",
        "name": "files_size",
        "desc": "Approximate total size of files."
      },
      {
        "type": "number",
        "name": "file_count",
        "desc": "Approximate number of files."
      },
      {
        "type": "string",
        "name": "database_size",
        "desc": "Size of the database."
      }
    ],
    "extends": "TDObject",
    "desc": "Contains approximate storage usage statistics, excluding files of unknown file type.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1storage_statistics_fast.html"
  },
  "supergroup": {
    "fields": [
      {
        "type": "number",
        "name": "id",
        "desc": "Supergroup or channel identifier."
      },
      {
        "type": "string",
        "name": "username",
        "desc": "Username of the supergroup or channel; empty for private supergroups or channels."
      },
      {
        "type": "number",
        "name": "date",
        "desc": "Point in time (Unix timestamp) when the current user joined, or the point in time when the supergroup or channel was created, in case the user is not a member."
      },
      {
        "type": "ChatMemberStatus",
        "name": "status",
        "desc": "Status of the current user in the supergroup or channel."
      },
      {
        "type": "number",
        "name": "member_count",
        "desc": "Member count; 0 if unknown. Currently it is guaranteed to be known only if the supergroup or channel was found through SearchPublicChats."
      },
      {
        "type": "bool",
        "name": "anyone_can_invite",
        "desc": "True, if any member of the supergroup can invite other members. This field has no meaning for channels."
      },
      {
        "type": "bool",
        "name": "sign_messages",
        "desc": "True, if messages sent to the channel should contain information about the sender. This field is only applicable to channels."
      },
      {
        "type": "bool",
        "name": "is_channel",
        "desc": "True, if the supergroup is a channel."
      },
      {
        "type": "bool",
        "name": "is_verified",
        "desc": "True, if the supergroup or channel is verified."
      },
      {
        "type": "string",
        "name": "restriction_reason",
        "desc": "If non-empty, contains the reason why access to this supergroup or channel must be restricted. Format of the string is \"{type}: {description}\". {type} Contains the type of the restriction and at least one of the suffixes \"-all\", \"-ios\", \"-android\", or \"-wp\", which describe the platforms on which access should be restricted. (For example, \"terms-ios-android\". {description} contains a human-readable description of the restriction, which can be shown to the user.)"
      }
    ],
    "extends": "TDObject",
    "desc": "Represents a supergroup or channel with zero or more members (subscribers in the case of channels). From the point of view of the system, a channel is a special kind of a supergroup: only administrators can post and see the list of members, and posts from all administrators use the name and photo of the channel instead of individual names and profile photos. Unlike supergroups, channels can have an unlimited number of subscribers.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1supergroup.html"
  },
  "SupergroupMembersFilter": {
    "fields": [],
    "extends": "TDObject",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_supergroup_members_filter.html"
  },
  "supergroupMembersFilterAdministrators": {
    "fields": [],
    "extends": "SupergroupMembersFilter",
    "desc": "Returns the creator and administrators.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1supergroup_members_filter_administrators.html"
  },
  "supergroupFullInfo": {
    "fields": [
      {
        "type": "string",
        "name": "description",
        "desc": "Supergroup or channel description."
      },
      {
        "type": "number",
        "name": "member_count",
        "desc": "Number of members in the supergroup or channel; 0 if unknown."
      },
      {
        "type": "number",
        "name": "administrator_count",
        "desc": "Number of privileged users in the supergroup or channel; 0 if unknown."
      },
      {
        "type": "number",
        "name": "restricted_count",
        "desc": "Number of restricted users in the supergroup; 0 if unknown."
      },
      {
        "type": "number",
        "name": "banned_count",
        "desc": "Number of users banned from chat; 0 if unknown."
      },
      {
        "type": "bool",
        "name": "can_get_members",
        "desc": "True, if members of the chat can be retrieved."
      },
      {
        "type": "bool",
        "name": "can_set_username",
        "desc": "True, if the chat can be made public."
      },
      {
        "type": "bool",
        "name": "can_set_sticker_set",
        "desc": "True, if the supergroup sticker set can be changed."
      },
      {
        "type": "bool",
        "name": "is_all_history_available",
        "desc": "True, if new chat members will have access to old messages. In public supergroups and both public and private channels, old messages are always available, so this option affects only private supergroups. The value of this field is only available for chat administrators."
      },
      {
        "type": "string",
        "name": "sticker_set_id",
        "desc": "Identifier of the supergroup sticker set; 0 if none."
      },
      {
        "type": "string",
        "name": "invite_link",
        "desc": "Invite link for this chat."
      },
      {
        "type": "string",
        "name": "pinned_message_id",
        "desc": "Identifier of the pinned message in the chat; 0 if none."
      },
      {
        "type": "number",
        "name": "upgraded_from_basic_group_id",
        "desc": "Identifier of the basic group from which supergroup was upgraded; 0 if none."
      },
      {
        "type": "string",
        "name": "upgraded_from_max_message_id",
        "desc": "Identifier of the last message in the basic group from which supergroup was upgraded; 0 if none."
      }
    ],
    "extends": "TDObject",
    "desc": "Contains full information about a supergroup or channel.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1supergroup_full_info.html"
  },
  "supergroupMembersFilterBanned": {
    "fields": [
      {
        "type": "string",
        "name": "query",
        "desc": "Query to search for."
      }
    ],
    "extends": "SupergroupMembersFilter",
    "desc": "Returns users banned from the supergroup or channel; can be used only by administrators.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1supergroup_members_filter_banned.html"
  },
  "supergroupMembersFilterBots": {
    "fields": [],
    "extends": "SupergroupMembersFilter",
    "desc": "Returns bot members of the supergroup or channel.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1supergroup_members_filter_bots.html"
  },
  "supergroupMembersFilterRecent": {
    "fields": [],
    "extends": "SupergroupMembersFilter",
    "desc": "Returns recently active users in reverse chronological order.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1supergroup_members_filter_recent.html"
  },
  "supergroupMembersFilterRestricted": {
    "fields": [
      {
        "type": "string",
        "name": "query",
        "desc": "Query to search for."
      }
    ],
    "extends": "SupergroupMembersFilter",
    "desc": "Returns restricted supergroup members; can be used only by administrators.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1supergroup_members_filter_restricted.html"
  },
  "richTextItalic": {
    "fields": [
      {
        "type": "RichText",
        "name": "text",
        "desc": "Text."
      }
    ],
    "extends": "RichText",
    "desc": "An italicized rich text.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1rich_text_italic.html"
  },
  "supergroupMembersFilterSearch": {
    "fields": [
      {
        "type": "string",
        "name": "query",
        "desc": "Query to search for."
      }
    ],
    "extends": "SupergroupMembersFilter",
    "desc": "Used to search for supergroup or channel members via a (string) query.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1supergroup_members_filter_search.html"
  },
  "testInt": {
    "fields": [
      {
        "type": "number",
        "name": "value",
        "desc": "Number."
      }
    ],
    "extends": "TDObject",
    "desc": "A simple object containing a number; for testing only.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1test_int.html"
  },
  "testString": {
    "fields": [
      {
        "type": "string",
        "name": "value",
        "desc": "String."
      }
    ],
    "extends": "TDObject",
    "desc": "A simple object containing a string; for testing only.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1test_string.html"
  },
  "testVectorInt": {
    "fields": [
      {
        "type": "number[]",
        "name": "value",
        "desc": "Vector of numbers."
      }
    ],
    "extends": "TDObject",
    "desc": "A simple object containing a vector of numbers; for testing only.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1test_vector_int.html"
  },
  "testVectorIntObject": {
    "fields": [
      {
        "type": "testInt[]",
        "name": "value",
        "desc": "Vector of objects."
      }
    ],
    "extends": "TDObject",
    "desc": "A simple object containing a vector of objects that hold a number; for testing only.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1test_vector_int_object.html"
  },
  "testVectorString": {
    "fields": [
      {
        "type": "string[]",
        "name": "value",
        "desc": "Vector of strings."
      }
    ],
    "extends": "TDObject",
    "desc": "A simple object containing a vector of strings; for testing only.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1test_vector_string.html"
  },
  "testVectorStringObject": {
    "fields": [
      {
        "type": "testString[]",
        "name": "value",
        "desc": "Vector of objects."
      }
    ],
    "extends": "TDObject",
    "desc": "A simple object containing a vector of objects that hold a string; for testing only.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1test_vector_string_object.html"
  },
  "text": {
    "fields": [
      {
        "type": "string",
        "name": "text",
        "desc": "Text."
      }
    ],
    "extends": "TDObject",
    "desc": "Contains some text.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1text.html"
  },
  "textEntities": {
    "fields": [
      {
        "type": "textEntity[]",
        "name": "entities",
        "desc": "List of text entities."
      }
    ],
    "extends": "TDObject",
    "desc": "Contains a list of text entities.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1text_entities.html"
  },
  "textEntity": {
    "fields": [
      {
        "type": "number",
        "name": "offset",
        "desc": "Offset of the entity in UTF-16 code points."
      },
      {
        "type": "number",
        "name": "length",
        "desc": "Length of the entity, in UTF-16 code points."
      },
      {
        "type": "TextEntityType",
        "name": "type",
        "desc": "Type of the entity."
      }
    ],
    "extends": "TDObject",
    "desc": "Represents a part of the text that needs to be formatted in some unusual way.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1text_entity.html"
  },
  "TextEntityType": {
    "fields": [],
    "extends": "TDObject",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_text_entity_type.html"
  },
  "textEntityTypeBold": {
    "fields": [],
    "extends": "TextEntityType",
    "desc": "A bold text.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1text_entity_type_bold.html"
  },
  "textEntityTypeBotCommand": {
    "fields": [],
    "extends": "TextEntityType",
    "desc": "A bot command, beginning with \"/\". This shouldn't be highlighted if there are no bots in the chat.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1text_entity_type_bot_command.html"
  },
  "textEntityTypeCode": {
    "fields": [],
    "extends": "TextEntityType",
    "desc": "Text that must be formatted as if inside a code HTML tag.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1text_entity_type_code.html"
  },
  "textEntityTypeEmailAddress": {
    "fields": [],
    "extends": "TextEntityType",
    "desc": "An email address.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1text_entity_type_email_address.html"
  },
  "textEntityTypeHashtag": {
    "fields": [],
    "extends": "TextEntityType",
    "desc": "A hashtag text, beginning with \"#\".",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1text_entity_type_hashtag.html"
  },
  "textEntityTypeItalic": {
    "fields": [],
    "extends": "TextEntityType",
    "desc": "An italic text.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1text_entity_type_italic.html"
  },
  "textEntityTypeMention": {
    "fields": [],
    "extends": "TextEntityType",
    "desc": "A mention of a user by their username.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1text_entity_type_mention.html"
  },
  "textEntityTypeMentionName": {
    "fields": [
      {
        "type": "number",
        "name": "user_id",
        "desc": "Identifier of the mentioned user."
      }
    ],
    "extends": "TextEntityType",
    "desc": "A text shows instead of a raw mention of the user (e.g., when the user has no username).",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1text_entity_type_mention_name.html"
  },
  "textEntityTypePre": {
    "fields": [],
    "extends": "TextEntityType",
    "desc": "Text that must be formatted as if inside a pre HTML tag.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1text_entity_type_pre.html"
  },
  "textEntityTypePreCode": {
    "fields": [
      {
        "type": "string",
        "name": "language",
        "desc": "Programming language of the code; as defined by the sender."
      }
    ],
    "extends": "TextEntityType",
    "desc": "Text that must be formatted as if inside pre, and code HTML tags.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1text_entity_type_pre_code.html"
  },
  "testBytes": {
    "fields": [
      {
        "type": "string",
        "name": "value",
        "desc": "Bytes."
      }
    ],
    "extends": "TDObject",
    "desc": "A simple object containing a sequence of bytes; for testing only.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1test_bytes.html"
  },
  "textEntityTypeTextUrl": {
    "fields": [
      {
        "type": "string",
        "name": "url",
        "desc": "URL to be opened when the link is clicked."
      }
    ],
    "extends": "TextEntityType",
    "desc": "A text description shown instead of a raw URL.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1text_entity_type_text_url.html"
  },
  "textEntityTypeUrl": {
    "fields": [],
    "extends": "TextEntityType",
    "desc": "An HTTP URL.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1text_entity_type_url.html"
  },
  "TextParseMode": {
    "fields": [],
    "extends": "TDObject",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_text_parse_mode.html"
  },
  "textParseModeMarkdown": {
    "fields": [],
    "extends": "TextParseMode",
    "desc": "The text should be parsed in markdown-style.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1text_parse_mode_markdown.html"
  },
  "textParseModeHTML": {
    "fields": [],
    "extends": "TextParseMode",
    "desc": "The text should be parsed in HTML-style.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1text_parse_mode_h_t_m_l.html"
  },
  "tMeUrl": {
    "fields": [
      {
        "type": "string",
        "name": "url",
        "desc": "URL."
      },
      {
        "type": "TMeUrlType",
        "name": "type",
        "desc": "Type of the URL."
      }
    ],
    "extends": "TDObject",
    "desc": "Represents a URL linking to an internal Telegram entity.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1t_me_url.html"
  },
  "tMeUrls": {
    "fields": [
      {
        "type": "tMeUrl[]",
        "name": "urls",
        "desc": "List of URLs."
      }
    ],
    "extends": "TDObject",
    "desc": "Contains a list of t.me URLs.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1t_me_urls.html"
  },
  "TMeUrlType": {
    "fields": [],
    "extends": "TDObject",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_t_me_url_type.html"
  },
  "tMeUrlTypeStickerSet": {
    "fields": [
      {
        "type": "string",
        "name": "sticker_set_id",
        "desc": "Identifier of the sticker set."
      }
    ],
    "extends": "TMeUrlType",
    "desc": "A URL linking to a sticker set.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1t_me_url_type_sticker_set.html"
  },
  "tMeUrlTypeChatInvite": {
    "fields": [
      {
        "type": "chatInviteLinkInfo",
        "name": "info",
        "desc": "Chat invite link info."
      }
    ],
    "extends": "TMeUrlType",
    "desc": "A chat invite link.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1t_me_url_type_chat_invite.html"
  },
  "tMeUrlTypeSupergroup": {
    "fields": [
      {
        "type": "string",
        "name": "supergroup_id",
        "desc": "Identifier of the supergroup or channel."
      }
    ],
    "extends": "TMeUrlType",
    "desc": "A URL linking to a public supergroup or channel.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1t_me_url_type_supergroup.html"
  },
  "tMeUrlTypeUser": {
    "fields": [
      {
        "type": "number",
        "name": "user_id",
        "desc": "Identifier of the user."
      }
    ],
    "extends": "TMeUrlType",
    "desc": "A URL linking to a user.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1t_me_url_type_user.html"
  },
  "TopChatCategory": {
    "fields": [],
    "extends": "TDObject",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_top_chat_category.html"
  },
  "topChatCategoryBots": {
    "fields": [],
    "extends": "TopChatCategory",
    "desc": "A category containing frequently used private chats with bot users.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1top_chat_category_bots.html"
  },
  "topChatCategoryCalls": {
    "fields": [],
    "extends": "TopChatCategory",
    "desc": "A category containing frequently used chats used for calls.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1top_chat_category_calls.html"
  },
  "tdlibParameters": {
    "fields": [
      {
        "type": "bool",
        "name": "use_test_dc",
        "desc": "If set to true, the Telegram test environment will be used instead of the production environment."
      },
      {
        "type": "string",
        "name": "database_directory",
        "desc": "The path to the directory for the persistent database; if empty, the current working directory will be used."
      },
      {
        "type": "string",
        "name": "files_directory",
        "desc": "The path to the directory for storing files; if empty, database_directory will be used."
      },
      {
        "type": "bool",
        "name": "use_file_database",
        "desc": "If set to true, information about downloaded and uploaded files will be saved between application restarts."
      },
      {
        "type": "bool",
        "name": "use_chat_info_database",
        "desc": "If set to true, the library will maintain a cache of users, basic groups, supergroups, channels and secret chats. Implies use_file_database."
      },
      {
        "type": "bool",
        "name": "use_message_database",
        "desc": "If set to true, the library will maintain a cache of chats and messages. Implies use_chat_info_database."
      },
      {
        "type": "bool",
        "name": "use_secret_chats",
        "desc": "If set to true, support for secret chats will be enabled."
      },
      {
        "type": "number",
        "name": "api_id",
        "desc": "Application identifier for Telegram API access, which can be obtained at <a href=\"https://my.telegram.org\">https://my.telegram.org</a>."
      },
      {
        "type": "string",
        "name": "api_hash",
        "desc": "Application identifier hash for Telegram API access, which can be obtained at <a href=\"https://my.telegram.org\">https://my.telegram.org</a>."
      },
      {
        "type": "string",
        "name": "system_language_code",
        "desc": "IETF language tag of the user's operating system language."
      },
      {
        "type": "string",
        "name": "device_model",
        "desc": "Model of the device the application is being run on."
      },
      {
        "type": "string",
        "name": "system_version",
        "desc": "Version of the operating system the application is being run on."
      },
      {
        "type": "string",
        "name": "application_version",
        "desc": "Application version."
      },
      {
        "type": "bool",
        "name": "enable_storage_optimizer",
        "desc": "If set to true, old files will automatically be deleted."
      },
      {
        "type": "bool",
        "name": "ignore_file_names",
        "desc": "If set to true, original file names will be ignored. Otherwise, downloaded files will be saved under names as close as possible to the original name."
      }
    ],
    "extends": "TDObject",
    "desc": "Contains parameters for TDLib initialization.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1tdlib_parameters.html"
  },
  "topChatCategoryChannels": {
    "fields": [],
    "extends": "TopChatCategory",
    "desc": "A category containing frequently used channels.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1top_chat_category_channels.html"
  },
  "temporaryPasswordState": {
    "fields": [
      {
        "type": "bool",
        "name": "has_password",
        "desc": "True, if a temporary password is available."
      },
      {
        "type": "number",
        "name": "valid_for",
        "desc": "Time left before the temporary password expires, in seconds."
      }
    ],
    "extends": "TDObject",
    "desc": "Returns information about the availability of a temporary password, which can be used for payments.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1temporary_password_state.html"
  },
  "topChatCategoryGroups": {
    "fields": [],
    "extends": "TopChatCategory",
    "desc": "A category containing frequently used basic groups and supergroups.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1top_chat_category_groups.html"
  },
  "topChatCategoryUsers": {
    "fields": [],
    "extends": "TopChatCategory",
    "desc": "A category containing frequently used private chats with non-bot users.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1top_chat_category_users.html"
  },
  "topChatCategoryInlineBots": {
    "fields": [],
    "extends": "TopChatCategory",
    "desc": "A category containing frequently used chats with inline bots sorted by their usage in inline mode.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1top_chat_category_inline_bots.html"
  },
  "updateAuthorizationState": {
    "fields": [
      {
        "type": "AuthorizationState",
        "name": "authorization_state",
        "desc": "New authorization state."
      }
    ],
    "extends": "Update",
    "desc": "The user authorization state has changed.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_authorization_state.html"
  },
  "Update": {
    "fields": [],
    "extends": "TDObject",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_update.html"
  },
  "updateBasicGroupFullInfo": {
    "fields": [
      {
        "type": "number",
        "name": "basic_group_id",
        "desc": "Identifier of a basic group."
      },
      {
        "type": "basicGroupFullInfo",
        "name": "basic_group_full_info",
        "desc": "New full information about the group."
      }
    ],
    "extends": "Update",
    "desc": "Some data from basicGroupFullInfo has been changed.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_basic_group_full_info.html"
  },
  "updateCall": {
    "fields": [
      {
        "type": "call",
        "name": "call",
        "desc": "New data about a call."
      }
    ],
    "extends": "Update",
    "desc": "Information about a call was updated.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_call.html"
  },
  "updateChatDraftMessage": {
    "fields": [
      {
        "type": "string",
        "name": "chat_id",
        "desc": "Chat identifier."
      },
      {
        "type": "draftMessage",
        "name": "draft_message",
        "desc": "The new draft message; may be null."
      },
      {
        "type": "string",
        "name": "order",
        "desc": "New value of the chat order."
      }
    ],
    "extends": "Update",
    "desc": "A draft has changed. Be aware that the update may come in the currently opened chat but with old content of the draft. If the user has changed the content of the draft, this update shouldn't be applied.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_chat_draft_message.html"
  },
  "updateBasicGroup": {
    "fields": [
      {
        "type": "basicGroup",
        "name": "basic_group",
        "desc": "New data about the group."
      }
    ],
    "extends": "Update",
    "desc": "Some data of a basic group has changed. This update is guaranteed to come before the basic group identifier is returned to the client, as long as the library has information on the group.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_basic_group.html"
  },
  "updateChatIsPinned": {
    "fields": [
      {
        "type": "string",
        "name": "chat_id",
        "desc": "Chat identifier."
      },
      {
        "type": "bool",
        "name": "is_pinned",
        "desc": "New value of is_pinned."
      },
      {
        "type": "string",
        "name": "order",
        "desc": "New value of the chat order."
      }
    ],
    "extends": "Update",
    "desc": "A chat was pinned or unpinned.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_chat_is_pinned.html"
  },
  "updateChatOrder": {
    "fields": [
      {
        "type": "string",
        "name": "chat_id",
        "desc": "Chat identifier."
      },
      {
        "type": "string",
        "name": "order",
        "desc": "New value of the order."
      }
    ],
    "extends": "Update",
    "desc": "The order of the chat in the chats list has changed. Instead of this update updateChatLastMessage, updateChatIsPinned or updateChatDraftMessage might be sent.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_chat_order.html"
  },
  "updateChatReadInbox": {
    "fields": [
      {
        "type": "string",
        "name": "chat_id",
        "desc": "Chat identifier."
      },
      {
        "type": "string",
        "name": "last_read_inbox_message_id",
        "desc": "Identifier of the last read incoming message."
      },
      {
        "type": "number",
        "name": "unread_count",
        "desc": "The number of unread messages left in the chat."
      }
    ],
    "extends": "Update",
    "desc": "Incoming messages were read.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_chat_read_inbox.html"
  },
  "updateChatPhoto": {
    "fields": [
      {
        "type": "string",
        "name": "chat_id",
        "desc": "Chat identifier."
      },
      {
        "type": "chatPhoto",
        "name": "photo",
        "desc": "The new chat photo; may be null."
      }
    ],
    "extends": "Update",
    "desc": "A chat photo was changed.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_chat_photo.html"
  },
  "updateChatReadOutbox": {
    "fields": [
      {
        "type": "string",
        "name": "chat_id",
        "desc": "Chat identifier."
      },
      {
        "type": "string",
        "name": "last_read_outbox_message_id",
        "desc": "Identifier of last read outgoing message."
      }
    ],
    "extends": "Update",
    "desc": "Outgoing messages were read.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_chat_read_outbox.html"
  },
  "updateChatReplyMarkup": {
    "fields": [
      {
        "type": "string",
        "name": "chat_id",
        "desc": "Chat identifier."
      },
      {
        "type": "string",
        "name": "reply_markup_message_id",
        "desc": "Identifier of the message from which reply markup needs to be used; 0 if there is no default custom reply markup in the chat."
      }
    ],
    "extends": "Update",
    "desc": "The default chat reply markup was changed. Can occur because new messages with reply markup were received or because an old reply markup was hidden by the user.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_chat_reply_markup.html"
  },
  "updateChatTitle": {
    "fields": [
      {
        "type": "string",
        "name": "chat_id",
        "desc": "Chat identifier."
      },
      {
        "type": "string",
        "name": "title",
        "desc": "The new chat title."
      }
    ],
    "extends": "Update",
    "desc": "The title of a chat was changed.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_chat_title.html"
  },
  "updateChatUnreadMentionCount": {
    "fields": [
      {
        "type": "string",
        "name": "chat_id",
        "desc": "Chat identifier."
      },
      {
        "type": "number",
        "name": "unread_mention_count",
        "desc": "The number of unread mention messages left in the chat."
      }
    ],
    "extends": "Update",
    "desc": "The chat unread_mention_count has changed.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_chat_unread_mention_count.html"
  },
  "updateConnectionState": {
    "fields": [
      {
        "type": "ConnectionState",
        "name": "state",
        "desc": "The new connection state."
      }
    ],
    "extends": "Update",
    "desc": "The connection state has changed.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_connection_state.html"
  },
  "updateFavoriteStickers": {
    "fields": [
      {
        "type": "number[]",
        "name": "sticker_ids",
        "desc": "The new list of file identifiers of favorite stickers."
      }
    ],
    "extends": "Update",
    "desc": "The list of favorite stickers was updated.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_favorite_stickers.html"
  },
  "updateDeleteMessages": {
    "fields": [
      {
        "type": "string",
        "name": "chat_id",
        "desc": "Chat identifier."
      },
      {
        "type": "string[]",
        "name": "message_ids",
        "desc": "Identifiers of the deleted messages."
      },
      {
        "type": "bool",
        "name": "is_permanent",
        "desc": "True, if the messages are permanently deleted by a user (as opposed to just becoming unaccessible)."
      },
      {
        "type": "bool",
        "name": "from_cache",
        "desc": "True, if the messages are deleted only from the cache and can possibly be retrieved again in the future."
      }
    ],
    "extends": "Update",
    "desc": "Some messages were deleted.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_delete_messages.html"
  },
  "updateFile": {
    "fields": [
      {
        "type": "file",
        "name": "file",
        "desc": "New data about the file."
      }
    ],
    "extends": "Update",
    "desc": "Information about a file was updated.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_file.html"
  },
  "updateFileGenerationStop": {
    "fields": [
      {
        "type": "string",
        "name": "generation_id",
        "desc": "Unique identifier for the generation process."
      }
    ],
    "extends": "Update",
    "desc": "File generation is no longer needed.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_file_generation_stop.html"
  },
  "updateFileGenerationStart": {
    "fields": [
      {
        "type": "string",
        "name": "generation_id",
        "desc": "Unique identifier for the generation process."
      },
      {
        "type": "string",
        "name": "original_path",
        "desc": "The path to a file from which a new file is generated, may be empty."
      },
      {
        "type": "string",
        "name": "destination_path",
        "desc": "The path to a file that should be created and where the new file should be generated."
      },
      {
        "type": "string",
        "name": "conversion",
        "desc": "String specifying the conversion applied to the original file."
      }
    ],
    "extends": "Update",
    "desc": "The file generation process needs to be started by the client.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_file_generation_start.html"
  },
  "updateInstalledStickerSets": {
    "fields": [
      {
        "type": "bool",
        "name": "is_masks",
        "desc": "True, if the list of installed mask sticker sets was updated."
      },
      {
        "type": "string[]",
        "name": "sticker_set_ids",
        "desc": "The new list of installed ordinary sticker sets."
      }
    ],
    "extends": "Update",
    "desc": "The list of installed sticker sets was updated.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_installed_sticker_sets.html"
  },
  "updateMessageContent": {
    "fields": [
      {
        "type": "string",
        "name": "chat_id",
        "desc": "Chat identifier."
      },
      {
        "type": "string",
        "name": "message_id",
        "desc": "Message identifier."
      },
      {
        "type": "MessageContent",
        "name": "new_content",
        "desc": "New message content."
      }
    ],
    "extends": "Update",
    "desc": "The message content has changed.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_message_content.html"
  },
  "updateMessageContentOpened": {
    "fields": [
      {
        "type": "string",
        "name": "chat_id",
        "desc": "Chat identifier."
      },
      {
        "type": "string",
        "name": "message_id",
        "desc": "Message identifier."
      }
    ],
    "extends": "Update",
    "desc": "The message content was opened. Updates voice note messages to \"listened\", video note messages to \"viewed\" and starts the TTL timer for self-destructing messages.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_message_content_opened.html"
  },
  "updateMessageEdited": {
    "fields": [
      {
        "type": "string",
        "name": "chat_id",
        "desc": "Chat identifier."
      },
      {
        "type": "string",
        "name": "message_id",
        "desc": "Message identifier."
      },
      {
        "type": "number",
        "name": "edit_date",
        "desc": "Point in time (Unix timestamp) when the message was edited."
      },
      {
        "type": "ReplyMarkup",
        "name": "reply_markup",
        "desc": "New message reply markup; may be null."
      }
    ],
    "extends": "Update",
    "desc": "A message was edited. Changes in the message content will come in a separate updateMessageContent.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_message_edited.html"
  },
  "updateMessageMentionRead": {
    "fields": [
      {
        "type": "string",
        "name": "chat_id",
        "desc": "Chat identifier."
      },
      {
        "type": "string",
        "name": "message_id",
        "desc": "Message identifier."
      },
      {
        "type": "number",
        "name": "unread_mention_count",
        "desc": "The new number of unread mention messages left in the chat."
      }
    ],
    "extends": "Update",
    "desc": "A message with an unread mention was read.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_message_mention_read.html"
  },
  "updateMessageSendAcknowledged": {
    "fields": [
      {
        "type": "string",
        "name": "chat_id",
        "desc": "The chat identifier of the sent message."
      },
      {
        "type": "string",
        "name": "message_id",
        "desc": "A temporary message identifier."
      }
    ],
    "extends": "Update",
    "desc": "A request to send a message has reached the Telegram server. This doesn't mean that the message will be sent successfully or even that the send message request will be processed. This update will be sent only if the option \"use_quick_ack\" is set to true. This update may be sent multiple times for the same message.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_message_send_acknowledged.html"
  },
  "updateMessageSendFailed": {
    "fields": [
      {
        "type": "message",
        "name": "message",
        "desc": "Contains information about the message that failed to send."
      },
      {
        "type": "string",
        "name": "old_message_id",
        "desc": "The previous temporary message identifier."
      },
      {
        "type": "number",
        "name": "error_code",
        "desc": "An error code."
      },
      {
        "type": "string",
        "name": "error_message",
        "desc": "Error message."
      }
    ],
    "extends": "Update",
    "desc": "A message failed to send. Be aware that some messages being sent can be irrecoverably deleted, in which case updateDeleteMessages will be received instead of this update.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_message_send_failed.html"
  },
  "updateMessageSendSucceeded": {
    "fields": [
      {
        "type": "message",
        "name": "message",
        "desc": "Information about the sent message. Usually only the message identifier, date, and content are changed, but almost all other fields can also change."
      },
      {
        "type": "string",
        "name": "old_message_id",
        "desc": "The previous temporary message identifier."
      }
    ],
    "extends": "Update",
    "desc": "A message has been successfully sent.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_message_send_succeeded.html"
  },
  "updateMessageViews": {
    "fields": [
      {
        "type": "string",
        "name": "chat_id",
        "desc": "Chat identifier."
      },
      {
        "type": "string",
        "name": "message_id",
        "desc": "Message identifier."
      },
      {
        "type": "number",
        "name": "views",
        "desc": "New value of the view count."
      }
    ],
    "extends": "Update",
    "desc": "The view count of the message has changed.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_message_views.html"
  },
  "updateNewCallbackQuery": {
    "fields": [
      {
        "type": "string",
        "name": "id",
        "desc": "Unique query identifier."
      },
      {
        "type": "number",
        "name": "sender_user_id",
        "desc": "Identifier of the user who sent the query."
      },
      {
        "type": "string",
        "name": "chat_id",
        "desc": "Identifier of the chat, in which the query was sent."
      },
      {
        "type": "string",
        "name": "message_id",
        "desc": "Identifier of the message, from which the query originated."
      },
      {
        "type": "string",
        "name": "chat_instance",
        "desc": "Identifier that uniquely corresponds to the chat to which the message was sent."
      },
      {
        "type": "CallbackQueryPayload",
        "name": "payload",
        "desc": "Query payload."
      }
    ],
    "extends": "Update",
    "desc": "A new incoming callback query; for bots only.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_new_callback_query.html"
  },
  "updateNewChat": {
    "fields": [
      {
        "type": "chat",
        "name": "chat",
        "desc": "The chat."
      }
    ],
    "extends": "Update",
    "desc": "A new chat has been loaded/created. This update is guaranteed to come before the chat identifier is returned to the client. The chat field changes will be reported through separate updates.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_new_chat.html"
  },
  "updateNewChosenInlineResult": {
    "fields": [
      {
        "type": "number",
        "name": "sender_user_id",
        "desc": "Identifier of the user who sent the query."
      },
      {
        "type": "location",
        "name": "user_location",
        "desc": "User location, provided by the client; may be null."
      },
      {
        "type": "string",
        "name": "query",
        "desc": "Text of the query."
      },
      {
        "type": "string",
        "name": "result_id",
        "desc": "Identifier of the chosen result."
      },
      {
        "type": "string",
        "name": "inline_message_id",
        "desc": "Identifier of the sent inline message, if known."
      }
    ],
    "extends": "Update",
    "desc": "The user has chosen a result of an inline query; for bots only.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_new_chosen_inline_result.html"
  },
  "updateNewCustomEvent": {
    "fields": [
      {
        "type": "string",
        "name": "event",
        "desc": "A JSON-serialized event."
      }
    ],
    "extends": "Update",
    "desc": "A new incoming event; for bots only.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_new_custom_event.html"
  },
  "updateNewCustomQuery": {
    "fields": [
      {
        "type": "string",
        "name": "id",
        "desc": "The query identifier."
      },
      {
        "type": "string",
        "name": "data",
        "desc": "JSON-serialized query data."
      },
      {
        "type": "number",
        "name": "timeout",
        "desc": "Query timeout."
      }
    ],
    "extends": "Update",
    "desc": "A new incoming query; for bots only.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_new_custom_query.html"
  },
  "updateNewInlineCallbackQuery": {
    "fields": [
      {
        "type": "string",
        "name": "id",
        "desc": "Unique query identifier."
      },
      {
        "type": "number",
        "name": "sender_user_id",
        "desc": "Identifier of the user who sent the query."
      },
      {
        "type": "string",
        "name": "inline_message_id",
        "desc": "Identifier of the inline message, from which the query originated."
      },
      {
        "type": "string",
        "name": "chat_instance",
        "desc": "An identifier uniquely corresponding to the chat a message was sent to."
      },
      {
        "type": "CallbackQueryPayload",
        "name": "payload",
        "desc": "Query payload."
      }
    ],
    "extends": "Update",
    "desc": "A new incoming callback query from a message sent via a bot; for bots only.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_new_inline_callback_query.html"
  },
  "updateNewInlineQuery": {
    "fields": [
      {
        "type": "string",
        "name": "id",
        "desc": "Unique query identifier."
      },
      {
        "type": "number",
        "name": "sender_user_id",
        "desc": "Identifier of the user who sent the query."
      },
      {
        "type": "location",
        "name": "user_location",
        "desc": "User location, provided by the client; may be null."
      },
      {
        "type": "string",
        "name": "query",
        "desc": "Text of the query."
      },
      {
        "type": "string",
        "name": "offset",
        "desc": "Offset of the first entry to return."
      }
    ],
    "extends": "Update",
    "desc": "A new incoming inline query; for bots only.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_new_inline_query.html"
  },
  "updateNewMessage": {
    "fields": [
      {
        "type": "message",
        "name": "message",
        "desc": "The new message."
      },
      {
        "type": "bool",
        "name": "disable_notification",
        "desc": "True, if this message must not generate a notification."
      },
      {
        "type": "bool",
        "name": "contains_mention",
        "desc": "True, if the message contains a mention of the current user."
      }
    ],
    "extends": "Update",
    "desc": "A new message was received; can also be an outgoing message sent from a different device.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_new_message.html"
  },
  "updateChatLastMessage": {
    "fields": [
      {
        "type": "string",
        "name": "chat_id",
        "desc": "Chat identifier."
      },
      {
        "type": "message",
        "name": "last_message",
        "desc": "The new last message in the chat; may be null."
      },
      {
        "type": "string",
        "name": "order",
        "desc": "New value of the chat order."
      }
    ],
    "extends": "Update",
    "desc": "The last message of a chat was changed. If last_message is null then the last message in the chat became unknown. Some new unknown messages might be added to the chat in this case.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_chat_last_message.html"
  },
  "updateNewPreCheckoutQuery": {
    "fields": [
      {
        "type": "string",
        "name": "id",
        "desc": "Unique query identifier."
      },
      {
        "type": "number",
        "name": "sender_user_id",
        "desc": "Identifier of the user who sent the query."
      },
      {
        "type": "string",
        "name": "currency",
        "desc": "Currency for the product price."
      },
      {
        "type": "string",
        "name": "total_amount",
        "desc": "Total price for the product, in the minimal quantity of the currency."
      },
      {
        "type": "string",
        "name": "invoice_payload",
        "desc": "Invoice payload."
      },
      {
        "type": "string",
        "name": "shipping_option_id",
        "desc": "Identifier of a shipping option chosen by the user; may be empty if not applicable."
      },
      {
        "type": "orderInfo",
        "name": "order_info",
        "desc": "Information about the order; may be null."
      }
    ],
    "extends": "Update",
    "desc": "A new incoming pre-checkout query; for bots only. Contains full information about a checkout.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_new_pre_checkout_query.html"
  },
  "updateNewShippingQuery": {
    "fields": [
      {
        "type": "string",
        "name": "id",
        "desc": "Unique query identifier."
      },
      {
        "type": "number",
        "name": "sender_user_id",
        "desc": "Identifier of the user who sent the query."
      },
      {
        "type": "string",
        "name": "invoice_payload",
        "desc": "Invoice payload."
      },
      {
        "type": "shippingAddress",
        "name": "shipping_address",
        "desc": "User shipping address."
      }
    ],
    "extends": "Update",
    "desc": "A new incoming shipping query; for bots only. Only for invoices with flexible price.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_new_shipping_query.html"
  },
  "updateOption": {
    "fields": [
      {
        "type": "string",
        "name": "name",
        "desc": "The option name."
      },
      {
        "type": "OptionValue",
        "name": "value",
        "desc": "The new option value."
      }
    ],
    "extends": "Update",
    "desc": "An option changed its value.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_option.html"
  },
  "updateNotificationSettings": {
    "fields": [
      {
        "type": "NotificationSettingsScope",
        "name": "scope",
        "desc": "Types of chats for which notification settings were updated."
      },
      {
        "type": "notificationSettings",
        "name": "notification_settings",
        "desc": "The new notification settings."
      }
    ],
    "extends": "Update",
    "desc": "Notification settings for some chats were updated.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_notification_settings.html"
  },
  "updateRecentStickers": {
    "fields": [
      {
        "type": "bool",
        "name": "is_attached",
        "desc": "True, if the list of stickers attached to photo or video files was updated, otherwise the list of sent stickers is updated."
      },
      {
        "type": "number[]",
        "name": "sticker_ids",
        "desc": "The new list of file identifiers of recently used stickers."
      }
    ],
    "extends": "Update",
    "desc": "The list of recently used stickers was updated.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_recent_stickers.html"
  },
  "updateSavedAnimations": {
    "fields": [
      {
        "type": "number[]",
        "name": "animation_ids",
        "desc": "The new list of file identifiers of saved animations."
      }
    ],
    "extends": "Update",
    "desc": "The list of saved animations was updated.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_saved_animations.html"
  },
  "updateSecretChat": {
    "fields": [
      {
        "type": "secretChat",
        "name": "secret_chat",
        "desc": "New data about the secret chat."
      }
    ],
    "extends": "Update",
    "desc": "Some data of a secret chat has changed. This update is guaranteed to come before the secret chat identifier is returned to the client as long as the library has information about the secret chat.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_secret_chat.html"
  },
  "updateServiceNotification": {
    "fields": [
      {
        "type": "string",
        "name": "type",
        "desc": "Notification type."
      },
      {
        "type": "MessageContent",
        "name": "content",
        "desc": "Notification content."
      }
    ],
    "extends": "Update",
    "desc": "Service notification from the server. Upon receiving this the client must show a popup with the content of the notification.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_service_notification.html"
  },
  "updateSupergroup": {
    "fields": [
      {
        "type": "supergroup",
        "name": "supergroup",
        "desc": "New data about the supergroup."
      }
    ],
    "extends": "Update",
    "desc": "Some data of a supergroup or a channel has changed. This update is guaranteed to come before the supergroup identifier is returned to the client as long as the library has information on the supergroup.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_supergroup.html"
  },
  "updateSupergroupFullInfo": {
    "fields": [
      {
        "type": "number",
        "name": "supergroup_id",
        "desc": "Identifier of the supergroup or channel."
      },
      {
        "type": "supergroupFullInfo",
        "name": "supergroup_full_info",
        "desc": "New full information about the supergroup."
      }
    ],
    "extends": "Update",
    "desc": "Some data from supergroupFullInfo has been changed.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_supergroup_full_info.html"
  },
  "updateTrendingStickerSets": {
    "fields": [
      {
        "type": "stickerSets",
        "name": "sticker_sets",
        "desc": "The new list of trending sticker sets."
      }
    ],
    "extends": "Update",
    "desc": "The list of trending sticker sets was updated or some of them were viewed.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_trending_sticker_sets.html"
  },
  "updateUser": {
    "fields": [
      {
        "type": "user",
        "name": "user",
        "desc": "New data about the user."
      }
    ],
    "extends": "Update",
    "desc": "Some data of a user has changed. This update is guaranteed to come before the user identifier is returned to the client as long as the library has information on the user.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_user.html"
  },
  "updateUserChatAction": {
    "fields": [
      {
        "type": "string",
        "name": "chat_id",
        "desc": "Chat identifier."
      },
      {
        "type": "number",
        "name": "user_id",
        "desc": "Identifier of a user performing an action."
      },
      {
        "type": "ChatAction",
        "name": "action",
        "desc": "The action description."
      }
    ],
    "extends": "Update",
    "desc": "User activity in the chat has changed.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_user_chat_action.html"
  },
  "updateUserFullInfo": {
    "fields": [
      {
        "type": "number",
        "name": "user_id",
        "desc": "User identifier."
      },
      {
        "type": "userFullInfo",
        "name": "user_full_info",
        "desc": "New full information about the user."
      }
    ],
    "extends": "Update",
    "desc": "Some data from userFullInfo has been changed.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_user_full_info.html"
  },
  "updateUserPrivacySettingRules": {
    "fields": [
      {
        "type": "UserPrivacySetting",
        "name": "setting",
        "desc": "The privacy setting."
      },
      {
        "type": "userPrivacySettingRules",
        "name": "rules",
        "desc": "New privacy rules."
      }
    ],
    "extends": "Update",
    "desc": "Some privacy setting rules have been changed.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_user_privacy_setting_rules.html"
  },
  "updateUserStatus": {
    "fields": [
      {
        "type": "number",
        "name": "user_id",
        "desc": "User identifier."
      },
      {
        "type": "UserStatus",
        "name": "status",
        "desc": "New status of the user."
      }
    ],
    "extends": "Update",
    "desc": "The user went online or offline.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_user_status.html"
  },
  "userFullInfo": {
    "fields": [
      {
        "type": "bool",
        "name": "is_blocked",
        "desc": "True, if the user is blacklisted by the current user."
      },
      {
        "type": "bool",
        "name": "can_be_called",
        "desc": "True, if the user can be called."
      },
      {
        "type": "bool",
        "name": "has_private_calls",
        "desc": "True, if the user can't be called due to their privacy settings."
      },
      {
        "type": "string",
        "name": "bio",
        "desc": "A short user bio."
      },
      {
        "type": "string",
        "name": "share_text",
        "desc": "For bots, the text that is included with the link when users share the bot."
      },
      {
        "type": "number",
        "name": "group_in_common_count",
        "desc": "Number of group chats where both the other user and the current user are a member; 0 for the current user."
      },
      {
        "type": "botInfo",
        "name": "bot_info",
        "desc": "If the user is a bot, information about the bot; may be null."
      }
    ],
    "extends": "TDObject",
    "desc": "Contains full information about a user (except the full list of profile photos).",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1user_full_info.html"
  },
  "user": {
    "fields": [
      {
        "type": "number",
        "name": "id",
        "desc": "User identifier."
      },
      {
        "type": "string",
        "name": "first_name",
        "desc": "First name of the user."
      },
      {
        "type": "string",
        "name": "last_name",
        "desc": "Last name of the user."
      },
      {
        "type": "string",
        "name": "username",
        "desc": "Username of the user."
      },
      {
        "type": "string",
        "name": "phone_number",
        "desc": "Phone number of the user."
      },
      {
        "type": "UserStatus",
        "name": "status",
        "desc": "Current online status of the user."
      },
      {
        "type": "profilePhoto",
        "name": "profile_photo",
        "desc": "Profile photo of the user; may be null."
      },
      {
        "type": "LinkState",
        "name": "outgoing_link",
        "desc": "Relationship from the current user to the other user."
      },
      {
        "type": "LinkState",
        "name": "incoming_link",
        "desc": "Relationship from the other user to the current user."
      },
      {
        "type": "bool",
        "name": "is_verified",
        "desc": "True, if the user is verified."
      },
      {
        "type": "string",
        "name": "restriction_reason",
        "desc": "If non-empty, it contains the reason why access to this user must be restricted. The format of the string is \"{type}: {description}\". {type} contains the type of the restriction and at least one of the suffixes \"-all\", \"-ios\", \"-android\", or \"-wp\", which describe the platforms on which access should be restricted. (For example, \"terms-ios-android\". {description} contains a human-readable description of the restriction, which can be shown to the user.)"
      },
      {
        "type": "bool",
        "name": "have_access",
        "desc": "If false, the user is inaccessible, and the only information known about the user is inside this class. It can't be passed to any method except GetUser."
      },
      {
        "type": "UserType",
        "name": "type",
        "desc": "Type of the user."
      },
      {
        "type": "string",
        "name": "language_code",
        "desc": "IETF language tag of the user's language; only available to bots."
      }
    ],
    "extends": "TDObject",
    "desc": "Represents a user.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1user.html"
  },
  "UserPrivacySetting": {
    "fields": [],
    "extends": "TDObject",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_user_privacy_setting.html"
  },
  "userPrivacySettingAllowCalls": {
    "fields": [],
    "extends": "UserPrivacySetting",
    "desc": "A privacy setting for managing whether the user can be called.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1user_privacy_setting_allow_calls.html"
  },
  "userPrivacySettingShowStatus": {
    "fields": [],
    "extends": "UserPrivacySetting",
    "desc": "A privacy setting for managing whether the user's online status is visible.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1user_privacy_setting_show_status.html"
  },
  "UserPrivacySettingRule": {
    "fields": [],
    "extends": "TDObject",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_user_privacy_setting_rule.html"
  },
  "userPrivacySettingAllowChatInvites": {
    "fields": [],
    "extends": "UserPrivacySetting",
    "desc": "A privacy setting for managing whether the user can be invited to chats.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1user_privacy_setting_allow_chat_invites.html"
  },
  "userPrivacySettingRuleAllowAll": {
    "fields": [],
    "extends": "UserPrivacySettingRule",
    "desc": "A rule to allow all users to do something.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1user_privacy_setting_rule_allow_all.html"
  },
  "userPrivacySettingRuleAllowContacts": {
    "fields": [],
    "extends": "UserPrivacySettingRule",
    "desc": "A rule to allow all of a user's contacts to do something.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1user_privacy_setting_rule_allow_contacts.html"
  },
  "userPrivacySettingRuleAllowUsers": {
    "fields": [
      {
        "type": "number[]",
        "name": "user_ids",
        "desc": "The user identifiers."
      }
    ],
    "extends": "UserPrivacySettingRule",
    "desc": "A rule to allow certain specified users to do something.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1user_privacy_setting_rule_allow_users.html"
  },
  "userPrivacySettingRuleRestrictAll": {
    "fields": [],
    "extends": "UserPrivacySettingRule",
    "desc": "A rule to restrict all users from doing something.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1user_privacy_setting_rule_restrict_all.html"
  },
  "userPrivacySettingRuleRestrictContacts": {
    "fields": [],
    "extends": "UserPrivacySettingRule",
    "desc": "A rule to restrict all contacts of a user from doing something.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1user_privacy_setting_rule_restrict_contacts.html"
  },
  "userPrivacySettingRuleRestrictUsers": {
    "fields": [
      {
        "type": "number[]",
        "name": "user_ids",
        "desc": "The user identifiers."
      }
    ],
    "extends": "UserPrivacySettingRule",
    "desc": "A rule to restrict all specified users from doing something.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1user_privacy_setting_rule_restrict_users.html"
  },
  "userPrivacySettingRules": {
    "fields": [
      {
        "type": "UserPrivacySettingRule[]",
        "name": "rules",
        "desc": "A list of rules."
      }
    ],
    "extends": "TDObject",
    "desc": "A list of privacy rules. Rules are matched in the specified order. The first matched rule defines the privacy setting for a given user. If no rule matches, the action is not allowed.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1user_privacy_setting_rules.html"
  },
  "userProfilePhotos": {
    "fields": [
      {
        "type": "number",
        "name": "total_count",
        "desc": "Total number of user profile photos."
      },
      {
        "type": "photo[]",
        "name": "photos",
        "desc": "A list of photos."
      }
    ],
    "extends": "TDObject",
    "desc": "Contains part of the list of user photos.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1user_profile_photos.html"
  },
  "UserStatus": {
    "fields": [],
    "extends": "TDObject",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_user_status.html"
  },
  "users": {
    "fields": [
      {
        "type": "number",
        "name": "total_count",
        "desc": "Approximate total count of users found."
      },
      {
        "type": "number[]",
        "name": "user_ids",
        "desc": "A list of user identifiers."
      }
    ],
    "extends": "TDObject",
    "desc": "Represents a list of users.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1users.html"
  },
  "userStatusEmpty": {
    "fields": [],
    "extends": "UserStatus",
    "desc": "The user status was never changed.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1user_status_empty.html"
  },
  "userStatusLastMonth": {
    "fields": [],
    "extends": "UserStatus",
    "desc": "The user is offline, but was online last month.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1user_status_last_month.html"
  },
  "userStatusLastWeek": {
    "fields": [],
    "extends": "UserStatus",
    "desc": "The user is offline, but was online last week.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1user_status_last_week.html"
  },
  "userStatusOffline": {
    "fields": [
      {
        "type": "number",
        "name": "was_online",
        "desc": "Point in time (Unix timestamp) when the user was last online."
      }
    ],
    "extends": "UserStatus",
    "desc": "The user is offline.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1user_status_offline.html"
  },
  "userStatusOnline": {
    "fields": [
      {
        "type": "number",
        "name": "expires",
        "desc": "Point in time (Unix timestamp) when the user's online status will expire."
      }
    ],
    "extends": "UserStatus",
    "desc": "The user is online.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1user_status_online.html"
  },
  "userStatusRecently": {
    "fields": [],
    "extends": "UserStatus",
    "desc": "The user was online recently.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1user_status_recently.html"
  },
  "UserType": {
    "fields": [],
    "extends": "TDObject",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_user_type.html"
  },
  "userTypeBot": {
    "fields": [
      {
        "type": "bool",
        "name": "can_join_groups",
        "desc": "True, if the bot can be invited to basic group and supergroup chats."
      },
      {
        "type": "bool",
        "name": "can_read_all_group_messages",
        "desc": "True, if the bot can read all messages in basic group or supergroup chats and not just those addressed to the bot. In private and channel chats a bot can always read all messages."
      },
      {
        "type": "bool",
        "name": "is_inline",
        "desc": "True, if the bot supports inline queries."
      },
      {
        "type": "string",
        "name": "inline_query_placeholder",
        "desc": "Placeholder for inline queries (displayed on the client input field)."
      },
      {
        "type": "bool",
        "name": "need_location",
        "desc": "True, if the location of the user should be sent with every inline query to this bot."
      }
    ],
    "extends": "UserType",
    "desc": "A bot (see https://core.telegram.org/bots).",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1user_type_bot.html"
  },
  "userTypeDeleted": {
    "fields": [],
    "extends": "UserType",
    "desc": "A deleted user or deleted bot. No information on the user besides the user_id is available. It is not possible to perform any active actions on this type of user.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1user_type_deleted.html"
  },
  "userTypeRegular": {
    "fields": [],
    "extends": "UserType",
    "desc": "A regular user.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1user_type_regular.html"
  },
  "userTypeUnknown": {
    "fields": [],
    "extends": "UserType",
    "desc": "No information on the user besides the user_id is available, yet this user has not been deleted. This object is extremely rare and must be handled like a deleted user. It is not possible to perform any actions on users of this type.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1user_type_unknown.html"
  },
  "validatedOrderInfo": {
    "fields": [
      {
        "type": "string",
        "name": "order_info_id",
        "desc": "Temporary identifier of the order information."
      },
      {
        "type": "shippingOption[]",
        "name": "shipping_options",
        "desc": "Available shipping options."
      }
    ],
    "extends": "TDObject",
    "desc": "Contains a temporary identifier of validated order information, which is stored for one hour. Also contains the available shipping options.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1validated_order_info.html"
  },
  "venue": {
    "fields": [
      {
        "type": "location",
        "name": "location",
        "desc": "Venue location; as defined by the sender."
      },
      {
        "type": "string",
        "name": "title",
        "desc": "Venue name; as defined by the sender."
      },
      {
        "type": "string",
        "name": "address",
        "desc": "Venue address; as defined by the sender."
      },
      {
        "type": "string",
        "name": "provider",
        "desc": "Provider of the venue database; as defined by the sender. Currently only \"foursquare\" needs to be supported."
      },
      {
        "type": "string",
        "name": "id",
        "desc": "Identifier of the venue in the provider database; as defined by the sender."
      }
    ],
    "extends": "TDObject",
    "desc": "Describes a venue.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1venue.html"
  },
  "video": {
    "fields": [
      {
        "type": "number",
        "name": "duration",
        "desc": "Duration of the video, in seconds; as defined by the sender."
      },
      {
        "type": "number",
        "name": "width",
        "desc": "Video width; as defined by the sender."
      },
      {
        "type": "number",
        "name": "height",
        "desc": "Video height; as defined by the sender."
      },
      {
        "type": "string",
        "name": "file_name",
        "desc": "Original name of the file; as defined by the sender."
      },
      {
        "type": "string",
        "name": "mime_type",
        "desc": "MIME type of the file; as defined by the sender."
      },
      {
        "type": "bool",
        "name": "has_stickers",
        "desc": "True, if stickers were added to the photo."
      },
      {
        "type": "photoSize",
        "name": "thumbnail",
        "desc": "Video thumbnail; as defined by the sender; may be null."
      },
      {
        "type": "file",
        "name": "video",
        "desc": "File containing the video."
      }
    ],
    "extends": "TDObject",
    "desc": "Describes a video file.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1video.html"
  },
  "videoNote": {
    "fields": [
      {
        "type": "number",
        "name": "duration",
        "desc": "Duration of the video, in seconds; as defined by the sender."
      },
      {
        "type": "number",
        "name": "length",
        "desc": "Video width and height; as defined by the sender."
      },
      {
        "type": "photoSize",
        "name": "thumbnail",
        "desc": "Video thumbnail; as defined by the sender; may be null."
      },
      {
        "type": "file",
        "name": "video",
        "desc": "File containing the video."
      }
    ],
    "extends": "TDObject",
    "desc": "Describes a video note. The video must be equal in width and height, cropped to a circle, and stored in MPEG4 format.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1video_note.html"
  },
  "voiceNote": {
    "fields": [
      {
        "type": "number",
        "name": "duration",
        "desc": "Duration of the voice note, in seconds; as defined by the sender."
      },
      {
        "type": "string",
        "name": "waveform",
        "desc": "A waveform representation of the voice note in 5-bit format."
      },
      {
        "type": "string",
        "name": "mime_type",
        "desc": "MIME type of the file; as defined by the sender."
      },
      {
        "type": "file",
        "name": "voice",
        "desc": "File containing the voice note."
      }
    ],
    "extends": "TDObject",
    "desc": "Describes a voice note. The voice note must be encoded with the Opus codec, and stored inside an OGG container. Voice notes can have only a single audio channel.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1voice_note.html"
  },
  "wallpaper": {
    "fields": [
      {
        "type": "number",
        "name": "id",
        "desc": "Unique persistent wallpaper identifier."
      },
      {
        "type": "photoSize[]",
        "name": "sizes",
        "desc": "Available variants of the wallpaper in different sizes. These photos can only be downloaded; they can't be sent in a message."
      },
      {
        "type": "number",
        "name": "color",
        "desc": "Main color of the wallpaper in RGB24 format; should be treated as background color if no photos are specified."
      }
    ],
    "extends": "TDObject",
    "desc": "Contains information about a wallpaper.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1wallpaper.html"
  },
  "wallpapers": {
    "fields": [
      {
        "type": "wallpaper[]",
        "name": "wallpapers",
        "desc": "A list of wallpapers."
      }
    ],
    "extends": "TDObject",
    "desc": "Contains a list of wallpapers.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1wallpapers.html"
  },
  "webPageInstantView": {
    "fields": [
      {
        "type": "PageBlock[]",
        "name": "page_blocks",
        "desc": "Content of the web page."
      },
      {
        "type": "bool",
        "name": "is_full",
        "desc": "True, if the instant view contains the full page. A network request might be needed to get the full web page instant view."
      }
    ],
    "extends": "TDObject",
    "desc": "Describes an instant view page for a web page.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1web_page_instant_view.html"
  },
  "webPage": {
    "fields": [
      {
        "type": "string",
        "name": "url",
        "desc": "Original URL of the link."
      },
      {
        "type": "string",
        "name": "display_url",
        "desc": "URL to display."
      },
      {
        "type": "string",
        "name": "type",
        "desc": "Type of the web page. Can be: article, photo, audio, video, document, profile, app, or something else."
      },
      {
        "type": "string",
        "name": "site_name",
        "desc": "Short name of the site (e.g., Google Docs, App Store)."
      },
      {
        "type": "string",
        "name": "title",
        "desc": "Title of the content."
      },
      {
        "type": "string",
        "name": "description",
        "desc": "Description of the content."
      },
      {
        "type": "photo",
        "name": "photo",
        "desc": "Image representing the content; may be null."
      },
      {
        "type": "string",
        "name": "embed_url",
        "desc": "URL to show in the embedded preview."
      },
      {
        "type": "string",
        "name": "embed_type",
        "desc": "MIME type of the embedded preview, (e.g., text/html or video/mp4)."
      },
      {
        "type": "number",
        "name": "embed_width",
        "desc": "Width of the embedded preview."
      },
      {
        "type": "number",
        "name": "embed_height",
        "desc": "Height of the embedded preview."
      },
      {
        "type": "number",
        "name": "duration",
        "desc": "Duration of the content, in seconds."
      },
      {
        "type": "string",
        "name": "author",
        "desc": "Author of the content."
      },
      {
        "type": "animation",
        "name": "animation",
        "desc": "Preview of the content as an animation, if available; may be null."
      },
      {
        "type": "audio",
        "name": "audio",
        "desc": "Preview of the content as an audio file, if available; may be null."
      },
      {
        "type": "document",
        "name": "document",
        "desc": "Preview of the content as a document, if available (currently only available for small PDF files and ZIP archives); may be null."
      },
      {
        "type": "sticker",
        "name": "sticker",
        "desc": "Preview of the content as a sticker for small WEBP files, if available; may be null."
      },
      {
        "type": "video",
        "name": "video",
        "desc": "Preview of the content as a video, if available; may be null."
      },
      {
        "type": "videoNote",
        "name": "video_note",
        "desc": "Preview of the content as a video note, if available; may be null."
      },
      {
        "type": "voiceNote",
        "name": "voice_note",
        "desc": "Preview of the content as a voice note, if available; may be null."
      },
      {
        "type": "bool",
        "name": "has_instant_view",
        "desc": "True, if the web page has an instant view."
      }
    ],
    "extends": "TDObject",
    "desc": "Describes a web page preview.",
    "type": "object",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1web_page.html"
  }
}